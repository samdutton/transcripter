1
00:00:00,000 --> 00:00:03,269
[MUSIC PLAYING]

2
00:00:03,269 --> 00:00:07,010


3
00:00:07,010 --> 00:00:08,270
SURMA: Hello, everybody.

4
00:00:08,270 --> 00:00:09,140
Yes, it's me again.

5
00:00:09,140 --> 00:00:10,175
Prepare for more bugs.

6
00:00:10,175 --> 00:00:12,225


7
00:00:12,225 --> 00:00:14,600
I'm kind of excited to be here
because we finally reached

8
00:00:14,600 --> 00:00:20,960
a point where, with Houdini,
I can talk about actual APIs.

9
00:00:20,960 --> 00:00:22,910
Because they're starting
to land, and that's

10
00:00:22,910 --> 00:00:25,160
kind of really exciting.

11
00:00:25,160 --> 00:00:29,122
But as with any talk, I have
to start with what Houdini is.

12
00:00:29,122 --> 00:00:31,580
Because on my Twitter, I often
see there's still confusion.

13
00:00:31,580 --> 00:00:34,190
Because it turns out there's
a software called Houdini.

14
00:00:34,190 --> 00:00:37,590
There is apparently a magician
that was called Houdini.

15
00:00:37,590 --> 00:00:42,270
So I want to clear up what
Houdini really is about.

16
00:00:42,270 --> 00:00:47,117
So every browser has more
or less four major stages

17
00:00:47,117 --> 00:00:48,200
in the rendering pipeline.

18
00:00:48,200 --> 00:00:51,110
It starts with styles, where the
browser collects all the style

19
00:00:51,110 --> 00:00:53,120
sheets that are in the
document and then figures

20
00:00:53,120 --> 00:00:57,200
out which element is affected
by which of these styles.

21
00:00:57,200 --> 00:00:59,750
And now that we know
the width, the height,

22
00:00:59,750 --> 00:01:04,459
and if it's Flexbox or Grid,
which style is on which

23
00:01:04,459 --> 00:01:05,720
element, we can do layout.

24
00:01:05,720 --> 00:01:08,420
We can basically calculate
how big an element is

25
00:01:08,420 --> 00:01:13,040
and align them on the page
and get boxes on the page.

26
00:01:13,040 --> 00:01:14,800
They are still empty
and transparent

27
00:01:14,800 --> 00:01:17,900
because in the next stage
we can take that layout page

28
00:01:17,900 --> 00:01:19,962
and paint it, just draw it.

29
00:01:19,962 --> 00:01:21,420
And we can draw it
all on the page.

30
00:01:21,420 --> 00:01:24,300
Sometimes elements get on
their own piece of paper,

31
00:01:24,300 --> 00:01:26,300
which is called a layer.

32
00:01:26,300 --> 00:01:28,160
And once we are done
painting, respecting

33
00:01:28,160 --> 00:01:30,800
things like background color and
the text color and the border

34
00:01:30,800 --> 00:01:33,920
color, we can give all of
that, all this pieces of paper

35
00:01:33,920 --> 00:01:36,770
to the compositor and put
them together in the page

36
00:01:36,770 --> 00:01:38,497
that you will see
on your screen.

37
00:01:38,497 --> 00:01:40,080
And if something was
on its own layer,

38
00:01:40,080 --> 00:01:41,704
we can move the pieces
of paper around.

39
00:01:41,704 --> 00:01:43,255
And that's how
animations are made.

40
00:01:43,255 --> 00:01:44,630
It's obviously
kind of a shortcut

41
00:01:44,630 --> 00:01:47,790
but you can see where
I'm coming from.

42
00:01:47,790 --> 00:01:49,290
So bringing it back
to the question,

43
00:01:49,290 --> 00:01:50,570
what really is Houdini?

44
00:01:50,570 --> 00:01:53,990
Well, Houdini is a standards
effort in the CSS working

45
00:01:53,990 --> 00:01:58,490
group in the W3C to expose
hooks into these major stages

46
00:01:58,490 --> 00:02:01,220
of the layout phase to
the developer, to you.

47
00:02:01,220 --> 00:02:03,650
So you have more control
not only over the visuals

48
00:02:03,650 --> 00:02:05,540
but to write better
polyfills and have

49
00:02:05,540 --> 00:02:10,970
more control over how your
page just appears to the user.

50
00:02:10,970 --> 00:02:13,039
It is hard because
these four stages

51
00:02:13,039 --> 00:02:14,330
are different in every browser.

52
00:02:14,330 --> 00:02:16,820
Sometimes they're even
parallel or not even

53
00:02:16,820 --> 00:02:18,255
that clearly separated.

54
00:02:18,255 --> 00:02:19,880
But we're working
with all the browsers

55
00:02:19,880 --> 00:02:24,170
to make sure everybody
can implement these APIs.

56
00:02:24,170 --> 00:02:27,320
Houdini can be super
intimidating at first.

57
00:02:27,320 --> 00:02:28,940
Because under the
Houdini umbrella,

58
00:02:28,940 --> 00:02:30,410
there's a lot of APIs.

59
00:02:30,410 --> 00:02:33,470
And you don't really immediately
know what to do with what.

60
00:02:33,470 --> 00:02:36,530
But they actually kind
of form a hierarchy.

61
00:02:36,530 --> 00:02:41,600
So you have four high-level
APIs, four major APIs

62
00:02:41,600 --> 00:02:44,210
that basically represent
those four major stages

63
00:02:44,210 --> 00:02:45,560
of the rendering pipeline.

64
00:02:45,560 --> 00:02:47,750
And then you have a couple
of lower-level APIs that

65
00:02:47,750 --> 00:02:50,300
build the underpinning,
the basis for Houdini

66
00:02:50,300 --> 00:02:52,100
and that make these
higher-level APIs

67
00:02:52,100 --> 00:02:53,720
possible in the first place.

68
00:02:53,720 --> 00:02:56,970
And specifically, worklets
are really interesting.

69
00:02:56,970 --> 00:03:00,080
Worklets are kind of
the Swiss Army knife

70
00:03:00,080 --> 00:03:01,780
within Houdini for performance.

71
00:03:01,780 --> 00:03:03,530
And so I want to make
sure I take a second

72
00:03:03,530 --> 00:03:05,090
to explain these because
we're going to use them

73
00:03:05,090 --> 00:03:06,350
for the rest of the talk.

74
00:03:06,350 --> 00:03:10,252
And more importantly, I want to
distinguish them from workers.

75
00:03:10,252 --> 00:03:11,960
Because lots of people
confuse these two,

76
00:03:11,960 --> 00:03:14,280
and I can't blame them because
they sound very similar.

77
00:03:14,280 --> 00:03:17,460
And in fact, they actually
have a lot of overlap.

78
00:03:17,460 --> 00:03:19,805
But there is a couple of
very important differences

79
00:03:19,805 --> 00:03:20,930
that I want explain to you.

80
00:03:20,930 --> 00:03:26,250
And for that, we have to
talk about the event loop.

81
00:03:26,250 --> 00:03:27,610
This is an event loop.

82
00:03:27,610 --> 00:03:29,610
And if you don't know
much about the event loop,

83
00:03:29,610 --> 00:03:30,740
that's absolutely fine.

84
00:03:30,740 --> 00:03:32,114
Everything that
you need to know,

85
00:03:32,114 --> 00:03:33,360
I will explain to you today.

86
00:03:33,360 --> 00:03:34,943
But if you want to
know more, I really

87
00:03:34,943 --> 00:03:38,239
recommend watching Jake's talk
about the event loop, which

88
00:03:38,239 --> 00:03:40,280
you can probably find on
YouTube if you just type

89
00:03:40,280 --> 00:03:41,720
in his name and event loop.

90
00:03:41,720 --> 00:03:46,170
And actually, I'm using a lot
of his visuals in this talk.

91
00:03:46,170 --> 00:03:48,170
So this is an event loop.

92
00:03:48,170 --> 00:03:50,630
It's a loop, and it
processes events.

93
00:03:50,630 --> 00:03:53,510
And it's called an event loop.

94
00:03:53,510 --> 00:03:55,520
Whenever an event happens,
the JavaScript engine

95
00:03:55,520 --> 00:03:59,180
checks if there's a handler for
this event in your code base

96
00:03:59,180 --> 00:04:02,480
and then takes the code for
that handler and queues it up.

97
00:04:02,480 --> 00:04:04,910
And every turn, the event
loop takes something out

98
00:04:04,910 --> 00:04:06,069
of the queue and runs it.

99
00:04:06,069 --> 00:04:08,360
And then, in the next turn,
it takes the next thing out

100
00:04:08,360 --> 00:04:09,800
of the queue and runs it.

101
00:04:09,800 --> 00:04:12,020
And that's obviously
super simplified,

102
00:04:12,020 --> 00:04:14,630
and there's much more
nuance to this entire thing.

103
00:04:14,630 --> 00:04:17,060
But that's kind of how
an event loop works.

104
00:04:17,060 --> 00:04:21,267
And in this world, a worker
would look like this.

105
00:04:21,267 --> 00:04:22,850
It's a completely
separate event loop.

106
00:04:22,850 --> 00:04:24,020
It's an isolated scope.

107
00:04:24,020 --> 00:04:26,450
It has its own handlers,
its own events.

108
00:04:26,450 --> 00:04:29,310
And they have nothing
to do with each other.

109
00:04:29,310 --> 00:04:31,940
They might be able to put a
task into the other loop's

110
00:04:31,940 --> 00:04:36,030
queue with postMessage,
but that's pretty much it.

111
00:04:36,030 --> 00:04:39,590
And there is considerable cost
to spinning up and maintaining

112
00:04:39,590 --> 00:04:41,750
an event loop, and
that's why you can't just

113
00:04:41,750 --> 00:04:44,450
spin up 1,000 workers
and call it a day.

114
00:04:44,450 --> 00:04:47,090
Because that's
actually quite costly.

115
00:04:47,090 --> 00:04:49,180
Worklets are different.

116
00:04:49,180 --> 00:04:53,450
They're also isolated JavaScript
code with their own scope.

117
00:04:53,450 --> 00:04:56,210
But worklets don't
have an event loop.

118
00:04:56,210 --> 00:05:00,590
Instead, they kind of attach to
already existing event loops.

119
00:05:00,590 --> 00:05:04,079
And that makes them a lot
cheaper to create and maintain.

120
00:05:04,079 --> 00:05:05,620
You can even attach
multiple worklets

121
00:05:05,620 --> 00:05:07,340
to an already
existing event loop.

122
00:05:07,340 --> 00:05:11,750
And because most worklets are
specified to be stateless,

123
00:05:11,750 --> 00:05:14,925
we can even migrate them in
the middle of their lifetime.

124
00:05:14,925 --> 00:05:16,550
So if it makes more
sense for your code

125
00:05:16,550 --> 00:05:18,174
to run in sync with
another event loop,

126
00:05:18,174 --> 00:05:21,350
we can just [POP] take it off
and take it to the next event

127
00:05:21,350 --> 00:05:23,760
loop where it makes more sense.

128
00:05:23,760 --> 00:05:26,210
So this will come in
really handy later on,

129
00:05:26,210 --> 00:05:28,830
but that's basically the big
difference between those two.

130
00:05:28,830 --> 00:05:31,490
And now that we have
worklets in our back pocket,

131
00:05:31,490 --> 00:05:35,450
we can finally talk about
the very first Houdini API,

132
00:05:35,450 --> 00:05:38,240
which is for the paint worklet.

133
00:05:38,240 --> 00:05:40,149
So as I said--

134
00:05:40,149 --> 00:05:42,440
I'm not going to go through
these in order, by the way,

135
00:05:42,440 --> 00:05:44,106
more like in order
of [? availability ?]

136
00:05:44,106 --> 00:05:45,410
if that makes sense.

137
00:05:45,410 --> 00:05:47,180
But for the paint
worklets, the API

138
00:05:47,180 --> 00:05:49,510
is called the CSS Paint API.

139
00:05:49,510 --> 00:05:52,370
And as I said, all elements have
to be painted sooner or later

140
00:05:52,370 --> 00:05:54,810
to be able to appear onscreen.

141
00:05:54,810 --> 00:05:57,080
And so far, you have
been able to use

142
00:05:57,080 --> 00:05:59,440
CSS to customize how
your elements appear

143
00:05:59,440 --> 00:06:04,430
onscreen but only with
those ways that CSS exposes.

144
00:06:04,430 --> 00:06:07,850
So for example, if you
want to do rounded corners,

145
00:06:07,850 --> 00:06:09,380
you can reduce border radius.

146
00:06:09,380 --> 00:06:11,804
And you get this, and
it's kind of great.

147
00:06:11,804 --> 00:06:13,220
But it also turns
out that there's

148
00:06:13,220 --> 00:06:16,220
different ways to
make a box seem

149
00:06:16,220 --> 00:06:17,510
like it has rounded corners.

150
00:06:17,510 --> 00:06:20,137
And if you want to use
any of these other ways,

151
00:06:20,137 --> 00:06:21,470
you're kind of screwed nowadays.

152
00:06:21,470 --> 00:06:22,670
Because what do you do?

153
00:06:22,670 --> 00:06:25,610
So for example, there is a
so-called squircle, which

154
00:06:25,610 --> 00:06:27,320
mathematically
speaking, is closer

155
00:06:27,320 --> 00:06:28,970
to a circle than a square.

156
00:06:28,970 --> 00:06:31,710
And it doesn't change
curvature abruptly at all.

157
00:06:31,710 --> 00:06:33,710
So it has a kind of
different aesthetic look,

158
00:06:33,710 --> 00:06:35,900
which could be kind of nice.

159
00:06:35,900 --> 00:06:39,056
So if you wanted to have
this thing on the web today,

160
00:06:39,056 --> 00:06:39,680
what do you do?

161
00:06:39,680 --> 00:06:42,060
You can maybe do an
SVG background image,

162
00:06:42,060 --> 00:06:43,670
which is not really a border.

163
00:06:43,670 --> 00:06:48,650
You could maybe use a
canvas or a 9-slice image--

164
00:06:48,650 --> 00:06:49,310
I don't know.

165
00:06:49,310 --> 00:06:50,960
But with Houdini,
you can actually

166
00:06:50,960 --> 00:06:54,380
teach CSS how to draw
the exact look that you

167
00:06:54,380 --> 00:06:56,280
want to have on your page.

168
00:06:56,280 --> 00:06:57,630
So how does this work?

169
00:06:57,630 --> 00:07:00,170
Step one with all
worklets is that you

170
00:07:00,170 --> 00:07:03,860
have to load a JavaScript
file into the worklet

171
00:07:03,860 --> 00:07:05,640
that the browser gives to you.

172
00:07:05,640 --> 00:07:07,809
So in this case, we
have the CSS namespace,

173
00:07:07,809 --> 00:07:10,100
and all the worklets that
Houdini brings to the browser

174
00:07:10,100 --> 00:07:13,009
are going to be in this CSS
namespace sooner or later.

175
00:07:13,009 --> 00:07:14,800
So in this case, it's
called Paint Worklet.

176
00:07:14,800 --> 00:07:16,790
And every worklet
has an addModule call

177
00:07:16,790 --> 00:07:18,290
with which you can
load a JavaScript

178
00:07:18,290 --> 00:07:19,970
file into that worklet.

179
00:07:19,970 --> 00:07:23,260
Let's take a look
inside this file.

180
00:07:23,260 --> 00:07:25,960
In that file, we
want to teach CSS

181
00:07:25,960 --> 00:07:28,450
how to paint something
new with JavaScript.

182
00:07:28,450 --> 00:07:30,080
But first, it needs a name.

183
00:07:30,080 --> 00:07:33,760
So there is a registerPaint
function, and it takes a class.

184
00:07:33,760 --> 00:07:35,800
And now, we want to
basically associate

185
00:07:35,800 --> 00:07:37,120
a name with that class.

186
00:07:37,120 --> 00:07:38,500
And every paint class--

187
00:07:38,500 --> 00:07:40,420
in this case, I'm
using my-paint--

188
00:07:40,420 --> 00:07:43,000
we need to define a paint call.

189
00:07:43,000 --> 00:07:45,040
And this paint call
gets a context,

190
00:07:45,040 --> 00:07:47,710
which is almost identical
to the canvas contact

191
00:07:47,710 --> 00:07:49,480
that you're hopefully
familiar with;

192
00:07:49,480 --> 00:07:53,170
a geometry object, which tells
you how much width and height

193
00:07:53,170 --> 00:07:55,409
the element has that
you're supposed to paint;

194
00:07:55,409 --> 00:07:56,950
and a properties
object, which allows

195
00:07:56,950 --> 00:07:58,760
you to read the
styles of the object

196
00:07:58,760 --> 00:08:00,880
that you are painting-- so like,
background color, text color,

197
00:08:00,880 --> 00:08:01,450
font size.

198
00:08:01,450 --> 00:08:04,392
All these things are in
there for you to read.

199
00:08:04,392 --> 00:08:06,100
And now, what I'm
doing here is basically

200
00:08:06,100 --> 00:08:07,960
I'm setting my fill
style to hotpink.

201
00:08:07,960 --> 00:08:09,850
And just draw the
biggest possible circle

202
00:08:09,850 --> 00:08:11,290
in the middle of the element--

203
00:08:11,290 --> 00:08:13,870
not very useful, but in the
way useful for me to show you

204
00:08:13,870 --> 00:08:15,790
what is actually going on.

205
00:08:15,790 --> 00:08:19,150
So now that we have defined
how to draw this appearance,

206
00:08:19,150 --> 00:08:20,980
how do we tell the
browser to actually use

207
00:08:20,980 --> 00:08:22,480
this new appearance?

208
00:08:22,480 --> 00:08:23,650
So we do that in CSS.

209
00:08:23,650 --> 00:08:25,540
So in this case, I'm
just adding a new style.

210
00:08:25,540 --> 00:08:27,490
And you can use paint
worklets everywhere

211
00:08:27,490 --> 00:08:29,390
that CSS expects an image.

212
00:08:29,390 --> 00:08:32,320
So in this case, I'm setting the
background image not to a URL

213
00:08:32,320 --> 00:08:34,970
but to a paint and
use the name that I

214
00:08:34,970 --> 00:08:36,220
used in registerPaint in here.

215
00:08:36,220 --> 00:08:39,760
So here, I use paint(my-paint).

216
00:08:39,760 --> 00:08:41,940
And this is actually--

217
00:08:41,940 --> 00:08:45,110
if it works?

218
00:08:45,110 --> 00:08:47,850
No?

219
00:08:47,850 --> 00:08:51,077
This is not good.

220
00:08:51,077 --> 00:08:52,410
Told you, prepare for more bugs.

221
00:08:52,410 --> 00:08:55,730


222
00:08:55,730 --> 00:08:58,320
No, the entire laptop froze.

223
00:08:58,320 --> 00:08:59,131
[LAUGHTER]

224
00:08:59,131 --> 00:08:59,630
No!

225
00:08:59,630 --> 00:09:04,220


226
00:09:04,220 --> 00:09:06,120
OK, maybe it's
coming back to life.

227
00:09:06,120 --> 00:09:08,162
I'm going to try something.

228
00:09:08,162 --> 00:09:11,640
[LAUGHTER]

229
00:09:11,640 --> 00:09:14,260
I achieved something today.

230
00:09:14,260 --> 00:09:18,240
All right, as I was
saying, we load the file.

231
00:09:18,240 --> 00:09:19,200
We had that.

232
00:09:19,200 --> 00:09:20,280
We had this one.

233
00:09:20,280 --> 00:09:22,390
We draw a circle in
the middle, and I

234
00:09:22,390 --> 00:09:24,390
want to do the big reveal
where we use the paint

235
00:09:24,390 --> 00:09:25,765
function for the
background image

236
00:09:25,765 --> 00:09:28,380
instead of just a
normal SVG image.

237
00:09:28,380 --> 00:09:30,764
I'm going to press the button.

238
00:09:30,764 --> 00:09:35,300
[APPLAUSE]

239
00:09:35,300 --> 00:09:37,100
We have a pink circle.

240
00:09:37,100 --> 00:09:38,090
I'm so happy.

241
00:09:38,090 --> 00:09:39,815
By the way, everyone,
thank you so much

242
00:09:39,815 --> 00:09:42,065
for the kind messages on
Twitter and your support here

243
00:09:42,065 --> 00:09:42,440
in the room.

244
00:09:42,440 --> 00:09:43,940
It could have been
so much worse.

245
00:09:43,940 --> 00:09:46,532
Thank you very much.

246
00:09:46,532 --> 00:09:48,530
All right, what I'm
doing here is, as I said,

247
00:09:48,530 --> 00:09:50,460
I set the background
image on a text area.

248
00:09:50,460 --> 00:09:53,030
So this is a text area where
I'm animating width and height.

249
00:09:53,030 --> 00:09:54,196
Don't do this at home, kids.

250
00:09:54,196 --> 00:09:55,970
Never animate width and height.

251
00:09:55,970 --> 00:10:00,060
But you can see the circle
is pink and in the middle.

252
00:10:00,060 --> 00:10:02,700
So you might be asking, what
is the advantage of using

253
00:10:02,700 --> 00:10:05,750
Houdini's Paint API--
what this talk is about--

254
00:10:05,750 --> 00:10:06,875
over using a normal canvas?

255
00:10:06,875 --> 00:10:09,000
So there's a couple of
things I want to talk about.

256
00:10:09,000 --> 00:10:11,060
The first one is
auto-repaint, meaning

257
00:10:11,060 --> 00:10:13,250
that the browser can
figure out when it actually

258
00:10:13,250 --> 00:10:16,154
needs to run your code to do
these painting operations.

259
00:10:16,154 --> 00:10:18,320
I'm going to talk a bit
about this more a little bit

260
00:10:18,320 --> 00:10:20,180
later in the talk.

261
00:10:20,180 --> 00:10:21,230
It is auto-sized.

262
00:10:21,230 --> 00:10:23,240
If you've ever worked
with the HTML canvas,

263
00:10:23,240 --> 00:10:26,240
you know that the number
of pixels on an HTML canvas

264
00:10:26,240 --> 00:10:28,880
is completely independent
from the number of pixels

265
00:10:28,880 --> 00:10:30,950
a canvas has on
the screen, which

266
00:10:30,950 --> 00:10:32,201
is super painful to work with.

267
00:10:32,201 --> 00:10:33,908
And in this case, you
don't have to worry

268
00:10:33,908 --> 00:10:35,540
about it because
it is automatically

269
00:10:35,540 --> 00:10:38,060
set to the correct size.

270
00:10:38,060 --> 00:10:39,800
It is off main thread,
meaning the code

271
00:10:39,800 --> 00:10:42,140
that you write to do the
paint operation doesn't

272
00:10:42,140 --> 00:10:44,120
run on the main thread.

273
00:10:44,120 --> 00:10:45,170
And that's a lie.

274
00:10:45,170 --> 00:10:47,450
Currently in Chrome, we do
run it on the main thread.

275
00:10:47,450 --> 00:10:50,310
But as I said, the
worklets can be migrated.

276
00:10:50,310 --> 00:10:52,460
So the second we have the
infrastructure in place

277
00:10:52,460 --> 00:10:54,530
to run this kind of
code somewhere else,

278
00:10:54,530 --> 00:10:55,830
it will just happen.

279
00:10:55,830 --> 00:10:59,630
And that means you don't use
any of your main thread budget

280
00:10:59,630 --> 00:11:03,320
making sure your page
is buttery smooth.

281
00:11:03,320 --> 00:11:06,500
No DOM overhead-- and this one
is actually very underrated.

282
00:11:06,500 --> 00:11:08,780
Often, I see effects
on the web that

283
00:11:08,780 --> 00:11:12,230
use a couple of DOM elements
or any kind of assembly

284
00:11:12,230 --> 00:11:15,200
of different styles to achieve
a certain visual effect.

285
00:11:15,200 --> 00:11:17,590
With this, you're just
using a virtual canvas,

286
00:11:17,590 --> 00:11:21,110
so not even one DOM element
to achieve this effect.

287
00:11:21,110 --> 00:11:23,510
And that can really add
up on low-end phones.

288
00:11:23,510 --> 00:11:25,430
So for example,
this is one of the--

289
00:11:25,430 --> 00:11:26,607
no.

290
00:11:26,607 --> 00:11:29,810
[LAUGHTER]

291
00:11:29,810 --> 00:11:32,300
No!

292
00:11:32,300 --> 00:11:33,350
Wait.

293
00:11:33,350 --> 00:11:37,620
For me, this just means I'm
going to skip that slide.

294
00:11:37,620 --> 00:11:42,220
So what I'm going to do is I'm
going to go out of fullscreen,

295
00:11:42,220 --> 00:11:46,320
and moving this to
a different slide,

296
00:11:46,320 --> 00:11:49,980
going back into fullscreen.

297
00:11:49,980 --> 00:11:54,960
And we're going
to go to this one.

298
00:11:54,960 --> 00:11:56,180
All right.

299
00:11:56,180 --> 00:11:59,575
[LAUGHTER]

300
00:11:59,575 --> 00:12:06,860
[APPLAUSE]

301
00:12:06,860 --> 00:12:08,330
Wow.

302
00:12:08,330 --> 00:12:15,350
All right, my point that I
was trying to make was that we

303
00:12:15,350 --> 00:12:18,290
found that on low-end devices,
implementing these kind

304
00:12:18,290 --> 00:12:18,860
of effects--

305
00:12:18,860 --> 00:12:21,650
like this wonderful effect
that [? Una ?] implemented--

306
00:12:21,650 --> 00:12:24,920
is actually more efficient
in the paint worklet

307
00:12:24,920 --> 00:12:27,251
than using a million
DOM elements.

308
00:12:27,251 --> 00:12:29,750
So that's why this is actually
a performance [? formative ?]

309
00:12:29,750 --> 00:12:31,500
to make your app
run buttery smooth

310
00:12:31,500 --> 00:12:33,200
even on the low-end devices.

311
00:12:33,200 --> 00:12:35,116
So this is another effect
that [? Una ?] wrote

312
00:12:35,116 --> 00:12:36,650
that I think is really nice.

313
00:12:36,650 --> 00:12:39,500
And this is kind
of a nice example

314
00:12:39,500 --> 00:12:43,580
to show how the browser can
decide when to paint and when

315
00:12:43,580 --> 00:12:44,200
not to paint.

316
00:12:44,200 --> 00:12:47,750
So in the paint class, you
can declare your dependencies.

317
00:12:47,750 --> 00:12:51,500
You can say these are the CSS
properties that I rely on.

318
00:12:51,500 --> 00:12:53,180
And so the browser
knows only when

319
00:12:53,180 --> 00:12:56,460
any of these properties change
will the code have to run.

320
00:12:56,460 --> 00:12:58,050
Otherwise, it won't.

321
00:12:58,050 --> 00:13:00,560
And so, in this case, you have
a couple of custom properties

322
00:13:00,560 --> 00:13:03,710
saying, I want to have this
number of stars and this hue

323
00:13:03,710 --> 00:13:06,590
and this different
sizes kind of thing.

324
00:13:06,590 --> 00:13:09,410
And then in CSS, I just do a
keyframe animation on the hue,

325
00:13:09,410 --> 00:13:11,480
and you end up with this effect.

326
00:13:11,480 --> 00:13:14,420
And it's actually efficient in
the sense it doesn't run just

327
00:13:14,420 --> 00:13:16,400
[INAUDIBLE] every frame
but only repaints when

328
00:13:16,400 --> 00:13:18,957
the animation actually tells
you that it's necessary.

329
00:13:18,957 --> 00:13:21,700


330
00:13:21,700 --> 00:13:23,790
This is another
effect, a simple clock,

331
00:13:23,790 --> 00:13:27,661
that many people might write
with SVG or with a canvas.

332
00:13:27,661 --> 00:13:29,910
Some people would, again,
probably bend over backwards

333
00:13:29,910 --> 00:13:32,850
and try to make this happen with
a DOM and just a couple of DOM

334
00:13:32,850 --> 00:13:33,580
elements.

335
00:13:33,580 --> 00:13:36,038
But if you look closely, you
can see that the hand actually

336
00:13:36,038 --> 00:13:38,580
has a trail, and that
suddenly makes it a lot harder

337
00:13:38,580 --> 00:13:40,350
to do with SVG or with the DOM.

338
00:13:40,350 --> 00:13:42,780
And maybe canvas would
be more appropriate.

339
00:13:42,780 --> 00:13:45,540
The nice thing here is that you
can have this module, a clock

340
00:13:45,540 --> 00:13:48,270
CSS Houdini module,
and configure it

341
00:13:48,270 --> 00:13:50,350
with just a couple
of custom properties.

342
00:13:50,350 --> 00:13:52,800
So you can animate the
background color or the color

343
00:13:52,800 --> 00:13:55,290
of the hands, the
thickness of the hands,

344
00:13:55,290 --> 00:13:58,170
the thickness of the circle
at the end, or the length.

345
00:13:58,170 --> 00:14:01,242
You can show or not show the
individual stops on the clock.

346
00:14:01,242 --> 00:14:02,950
You could do all of
these things at once,

347
00:14:02,950 --> 00:14:05,480
but it gets really
stressful to look at.

348
00:14:05,480 --> 00:14:07,230
So I wouldn't do that.

349
00:14:07,230 --> 00:14:08,190
But it's just a clock.

350
00:14:08,190 --> 00:14:11,350
And once again, this trail
is just a CSS transition.

351
00:14:11,350 --> 00:14:14,130
So the browser knows, while
the transition is going on,

352
00:14:14,130 --> 00:14:16,140
I need to repaint
this every frame.

353
00:14:16,140 --> 00:14:18,732
But the second the trail is
done, it stops repainting.

354
00:14:18,732 --> 00:14:20,190
It's a really easy
performance win.

355
00:14:20,190 --> 00:14:23,190


356
00:14:23,190 --> 00:14:26,940
So far, we've been using CSS
Paint for background images.

357
00:14:26,940 --> 00:14:28,920
And we have gotten
pretty far I think,

358
00:14:28,920 --> 00:14:32,040
if you still remember what I was
talking about a couple of hours

359
00:14:32,040 --> 00:14:33,820
ago it feels like.

360
00:14:33,820 --> 00:14:36,589
But you can use it anywhere
where CSS expects an image.

361
00:14:36,589 --> 00:14:38,130
So for example, you
could also use it

362
00:14:38,130 --> 00:14:40,272
for a mask image
or a border image.

363
00:14:40,272 --> 00:14:41,730
So in the land of
border image, you

364
00:14:41,730 --> 00:14:46,050
could make this kind of organic
look, where the border looks

365
00:14:46,050 --> 00:14:46,944
kind of hand-drawn.

366
00:14:46,944 --> 00:14:48,360
And if you want
that kind of look,

367
00:14:48,360 --> 00:14:52,026
CSS Paint makes it really
easy to achieve that effect.

368
00:14:52,026 --> 00:14:53,400
This is probably
a very important

369
00:14:53,400 --> 00:14:55,230
progressive enhancement.

370
00:14:55,230 --> 00:14:57,920
You can detect support for
Paint Worklet in both JavaScript

371
00:14:57,920 --> 00:14:59,340
and CSS.

372
00:14:59,340 --> 00:15:02,760
One note about the at
syntax for @supports,

373
00:15:02,760 --> 00:15:04,920
it detects support
for Paint Worklet,

374
00:15:04,920 --> 00:15:07,240
not for one specific
Paint Worklet.

375
00:15:07,240 --> 00:15:09,600
So even if the name-- like
in this case, something--

376
00:15:09,600 --> 00:15:11,460
doesn't actually exist
as a Paint Worklet,

377
00:15:11,460 --> 00:15:15,090
it will still get evaluated,
which is kind of handy.

378
00:15:15,090 --> 00:15:16,980
For this talk, I
want to introduce

379
00:15:16,980 --> 00:15:19,260
the 3PigStability
index, which is supposed

380
00:15:19,260 --> 00:15:23,100
to be a little notion
of how stable an API is,

381
00:15:23,100 --> 00:15:24,780
based on the story
of the three pigs

382
00:15:24,780 --> 00:15:27,070
and the wolf who tries
to blow their house down.

383
00:15:27,070 --> 00:15:29,910
So in this case, in
the CSS Paint API,

384
00:15:29,910 --> 00:15:32,530
the spec is a [INAUDIBLE]
recommendation,

385
00:15:32,530 --> 00:15:36,230
which is basically
W3C-speak for, it's stable.

386
00:15:36,230 --> 00:15:38,130
It's shipped to
stable in Chrome.

387
00:15:38,130 --> 00:15:41,170
Safari announced that they have
it in development right now.

388
00:15:41,170 --> 00:15:44,454
And with that, I will
call it brick stability.

389
00:15:44,454 --> 00:15:45,870
That at the bottom,
by the way, is

390
00:15:45,870 --> 00:15:47,132
supposed to be a brick emoji.

391
00:15:47,132 --> 00:15:48,840
But the brick emoji
just got standardized

392
00:15:48,840 --> 00:15:51,131
in June of this year, so none
of the fonts have it yet.

393
00:15:51,131 --> 00:15:55,170
But luckily, it still kind
of looks like a brick.

394
00:15:55,170 --> 00:15:57,060
If you want to know
more about this API,

395
00:15:57,060 --> 00:15:59,460
I'm going to shamelessly
self-plug the article that I

396
00:15:59,460 --> 00:16:02,210
wrote, which you can find here.

397
00:16:02,210 --> 00:16:04,950
If you have any questions,
hit me up any time.

398
00:16:04,950 --> 00:16:07,440
And with that out
the way, we finally

399
00:16:07,440 --> 00:16:09,810
have talked about the
first Houdini API.

400
00:16:09,810 --> 00:16:11,370
I'm going to go
onto the next one

401
00:16:11,370 --> 00:16:13,260
and see if the browser
will handle this.

402
00:16:13,260 --> 00:16:15,680
I just realized I--

403
00:16:15,680 --> 00:16:17,890
should I risk hiding
the URL above?

404
00:16:17,890 --> 00:16:20,970
I will do it, good.

405
00:16:20,970 --> 00:16:22,695
The next one-- compositing.

406
00:16:22,695 --> 00:16:24,450
As I said, the
compositor main job

407
00:16:24,450 --> 00:16:27,270
is to do animations with
the papers that move around.

408
00:16:27,270 --> 00:16:31,421
So as such, the animation is
called the Animation Worklet

409
00:16:31,421 --> 00:16:31,920
API.

410
00:16:31,920 --> 00:16:33,575
So let's talk about that a bit.

411
00:16:33,575 --> 00:16:35,700
If you currently think
about animations on the web,

412
00:16:35,700 --> 00:16:36,995
you have three choices.

413
00:16:36,995 --> 00:16:38,370
It's more like 2
and 1/2 choices.

414
00:16:38,370 --> 00:16:40,039
You have CSS
transitions, which allow

415
00:16:40,039 --> 00:16:42,330
you to transition a CSS
property from the current value

416
00:16:42,330 --> 00:16:43,560
to a new value.

417
00:16:43,560 --> 00:16:45,060
You have CSS
keyframe animations,

418
00:16:45,060 --> 00:16:50,190
which are a declarative timeline
API, which is more powerful

419
00:16:50,190 --> 00:16:52,170
and can do some kind of looping.

420
00:16:52,170 --> 00:16:54,090
And you have Web
Animations API, which

421
00:16:54,090 --> 00:16:56,100
is the imperative
version that allows

422
00:16:56,100 --> 00:17:00,100
you to do nested timelines
and all sorts of things.

423
00:17:00,100 --> 00:17:02,400
But the problem is that
it's really badly supported.

424
00:17:02,400 --> 00:17:03,990
It's behind a flag in Safari.

425
00:17:03,990 --> 00:17:07,109
Chrome has an implantation but
it's missing a lot of features.

426
00:17:07,109 --> 00:17:08,410
Edge doesn't have it at all.

427
00:17:08,410 --> 00:17:11,730
So it really isn't
usually a good choice.

428
00:17:11,730 --> 00:17:13,560
But even if it was,
there are often

429
00:17:13,560 --> 00:17:16,589
scenarios where what Web
Animations API offers

430
00:17:16,589 --> 00:17:18,210
is not enough.

431
00:17:18,210 --> 00:17:22,180
And this is where Animation
Worklet API would come in.

432
00:17:22,180 --> 00:17:25,950
So what you see here is a normal
Web Animations API animation.

433
00:17:25,950 --> 00:17:28,710


434
00:17:28,710 --> 00:17:31,560
Usually Web Animations API is
thought about in the .animate

435
00:17:31,560 --> 00:17:32,280
call.

436
00:17:32,280 --> 00:17:34,655
This is the same thing, just
a little bit more elaborate.

437
00:17:34,655 --> 00:17:36,030
It's also part of the API.

438
00:17:36,030 --> 00:17:38,440
And a worklet animation is
actually very, very similar.

439
00:17:38,440 --> 00:17:41,100
So for example, I would
just use a worklet animation

440
00:17:41,100 --> 00:17:42,270
instead of an animation.

441
00:17:42,270 --> 00:17:45,510
And because we are associating
this animation with a worklet,

442
00:17:45,510 --> 00:17:48,592
we need to, once again,
provide a worklet name.

443
00:17:48,592 --> 00:17:50,050
Other than that,
it stays the same.

444
00:17:50,050 --> 00:17:52,500
So we have the keyframe effect
that we target an element with,

445
00:17:52,500 --> 00:17:53,970
and we have two
keyframes that we

446
00:17:53,970 --> 00:17:57,350
want to use within two seconds.

447
00:17:57,350 --> 00:18:00,140
Then now we have an animation
worklet on this CSS namespace

448
00:18:00,140 --> 00:18:01,610
and can call addModule.

449
00:18:01,610 --> 00:18:05,915
And now, within our animation
file, we can use JavaScripts.

450
00:18:05,915 --> 00:18:07,290
We have an animate
callback where

451
00:18:07,290 --> 00:18:09,770
we get the current time and
the effect of the animation.

452
00:18:09,770 --> 00:18:12,870
And now it's our job to set
the local time of the effect

453
00:18:12,870 --> 00:18:14,862
depending on the current time.

454
00:18:14,862 --> 00:18:17,070
If we do it like this, where
we don't think about it,

455
00:18:17,070 --> 00:18:18,320
it's literally a pass through.

456
00:18:18,320 --> 00:18:21,920
And it will behave just like
a normal web animation API.

457
00:18:21,920 --> 00:18:24,110
But this is JavaScript,
so you can basically

458
00:18:24,110 --> 00:18:27,920
implement arbitrarily
complex time mappings.

459
00:18:27,920 --> 00:18:29,960
Now, what does
this actually mean?

460
00:18:29,960 --> 00:18:32,180
I'm not going to go into
all the details of this API

461
00:18:32,180 --> 00:18:34,180
but just going to give
you a little taste of it.

462
00:18:34,180 --> 00:18:35,270
So if you want to
know more, I'm going

463
00:18:35,270 --> 00:18:37,020
to shamelessly self-plug
another article I

464
00:18:37,020 --> 00:18:38,842
wrote, which you can find here.

465
00:18:38,842 --> 00:18:40,550
And again, read it,
and give me feedback.

466
00:18:40,550 --> 00:18:42,890
I would very much welcome that.

467
00:18:42,890 --> 00:18:45,020
But what do you use
Animation Worklet for?

468
00:18:45,020 --> 00:18:48,110
So for example, I think a
year ago or two years ago,

469
00:18:48,110 --> 00:18:51,799
Safari proposed the
spring timing function.

470
00:18:51,799 --> 00:18:53,090
And it's implemented in Safari.

471
00:18:53,090 --> 00:18:57,080
I don't think any other browser
has implemented it so far.

472
00:18:57,080 --> 00:18:59,070
But what do you do if
you want to use it?

473
00:18:59,070 --> 00:19:01,570
Or what do you do if you have
any other timing function that

474
00:19:01,570 --> 00:19:03,174
doesn't exist and
you want to use it?

475
00:19:03,174 --> 00:19:05,340
This is where Animation
Worklet would come in handy.

476
00:19:05,340 --> 00:19:06,881
So in this case, we
can, for example,

477
00:19:06,881 --> 00:19:08,060
write a bounce animator.

478
00:19:08,060 --> 00:19:10,393
Because if you think about
it, if you animate an element

479
00:19:10,393 --> 00:19:13,280
from A to B, you can either
just move it from A to B,

480
00:19:13,280 --> 00:19:15,790
but you could also move it from
A to B and a little bit back

481
00:19:15,790 --> 00:19:16,940
and a little less
back, and it will

482
00:19:16,940 --> 00:19:18,350
look kind of like a bounce.

483
00:19:18,350 --> 00:19:20,274
And that's exactly
what we're going to do.

484
00:19:20,274 --> 00:19:22,440
So we have a constructor
where we take some options.

485
00:19:22,440 --> 00:19:23,330
In this case,
there's going to be

486
00:19:23,330 --> 00:19:25,746
an option, for example, for
bounciness, which makes sense.

487
00:19:25,746 --> 00:19:27,255
How bouncy is it
supposed to look?

488
00:19:27,255 --> 00:19:28,796
And in the animate
call, we are going

489
00:19:28,796 --> 00:19:30,639
to use this bounce function.

490
00:19:30,639 --> 00:19:32,680
Depending on the bounciness
and the current time,

491
00:19:32,680 --> 00:19:35,221
we're going to determine where
in between these two keyframes

492
00:19:35,221 --> 00:19:37,280
we want to end up.

493
00:19:37,280 --> 00:19:39,950
So the bounce function I use,
I implemented with some really

494
00:19:39,950 --> 00:19:41,339
dodgy and handwavy physics.

495
00:19:41,339 --> 00:19:43,130
But in the end, you
can just think about it

496
00:19:43,130 --> 00:19:46,760
like implementing this kind of
graph between two keyframes.

497
00:19:46,760 --> 00:19:48,600
So if we do that,
and we run that,

498
00:19:48,600 --> 00:19:50,600
you can see that it's
now actually a bounce.

499
00:19:50,600 --> 00:19:53,510
And keep in mind that this is
literally just two keyframes,

500
00:19:53,510 --> 00:19:56,850
and we're just bending
time, so to speak.

501
00:19:56,850 --> 00:19:59,069
And this animation,
because it's a worklet,

502
00:19:59,069 --> 00:20:00,110
runs off the main thread.

503
00:20:00,110 --> 00:20:02,060
It actually runs on
the compositor thread.

504
00:20:02,060 --> 00:20:04,820
Meaning that even if the
main thread is super busy,

505
00:20:04,820 --> 00:20:07,040
it will make sure that
this animation runs exactly

506
00:20:07,040 --> 00:20:09,830
at the device's frame rate,
frame perfect, and make sure

507
00:20:09,830 --> 00:20:14,220
that your animations look
really, really smooth.

508
00:20:14,220 --> 00:20:16,780
So so far, we have done this.

509
00:20:16,780 --> 00:20:18,100
We have done animation.

510
00:20:18,100 --> 00:20:19,807
But if you look at
this, I explicitly

511
00:20:19,807 --> 00:20:21,640
wrote out document
timeline even though it's

512
00:20:21,640 --> 00:20:24,402
an optional argument.

513
00:20:24,402 --> 00:20:26,110
The point is that with
Animation Worklet,

514
00:20:26,110 --> 00:20:28,780
you could get time from
somewhere else, not just

515
00:20:28,780 --> 00:20:30,091
actual time.

516
00:20:30,091 --> 00:20:31,840
You could, for example,
think of something

517
00:20:31,840 --> 00:20:33,676
like a scroll timeline.

518
00:20:33,676 --> 00:20:35,300
Or you could even
conceive of something

519
00:20:35,300 --> 00:20:36,600
like an input timeline.

520
00:20:36,600 --> 00:20:38,100
We are talking about
input timeline,

521
00:20:38,100 --> 00:20:39,490
but I have nothing to show here.

522
00:20:39,490 --> 00:20:43,190
But I can show you
scroll timeline.

523
00:20:43,190 --> 00:20:45,730
So here, you see a
Pac-Man that I've linked

524
00:20:45,730 --> 00:20:47,600
to a scroller at the bottom.

525
00:20:47,600 --> 00:20:50,200
So what you see, I can
basically scroll the scroller

526
00:20:50,200 --> 00:20:52,900
at the bottom, and the animation
will jump to the position

527
00:20:52,900 --> 00:20:55,110
where I am within the scroller.

528
00:20:55,110 --> 00:20:56,600
And so it kind of gives this--

529
00:20:56,600 --> 00:20:58,870
this gives you an
animation scrubber.

530
00:20:58,870 --> 00:21:01,210
And this is kind of fun
but not that useful.

531
00:21:01,210 --> 00:21:04,390
But you can conceive of
more useful uses [INAUDIBLE]

532
00:21:04,390 --> 00:21:06,400
scroll-linked
effects, where I have

533
00:21:06,400 --> 00:21:07,570
three independent animation.

534
00:21:07,570 --> 00:21:09,700
The follow button, my
name, and my avatar

535
00:21:09,700 --> 00:21:11,440
are all scroll-linked
effects that

536
00:21:11,440 --> 00:21:14,020
can assume their position
within the animation

537
00:21:14,020 --> 00:21:15,850
depending on how far I scroll.

538
00:21:15,850 --> 00:21:18,370
The parallax effect would be
another very popular choice

539
00:21:18,370 --> 00:21:19,480
to use with this.

540
00:21:19,480 --> 00:21:22,030
And it's much easier to
implement than it currently

541
00:21:22,030 --> 00:21:24,280
is on the web.

542
00:21:24,280 --> 00:21:29,020
Now, in combination with CSS
Scroll Snap Points that we just

543
00:21:29,020 --> 00:21:31,884
implemented in Chrome, you can
now have a lot of synergy here,

544
00:21:31,884 --> 00:21:33,550
where you have really
smooth transitions

545
00:21:33,550 --> 00:21:35,650
between different
sections of your app.

546
00:21:35,650 --> 00:21:37,360
And you see I have
an indicator on top,

547
00:21:37,360 --> 00:21:41,050
and the images kind
of zoom into view.

548
00:21:41,050 --> 00:21:43,180
And now, for me, the
really interesting thing

549
00:21:43,180 --> 00:21:47,140
is that Animation Worklet is the
same thing as the Paint Worklet

550
00:21:47,140 --> 00:21:48,370
was for rounded corners.

551
00:21:48,370 --> 00:21:51,160
If you don't like how
Scroll Snap Points work,

552
00:21:51,160 --> 00:21:52,930
Animation Worklet
is low-level enough

553
00:21:52,930 --> 00:21:56,210
to allow you to implement
your own version.

554
00:21:56,210 --> 00:21:57,790
So it really
future-proofs the web

555
00:21:57,790 --> 00:22:02,064
for whatever people will
come up with in the future.

556
00:22:02,064 --> 00:22:03,730
Let's talk about the
3PigStability index

557
00:22:03,730 --> 00:22:06,070
for this API, which--

558
00:22:06,070 --> 00:22:09,010
we have gone through many,
many iterations on Animation

559
00:22:09,010 --> 00:22:11,620
Worklet, but always in
collaboration with Apple,

560
00:22:11,620 --> 00:22:13,660
with Microsoft,
and with Mozilla.

561
00:22:13,660 --> 00:22:16,510
And we are now at a point we
feel fairly confident that all

562
00:22:16,510 --> 00:22:19,510
the browsers are at least
on-board on a conceptual level

563
00:22:19,510 --> 00:22:20,650
with what we come up with.

564
00:22:20,650 --> 00:22:24,400
So all in all, I would
give this a wood stability.

565
00:22:24,400 --> 00:22:26,450
As I said, we feel pretty
confident about it.

566
00:22:26,450 --> 00:22:29,890
But now it's really time for us
to see what you feel about it.

567
00:22:29,890 --> 00:22:31,150
So it is in Canary.

568
00:22:31,150 --> 00:22:32,690
You can play with it now.

569
00:22:32,690 --> 00:22:35,440
And we are going to an
origin trial in Chrome 71.

570
00:22:35,440 --> 00:22:37,210
So if you want to test
out in production--

571
00:22:37,210 --> 00:22:38,800
and we would love it if you do--

572
00:22:38,800 --> 00:22:40,470
please sign up here.

573
00:22:40,470 --> 00:22:42,720
As I said, the article should
give you all the insight

574
00:22:42,720 --> 00:22:43,820
that you need to get started.

575
00:22:43,820 --> 00:22:44,950
And if not, please contact me.

576
00:22:44,950 --> 00:22:46,491
I'm very eager to
help out so that we

577
00:22:46,491 --> 00:22:50,270
can get some real data on the
benefits of Animation Worklet.

578
00:22:50,270 --> 00:22:53,110
I have-- I don't know how much
time I have left at this point.

579
00:22:53,110 --> 00:22:54,280
I'm just going to go for it.

580
00:22:54,280 --> 00:22:57,280
Because I can talk a little
bit about Layout API.

581
00:22:57,280 --> 00:23:00,460
So the Layout API,
I'm going to start

582
00:23:00,460 --> 00:23:03,400
with the 3PigStability index
because it's complete straw.

583
00:23:03,400 --> 00:23:06,520
We literally refactored this API
two weeks ago at [? TPACK. ?]

584
00:23:06,520 --> 00:23:10,844
So there is a half-finished
implementation in Canary,

585
00:23:10,844 --> 00:23:12,010
and you should play with it.

586
00:23:12,010 --> 00:23:15,514
But don't expect the code
to still run next week.

587
00:23:15,514 --> 00:23:17,680
But there is so much
potential in this [INAUDIBLE]..

588
00:23:17,680 --> 00:23:20,560
I really want to give you
a little insight into this.

589
00:23:20,560 --> 00:23:23,650
So with the custom layout
API or the Layout Worklet,

590
00:23:23,650 --> 00:23:27,349
you can basically define
your own display values.

591
00:23:27,349 --> 00:23:29,890
So I'm just going to have a main
element and a couple of divs

592
00:23:29,890 --> 00:23:30,889
in there, and that's it.

593
00:23:30,889 --> 00:23:34,912
Everything-- all the other magic
will happen in the worklet.

594
00:23:34,912 --> 00:23:37,120
So now we have a layout
worklet on the CSS namespace.

595
00:23:37,120 --> 00:23:38,800
I'm going to add the module.

596
00:23:38,800 --> 00:23:40,960
And in there, we have
a layout callback.

597
00:23:40,960 --> 00:23:43,620
I'm not going to explain all
the parameters because A,

598
00:23:43,620 --> 00:23:45,200
I don't understand them all.

599
00:23:45,200 --> 00:23:48,329
And B, layout is pretty complex.

600
00:23:48,329 --> 00:23:49,870
But I'm going to
keep this one simple

601
00:23:49,870 --> 00:23:50,960
so we can get a feel for it.

602
00:23:50,960 --> 00:23:52,600
So what I'm going to do is
I'm just going to loop over

603
00:23:52,600 --> 00:23:54,700
all the children,
all my child nodes

604
00:23:54,700 --> 00:23:58,810
that are on my custom
layout element.

605
00:23:58,810 --> 00:24:02,140
I'm going to lay them out in
empty space, basically asking,

606
00:24:02,140 --> 00:24:05,152
how big would you be if
you had no constraints?

607
00:24:05,152 --> 00:24:07,360
And then I'm just going to
give them a random offset,

608
00:24:07,360 --> 00:24:09,610
basically giving them
a random position

609
00:24:09,610 --> 00:24:11,877
within the rectangle
that I occupy.

610
00:24:11,877 --> 00:24:13,960
And then I return this
list to the browser saying,

611
00:24:13,960 --> 00:24:15,050
I did my layout.

612
00:24:15,050 --> 00:24:17,037
Now, please go
forth and paint me.

613
00:24:17,037 --> 00:24:18,870
And that's exactly what
the browser will do.

614
00:24:18,870 --> 00:24:21,400
So if you look at this, you
can see a couple of rectangles.

615
00:24:21,400 --> 00:24:24,820
And every couple seconds,
I add or remove a rectangle

616
00:24:24,820 --> 00:24:26,260
to force a relayout.

617
00:24:26,260 --> 00:24:28,220
And they get a truly
random position,

618
00:24:28,220 --> 00:24:30,070
which is also truly useless.

619
00:24:30,070 --> 00:24:33,040
But you can see that
this is actual the layout

620
00:24:33,040 --> 00:24:33,930
phase of the browser.

621
00:24:33,930 --> 00:24:35,260
This runs during
the layout phase

622
00:24:35,260 --> 00:24:36,676
of the browser,
something that was

623
00:24:36,676 --> 00:24:39,087
completely closed-off
to developers so far.

624
00:24:39,087 --> 00:24:41,170
And to give a little bit
more of a useful example,

625
00:24:41,170 --> 00:24:43,390
I also implemented
a masonry layout.

626
00:24:43,390 --> 00:24:45,190
So here, I'm just
loading random images

627
00:24:45,190 --> 00:24:47,860
from Unsplash with
different aspect ratios.

628
00:24:47,860 --> 00:24:51,010
And the masonry
algorithm, if you will,

629
00:24:51,010 --> 00:24:53,560
takes care of assembling
these in three columns.

630
00:24:53,560 --> 00:24:55,840
And the number of
columns is, once again,

631
00:24:55,840 --> 00:24:58,512
just a custom properties,
which I can increase.

632
00:24:58,512 --> 00:25:00,220
And it will kind of
scale up and give you

633
00:25:00,220 --> 00:25:04,510
this really nice masonry look,
which so far, you would always

634
00:25:04,510 --> 00:25:07,990
have to do with position
absolute magic and main thread

635
00:25:07,990 --> 00:25:08,650
JavaScript.

636
00:25:08,650 --> 00:25:10,466
And this is just
actual layout, which

637
00:25:10,466 --> 00:25:11,590
I think is really exciting.

638
00:25:11,590 --> 00:25:14,700


639
00:25:14,700 --> 00:25:16,110
If you're into the code--

640
00:25:16,110 --> 00:25:18,900
because I don't have an
article for Layout Worklet yet,

641
00:25:18,900 --> 00:25:21,675
mostly because by the time I
would be done with an article,

642
00:25:21,675 --> 00:25:23,440
it would be out of date again--

643
00:25:23,440 --> 00:25:26,220
please go to this
repository that I maintain,

644
00:25:26,220 --> 00:25:29,350
where I have samples for all the
worklets I talked about today.

645
00:25:29,350 --> 00:25:31,620
And you can fork them and
play around with them.

646
00:25:31,620 --> 00:25:34,440
Or I would be so happy if
you contributed to them.

647
00:25:34,440 --> 00:25:36,890
I kind of want to build a
collection of off the shelf

648
00:25:36,890 --> 00:25:38,910
Houdini elements
with popular effects,

649
00:25:38,910 --> 00:25:40,860
which I think would
be really useful.

650
00:25:40,860 --> 00:25:44,160
If you want to keep up with
the development of Houdini,

651
00:25:44,160 --> 00:25:47,220
I made
ishoudinireadyyet.com, where

652
00:25:47,220 --> 00:25:50,370
you can see all the
browsers, which Houdini

653
00:25:50,370 --> 00:25:53,010
APIs they support,
which ones are

654
00:25:53,010 --> 00:25:56,420
in development, which
ones they at least want

655
00:25:56,420 --> 00:25:58,200
to implement in time.

656
00:25:58,200 --> 00:26:02,100
There is links to the articles,
to demos, to the specs.

657
00:26:02,100 --> 00:26:05,070
Hopefully, I can make
this the one-stop shop

658
00:26:05,070 --> 00:26:07,260
that you need to
keep up with Houdini.

659
00:26:07,260 --> 00:26:12,090
And I can't believe that I
made it to my last slide.

660
00:26:12,090 --> 00:26:14,490
[APPLAUSE]

661
00:26:14,490 --> 00:26:19,290


662
00:26:19,290 --> 00:26:23,240
[MUSIC PLAYING]

663
00:26:23,240 --> 00:26:29,799