1
00:00:00,000 --> 00:00:03,325
[MUSIC PLAYING]

2
00:00:03,325 --> 00:00:05,700


3
00:00:05,700 --> 00:00:08,610
PAUL LEWIS: So I was on the
way to the office this morning,

4
00:00:08,610 --> 00:00:11,760
and I realized it is very
much like web dev, rush hour.

5
00:00:11,760 --> 00:00:12,360
SURMA: OK.

6
00:00:12,360 --> 00:00:13,860
PAUL LEWIS: Rush hour
is like all the traffic.

7
00:00:13,860 --> 00:00:16,379
Everyone is trying to get to
the office at 9:00 AM, right?

8
00:00:16,379 --> 00:00:18,635
So all these people are in
their cars, and on trains,

9
00:00:18,635 --> 00:00:19,260
and everything.

10
00:00:19,260 --> 00:00:20,718
Everyone's just
rushing, and nobody

11
00:00:20,718 --> 00:00:22,540
can move for anybody else.

12
00:00:22,540 --> 00:00:25,929
And I think that's
like web because--

13
00:00:25,929 --> 00:00:27,720
SURMA: Yes, please
explain this a bit more?

14
00:00:27,720 --> 00:00:28,260
PAUL LEWIS: Yes.

15
00:00:28,260 --> 00:00:29,700
Because you've got
the main thread.

16
00:00:29,700 --> 00:00:30,750
You've got this one thread.

17
00:00:30,750 --> 00:00:32,833
And on that main thread,
you've got all these work

18
00:00:32,833 --> 00:00:35,490
styles, JavaScript,
layout, paint, composite,

19
00:00:35,490 --> 00:00:36,300
your framework.

20
00:00:36,300 --> 00:00:38,430
Everything is running,
and everybody's

21
00:00:38,430 --> 00:00:41,064
competing for this one resource,
the road or, in this case,

22
00:00:41,064 --> 00:00:41,730
the main thread.

23
00:00:41,730 --> 00:00:45,450
SURMA: Oh, so Mr. Framework
has a car, Mr. Paint has a car,

24
00:00:45,450 --> 00:00:46,802
Mr. Business Logic has a car.

25
00:00:46,802 --> 00:00:48,510
And they all just want
to go on the road,

26
00:00:48,510 --> 00:00:49,470
but it's already full.

27
00:00:49,470 --> 00:00:50,040
PAUL LEWIS: Exactly.

28
00:00:50,040 --> 00:00:51,660
And everybody's in
the same boat where

29
00:00:51,660 --> 00:00:55,430
everybody gets the angry tweets
and sees all this performance

30
00:00:55,430 --> 00:00:55,930
advice.

31
00:00:55,930 --> 00:00:58,346
And nobody knows what to do
because all this stuff is just

32
00:00:58,346 --> 00:00:59,910
constrained into
this one place--

33
00:00:59,910 --> 00:01:00,919
rush hour.

34
00:01:00,919 --> 00:01:02,460
As we described in
that video, that's

35
00:01:02,460 --> 00:01:07,470
kind of how we feel when we
look at the web at large.

36
00:01:07,470 --> 00:01:11,190
We look at it, and we go,
all this code should be here.

37
00:01:11,190 --> 00:01:14,010
But it just feels like the
traffic is the problem.

38
00:01:14,010 --> 00:01:17,790
There's just too much going
through the main thread.

39
00:01:17,790 --> 00:01:21,210
SURMA: And traditionally,
the main thread is full.

40
00:01:21,210 --> 00:01:22,650
It's overworked and underpaid.

41
00:01:22,650 --> 00:01:24,390
You would say, cool,
I'd use threads.

42
00:01:24,390 --> 00:01:25,770
On any other platform,
you could do that.

43
00:01:25,770 --> 00:01:27,780
Just spin up a thread, put
some code there, run it there,

44
00:01:27,780 --> 00:01:28,446
call a function.

45
00:01:28,446 --> 00:01:28,950
Hooray!

46
00:01:28,950 --> 00:01:29,960
Everyone's happy.

47
00:01:29,960 --> 00:01:32,730
But it turns out JavaScript
and the web is special.

48
00:01:32,730 --> 00:01:35,985
And it is inherently single
threaded, so you can't do that.

49
00:01:35,985 --> 00:01:37,110
PAUL LEWIS: Right, exactly.

50
00:01:37,110 --> 00:01:40,940
Every thread is kind of its
own little universe, isn't it?

51
00:01:40,940 --> 00:01:43,142
Like we heard, it's
a [INAUDIBLE],, right?

52
00:01:43,142 --> 00:01:45,600
And so you can't just go, just
call this on another thread,

53
00:01:45,600 --> 00:01:48,760
but you've got some shared
stuff that you can work on.

54
00:01:48,760 --> 00:01:50,706
So that's a challenge.

55
00:01:50,706 --> 00:01:52,080
And then it gets
more interesting

56
00:01:52,080 --> 00:01:54,260
because say, for example,
you're trying to build--

57
00:01:54,260 --> 00:01:57,200
I don't know-- a chess game
just for argument's sake.

58
00:01:57,200 --> 00:01:58,530
And you've got a chess engine.

59
00:01:58,530 --> 00:02:00,060
And the chess engine--

60
00:02:00,060 --> 00:02:01,570
it takes a few
hundred milliseconds

61
00:02:01,570 --> 00:02:03,840
to calculate a move.

62
00:02:03,840 --> 00:02:05,707
SURMA: It gets
exponentially difficult.

63
00:02:05,707 --> 00:02:07,290
PAUL LEWIS: And you
build it with DOM.

64
00:02:07,290 --> 00:02:10,889
And then some bright spark goes,
do you know what we should do?

65
00:02:10,889 --> 00:02:12,150
3D.

66
00:02:12,150 --> 00:02:14,377
And you're, like,
[LAUGHS] I was already

67
00:02:14,377 --> 00:02:15,710
behind on my [INAUDIBLE] budget.

68
00:02:15,710 --> 00:02:17,959
If you could just not do the
60-frames-a-second thing,

69
00:02:17,959 --> 00:02:18,790
that'll be great.

70
00:02:18,790 --> 00:02:22,510
And some even brighter
spark says, how about VR?

71
00:02:22,510 --> 00:02:23,010
SURMA: Yeah.

72
00:02:23,010 --> 00:02:24,469
I want to stand on
the chess board.

73
00:02:24,469 --> 00:02:26,801
PAUL LEWIS: Yeah, I want to
be, like, right in the game.

74
00:02:26,801 --> 00:02:29,295
And you're thinking, um,
there was already rush hour.

75
00:02:29,295 --> 00:02:31,170
SURMA: Turns out frame
rate-- quite important

76
00:02:31,170 --> 00:02:32,040
when it comes to VR.

77
00:02:32,040 --> 00:02:33,706
PAUL LEWIS: Yeah, and
it could be voice.

78
00:02:33,706 --> 00:02:35,640
There are so many
things that it could be.

79
00:02:35,640 --> 00:02:38,000
SURMA: So this becomes
increasingly unlikely for you

80
00:02:38,000 --> 00:02:39,630
to be able to do this
successfully on the web

81
00:02:39,630 --> 00:02:40,170
currently.

82
00:02:40,170 --> 00:02:41,020
PAUL LEWIS: Right.

83
00:02:41,020 --> 00:02:45,180
And so this is the question that
we have been thinking through

84
00:02:45,180 --> 00:02:46,830
for the last little while.

85
00:02:46,830 --> 00:02:50,640
Is there anything we can
do, anything we can suggest,

86
00:02:50,640 --> 00:02:53,650
think of to help?

87
00:02:53,650 --> 00:02:54,790
SURMA: We have two birds.

88
00:02:54,790 --> 00:02:55,900
We're looking for a stone.

89
00:02:55,900 --> 00:02:56,733
PAUL LEWIS: Exactly.

90
00:02:56,733 --> 00:02:57,435
And--

91
00:02:57,435 --> 00:02:58,620
[LAUGHTER]

92
00:02:58,620 --> 00:02:59,760
SURMA: Ah, that went well.

93
00:02:59,760 --> 00:03:02,190


94
00:03:02,190 --> 00:03:02,815
PAUL LEWIS: OK.

95
00:03:02,815 --> 00:03:05,680


96
00:03:05,680 --> 00:03:08,180
Wow, I really need to think of
what I was going to say next.

97
00:03:08,180 --> 00:03:09,000
OK, this.

98
00:03:09,000 --> 00:03:10,595
SURMA: Actor model.

99
00:03:10,595 --> 00:03:12,200
So we kind of
stumbled over this.

100
00:03:12,200 --> 00:03:15,800
The actor model is, as it says
right here, about 45 years old.

101
00:03:15,800 --> 00:03:19,280
And it's been made
popular by Erlang

102
00:03:19,280 --> 00:03:21,430
and then continued
with Elixir and Pony.

103
00:03:21,430 --> 00:03:23,600
It's languages that use
the actor model to this day

104
00:03:23,600 --> 00:03:25,210
and successfully so.

105
00:03:25,210 --> 00:03:27,380
And we realized
that it's actually

106
00:03:27,380 --> 00:03:28,892
a really good fit for the web.

107
00:03:28,892 --> 00:03:29,600
PAUL LEWIS: Yeah.

108
00:03:29,600 --> 00:03:33,080
Because what it does
is it makes a feature

109
00:03:33,080 --> 00:03:35,629
of that single-threadedness
of JavaScript.

110
00:03:35,629 --> 00:03:37,670
But we like to explain--
if you've come across it

111
00:03:37,670 --> 00:03:38,470
before, great.

112
00:03:38,470 --> 00:03:40,220
If you've not come
across the actor model,

113
00:03:40,220 --> 00:03:42,094
we like to explain it
in a very specific way.

114
00:03:42,094 --> 00:03:43,500
So check this one out.

115
00:03:43,500 --> 00:03:44,930
SURMA: So when we
did Supercharge,

116
00:03:44,930 --> 00:03:46,430
you saw us on screen.

117
00:03:46,430 --> 00:03:49,610
But behind the cameras,
we had an entire crew.

118
00:03:49,610 --> 00:03:51,830
And that means we had one
person working the camera.

119
00:03:51,830 --> 00:03:54,810
We had one person worrying
about if our audio was good.

120
00:03:54,810 --> 00:03:55,970
We had a director.

121
00:03:55,970 --> 00:03:58,310
And each of these people
were solely responsible

122
00:03:58,310 --> 00:04:00,390
for that specific device.

123
00:04:00,390 --> 00:04:03,740
PAUL LEWIS: And instead of going
over and pressing one person's

124
00:04:03,740 --> 00:04:06,124
buttons or just
messing with settings,

125
00:04:06,124 --> 00:04:08,540
those people actually have to
communicate with one another

126
00:04:08,540 --> 00:04:09,373
to get the job done.

127
00:04:09,373 --> 00:04:11,310
It you like, there are
actors in the system,

128
00:04:11,310 --> 00:04:13,280
but they've got to send
messages to one another

129
00:04:13,280 --> 00:04:15,110
and communicate and
collaborate in order

130
00:04:15,110 --> 00:04:18,380
to get the final thing working.

131
00:04:18,380 --> 00:04:20,163
SURMA: So that's kind of where--

132
00:04:20,163 --> 00:04:21,579
more video, more
production value.

133
00:04:21,579 --> 00:04:22,610
It's good, right?

134
00:04:22,610 --> 00:04:25,550
So that's where we
see a mentality that

135
00:04:25,550 --> 00:04:27,000
fits the web really well.

136
00:04:27,000 --> 00:04:28,790
And you start
thinking about, where

137
00:04:28,790 --> 00:04:31,640
can you draw a line
for individual pieces

138
00:04:31,640 --> 00:04:33,690
of responsibility in your app.

139
00:04:33,690 --> 00:04:35,720
And instead of thinking
about classes and how

140
00:04:35,720 --> 00:04:37,970
you call the method
on the other class,

141
00:04:37,970 --> 00:04:39,860
you can now think
about these actors

142
00:04:39,860 --> 00:04:42,380
and how you can send the right
message to request something

143
00:04:42,380 --> 00:04:42,990
to happen.

144
00:04:42,990 --> 00:04:43,160
PAUL LEWIS: Right.

145
00:04:43,160 --> 00:04:44,820
There are these
areas of ownership.

146
00:04:44,820 --> 00:04:47,600
So let's think about, how,
at a conceptual level,

147
00:04:47,600 --> 00:04:49,699
how would you
think this through?

148
00:04:49,699 --> 00:04:51,240
What would it look
like a little bit?

149
00:04:51,240 --> 00:04:51,740
OK.

150
00:04:51,740 --> 00:04:55,630
So imagine you have
an actor, and it's job

151
00:04:55,630 --> 00:04:57,602
is to run your user interface.

152
00:04:57,602 --> 00:04:58,810
That's its area of ownership.

153
00:04:58,810 --> 00:04:59,920
That's what it does.

154
00:04:59,920 --> 00:05:02,180
That's its job and only that.

155
00:05:02,180 --> 00:05:04,420
You might also
have another actor

156
00:05:04,420 --> 00:05:07,330
whose job is to handle
state for your application

157
00:05:07,330 --> 00:05:10,990
and yet another one who
handles the storage.

158
00:05:10,990 --> 00:05:13,630
Now, imagine in your app
a typical interaction

159
00:05:13,630 --> 00:05:16,330
would be something like
favoriting an item.

160
00:05:16,330 --> 00:05:18,280
The user interface, when
the user taps on it,

161
00:05:18,280 --> 00:05:20,170
it will send a message
over to the state

162
00:05:20,170 --> 00:05:22,960
that says this was favorited.

163
00:05:22,960 --> 00:05:24,874
In turn, the actor
handling the state

164
00:05:24,874 --> 00:05:26,290
will send a message
to the storage

165
00:05:26,290 --> 00:05:29,920
to say we need to remember
that they favorited this item.

166
00:05:29,920 --> 00:05:31,630
Now we could also,
at this point,

167
00:05:31,630 --> 00:05:33,999
introduce a new actor
into this story,

168
00:05:33,999 --> 00:05:35,290
something that could broadcast.

169
00:05:35,290 --> 00:05:38,689
Because when the state changes,
typically, what we'd want to do

170
00:05:38,689 --> 00:05:40,480
is, we'd want to send
that both to the user

171
00:05:40,480 --> 00:05:44,750
interface and the storage to be
reflected in both, I suppose,

172
00:05:44,750 --> 00:05:45,250
really.

173
00:05:45,250 --> 00:05:46,147
SURMA: Yes.

174
00:05:46,147 --> 00:05:47,980
And you can kind of see
here, that it really

175
00:05:47,980 --> 00:05:50,906
is a separation of concerns.

176
00:05:50,906 --> 00:05:54,180
Ah, the click, there you go.

177
00:05:54,180 --> 00:05:56,540
[INAUDIBLE] transition--
do recommend.

178
00:05:56,540 --> 00:05:58,595
It really helps you to
think about your app

179
00:05:58,595 --> 00:06:00,470
in a different way,
helping you to figure out

180
00:06:00,470 --> 00:06:03,410
where does new code go, which
module can you switch out

181
00:06:03,410 --> 00:06:05,510
to fix a problem
that you're having?

182
00:06:05,510 --> 00:06:08,030
It's a really good way to
structure the app in this way.

183
00:06:08,030 --> 00:06:08,510
PAUL LEWIS: Yeah, absolutely.

184
00:06:08,510 --> 00:06:10,100
And we use to
separation of concerns

185
00:06:10,100 --> 00:06:12,500
when we talk about HTML,
JavaScript, and CSS,

186
00:06:12,500 --> 00:06:16,110
or when we talk about components
in a modern framework.

187
00:06:16,110 --> 00:06:19,539
So it's another version of
that same story I suppose.

188
00:06:19,539 --> 00:06:21,080
SURMA: Another
benefit that you get--

189
00:06:21,080 --> 00:06:23,480
and we have heard about this
problem a couple of times,

190
00:06:23,480 --> 00:06:24,860
I think yesterday and today--

191
00:06:24,860 --> 00:06:27,290
is that we often see
big chunks of monolithic

192
00:06:27,290 --> 00:06:28,760
JavaScript just run--

193
00:06:28,760 --> 00:06:30,650
frameworks updating the
virtual DOM, and then

194
00:06:30,650 --> 00:06:32,240
the DOM, or something like that.

195
00:06:32,240 --> 00:06:35,330
And with this pattern, you
introduce a natural breaking

196
00:06:35,330 --> 00:06:38,250
point where you give the browser
a chance to ship a frame.

197
00:06:38,250 --> 00:06:39,860
Because every time
you send a message,

198
00:06:39,860 --> 00:06:42,410
there is a point where
you say, OK, browser

199
00:06:42,410 --> 00:06:45,260
can intervene and ship a frame
if we are out of frame budget.

200
00:06:45,260 --> 00:06:46,730
PAUL LEWIS: Exactly.

201
00:06:46,730 --> 00:06:50,690
Now, a little side effect
a positive one of this

202
00:06:50,690 --> 00:06:52,254
is location independence.

203
00:06:52,254 --> 00:06:53,420
And we'll come back to this.

204
00:06:53,420 --> 00:06:54,950
This is a sort of
repeating refrain

205
00:06:54,950 --> 00:06:56,908
that we're going to get
into a little bit more.

206
00:06:56,908 --> 00:07:00,525
But think about actors as,
they're not all the same.

207
00:07:00,525 --> 00:07:01,900
They have different
requirements.

208
00:07:01,900 --> 00:07:05,270
Some actors will not need to
have access to the main thread,

209
00:07:05,270 --> 00:07:08,030
for example, because of
the kind of work they do.

210
00:07:08,030 --> 00:07:09,980
And as such, we might
be able to run them

211
00:07:09,980 --> 00:07:12,354
in different locations,
i.e., not on the main thread.

212
00:07:12,354 --> 00:07:13,770
As I say, we'll
come back to that.

213
00:07:13,770 --> 00:07:15,590
But the idea here
is maybe we just

214
00:07:15,590 --> 00:07:18,117
bought ourselves a little
capacity for rush hour.

215
00:07:18,117 --> 00:07:19,700
SURMA: Because as
long as the messages

216
00:07:19,700 --> 00:07:21,860
get delivered to
the actor, the actor

217
00:07:21,860 --> 00:07:24,390
will then do the same work
as it did before and will

218
00:07:24,390 --> 00:07:25,640
respond with the same message.

219
00:07:25,640 --> 00:07:27,950
So the entire app keeps
behaving the same way,

220
00:07:27,950 --> 00:07:29,150
no matter where it runs.

221
00:07:29,150 --> 00:07:33,060
And because of that
location independence,

222
00:07:33,060 --> 00:07:36,170
we can lower the
likelihood of long work

223
00:07:36,170 --> 00:07:38,397
impacting the main thread
and making your app janky.

224
00:07:38,397 --> 00:07:39,230
PAUL LEWIS: Exactly.

225
00:07:39,230 --> 00:07:41,630
So conceptually,
that is what it is.

226
00:07:41,630 --> 00:07:45,470
But I like seeing code.

227
00:07:45,470 --> 00:07:47,820
I think code helps.

228
00:07:47,820 --> 00:07:51,120
And so we're not
launching a product.

229
00:07:51,120 --> 00:07:54,260
We're not launching a
framework, or even a library.

230
00:07:54,260 --> 00:07:57,180
We just wanted to have a chat
with you about architectures.

231
00:07:57,180 --> 00:08:00,220
And we've been using
some actor-based stuff

232
00:08:00,220 --> 00:08:02,480
for the last little while
with our colleague Tim.

233
00:08:02,480 --> 00:08:04,070
And the three of us have
just been putting some code

234
00:08:04,070 --> 00:08:04,380
together.

235
00:08:04,380 --> 00:08:05,130
So what we're going
to do is, we're just

236
00:08:05,130 --> 00:08:07,160
going to show you a
little bit of the code

237
00:08:07,160 --> 00:08:08,090
that we've been using.

238
00:08:08,090 --> 00:08:10,762
We've been using it to
build some of our apps.

239
00:08:10,762 --> 00:08:12,387
SURMA: And we'll
share that at the end.

240
00:08:12,387 --> 00:08:13,803
You're very welcome
to try it out.

241
00:08:13,803 --> 00:08:15,930
And you're also very
welcome to write your own.

242
00:08:15,930 --> 00:08:18,200
We don't really care if we use
our version or someone else's

243
00:08:18,200 --> 00:08:18,700
version.

244
00:08:18,700 --> 00:08:20,870
It's more about the concept,
about the architecture.

245
00:08:20,870 --> 00:08:21,702
PAUL LEWIS: Absolutely.

246
00:08:21,702 --> 00:08:24,076
But with this in mind, let's
talk about a particular app,

247
00:08:24,076 --> 00:08:26,585
something like a stopwatch
app, which you would start,

248
00:08:26,585 --> 00:08:28,957
it would count up in seconds--

249
00:08:28,957 --> 00:08:30,290
pause, play, that kind of thing.

250
00:08:30,290 --> 00:08:35,740
And then you might reset
the time if you're done.

251
00:08:35,740 --> 00:08:39,570
So in our code, we have
this Actor base class.

252
00:08:39,570 --> 00:08:42,659
And that top function up there,
hookup, is the first thing

253
00:08:42,659 --> 00:08:43,659
that you'd need to know.

254
00:08:43,659 --> 00:08:46,360
And the job of hookup
is to kind of register

255
00:08:46,360 --> 00:08:48,740
an actor in the system so
that we can talk to it later,

256
00:08:48,740 --> 00:08:51,370
so we can send it
messages later on.

257
00:08:51,370 --> 00:08:53,020
Because ultimately,
we won't know where

258
00:08:53,020 --> 00:08:54,500
this actor is in the system.

259
00:08:54,500 --> 00:08:57,940
And so we just need almost
like a registry, I suppose,

260
00:08:57,940 --> 00:09:00,600
where we can say, I'm going
to tell you there's an actor,

261
00:09:00,600 --> 00:09:02,020
and it's found under this name.

262
00:09:02,020 --> 00:09:03,520
SURMA: It's basically
the equivalent

263
00:09:03,520 --> 00:09:05,320
of what you might know
from custom elements.

264
00:09:05,320 --> 00:09:06,861
There's custom
elements that. define.

265
00:09:06,861 --> 00:09:10,330
And you say, this custom element
is now known under this name.

266
00:09:10,330 --> 00:09:13,709
And this does the exact
same thing but for actors.

267
00:09:13,709 --> 00:09:16,000
PAUL LEWIS: So then we have
our two actors, a Clock one

268
00:09:16,000 --> 00:09:17,590
and a UI one.

269
00:09:17,590 --> 00:09:20,770
And then in the bootstrap,
we instantiate both our UI

270
00:09:20,770 --> 00:09:22,960
and hook it up, so
it's available under UI

271
00:09:22,960 --> 00:09:24,460
as a string name.

272
00:09:24,460 --> 00:09:28,552
And then we do the same
with the clock like so.

273
00:09:28,552 --> 00:09:31,010
So now, we can talk about how
you might implement something

274
00:09:31,010 --> 00:09:33,620
like the clock itself.

275
00:09:33,620 --> 00:09:35,900
And in our case, when you've
got something like this,

276
00:09:35,900 --> 00:09:38,600
it's almost like
a pure data actor.

277
00:09:38,600 --> 00:09:42,050
It doesn't have any
need to go near the DOM.

278
00:09:42,050 --> 00:09:43,700
It just wants to
tick, and pause,

279
00:09:43,700 --> 00:09:44,510
and all those kinds of things.

280
00:09:44,510 --> 00:09:46,176
SURMA: I mean, what
do you need, really.

281
00:09:46,176 --> 00:09:48,870
You need a set interval,
and that's pretty much it.

282
00:09:48,870 --> 00:09:49,890
PAUL LEWIS: So time out?

283
00:09:49,890 --> 00:09:50,545
SURMA: Sure.

284
00:09:50,545 --> 00:09:52,310
PAUL LEWIS: I have a thing
against set interval.

285
00:09:52,310 --> 00:09:53,062
It's a long story.

286
00:09:53,062 --> 00:09:54,770
Come find me after,
and I'll explain why.

287
00:09:54,770 --> 00:09:56,930
Anyway, imagine this then.

288
00:09:56,930 --> 00:09:59,060
We're going to model
this as a state machine.

289
00:09:59,060 --> 00:10:02,610


290
00:10:02,610 --> 00:10:03,830
We start with a paused state.

291
00:10:03,830 --> 00:10:05,940
Our clock is paused.

292
00:10:05,940 --> 00:10:09,020
We can transition
to a running state.

293
00:10:09,020 --> 00:10:11,400
Every second, we'll tick, and
we'll go to the tick state.

294
00:10:11,400 --> 00:10:13,400
And that will take us
back to the running state.

295
00:10:13,400 --> 00:10:15,920
And you can imagine being
in this tick, running, tick,

296
00:10:15,920 --> 00:10:17,704
running state like in a clock.

297
00:10:17,704 --> 00:10:18,620
SURMA: Like ping-pong.

298
00:10:18,620 --> 00:10:20,600
PAUL LEWIS: Like
a clock, Indeed.

299
00:10:20,600 --> 00:10:22,920
We could pause,
and we could reset.

300
00:10:22,920 --> 00:10:24,737
And when we reset,
we go back to that.

301
00:10:24,737 --> 00:10:26,570
SURMA: And that's a
really nice pattern here

302
00:10:26,570 --> 00:10:29,070
that plays along well with the
message passing of the actor

303
00:10:29,070 --> 00:10:29,570
model.

304
00:10:29,570 --> 00:10:31,400
Because all of these
triggers, as they

305
00:10:31,400 --> 00:10:34,250
are called, in the state machine
world could just be a message.

306
00:10:34,250 --> 00:10:37,220
You send a message to this state
machine, it's being ingested,

307
00:10:37,220 --> 00:10:38,930
and then a transition happens.

308
00:10:38,930 --> 00:10:40,534
PAUL LEWIS: Absolutely.

309
00:10:40,534 --> 00:10:42,200
SURMA: So we found,
actually, that there

310
00:10:42,200 --> 00:10:44,480
are a lot of implementations
for state machines

311
00:10:44,480 --> 00:10:46,850
out there in the wild, and
that's not very unexpected.

312
00:10:46,850 --> 00:10:48,590
And we have kind of
been using xstate,

313
00:10:48,590 --> 00:10:50,502
which is written by
David from Microsoft,

314
00:10:50,502 --> 00:10:51,710
and it's working really well.

315
00:10:51,710 --> 00:10:54,364
It allows you to declare your
state machine as a JSON object.

316
00:10:54,364 --> 00:10:56,030
So you just declare
your states and then

317
00:10:56,030 --> 00:10:57,380
what the transitions are.

318
00:10:57,380 --> 00:11:00,680
And then you just pass this
to this machine constructor,

319
00:11:00,680 --> 00:11:01,940
and you get a state machine.

320
00:11:01,940 --> 00:11:05,870
PAUL LEWIS: So our clock
extends the Actor base class,

321
00:11:05,870 --> 00:11:08,157
and what we do is we
instantiate our state Machine.

322
00:11:08,157 --> 00:11:09,740
We say, go to the
initial state, which

323
00:11:09,740 --> 00:11:12,540
happens to that paused state.

324
00:11:12,540 --> 00:11:16,350
And then later on, imagine
that we receive a message.

325
00:11:16,350 --> 00:11:18,960
And our Actor base class
has this onMessage callback,

326
00:11:18,960 --> 00:11:20,460
which is, I got a message.

327
00:11:20,460 --> 00:11:22,287
What do I do?

328
00:11:22,287 --> 00:11:24,120
In this case, we would
assume that the state

329
00:11:24,120 --> 00:11:26,250
would be changing inside
of our state machine.

330
00:11:26,250 --> 00:11:28,440
So we use the state
machine transition

331
00:11:28,440 --> 00:11:31,070
to get from wherever it was
to wherever it needs to be.

332
00:11:31,070 --> 00:11:34,554
So the message is basically
driving the clock.

333
00:11:34,554 --> 00:11:36,470
And we'll inspect what
the new state value is.

334
00:11:36,470 --> 00:11:38,340
So if we find that
our clock is running,

335
00:11:38,340 --> 00:11:42,000
we'll set a tick time
out for one second.

336
00:11:42,000 --> 00:11:44,220
If we tick, we increment
our tick count.

337
00:11:44,220 --> 00:11:47,710
And then the clock will
send itself a message.

338
00:11:47,710 --> 00:11:50,040
Now, it could call
its own functions.

339
00:11:50,040 --> 00:11:52,680
But we tend to be a little bit--

340
00:11:52,680 --> 00:11:53,857
we like it fair.

341
00:11:53,857 --> 00:11:56,190
And so what we do is we make
sure the clock sends itself

342
00:11:56,190 --> 00:11:57,773
a message like every
other actor would

343
00:11:57,773 --> 00:11:59,030
have to send it a message.

344
00:11:59,030 --> 00:12:00,180
SURMA: And you can add it
like a message queue that

345
00:12:00,180 --> 00:12:01,221
buffers all the messages.

346
00:12:01,221 --> 00:12:03,450
And the actor goes through
one message, processes,

347
00:12:03,450 --> 00:12:04,830
then it goes to
the next message.

348
00:12:04,830 --> 00:12:06,750
And so if you just
call your own function,

349
00:12:06,750 --> 00:12:08,470
it would kind of be
cutting that line.

350
00:12:08,470 --> 00:12:09,600
So if you want to
keep it fair, you

351
00:12:09,600 --> 00:12:11,520
would just queue your
app message at the end

352
00:12:11,520 --> 00:12:13,020
and wait like a good human.

353
00:12:13,020 --> 00:12:14,860
PAUL LEWIS: Exactly,
or a computer.

354
00:12:14,860 --> 00:12:16,760
SURMA: Sure.

355
00:12:16,760 --> 00:12:18,450
PAUL LEWIS: Cancel
the tick if you're

356
00:12:18,450 --> 00:12:20,310
paused if there's one pending.

357
00:12:20,310 --> 00:12:22,330
When we reset, we'll
reset the tick count.

358
00:12:22,330 --> 00:12:27,030
And again, the clock will send
itself a message to pause.

359
00:12:27,030 --> 00:12:29,670
And now, let's talk
about sending messages.

360
00:12:29,670 --> 00:12:30,580
That's next, yes.

361
00:12:30,580 --> 00:12:32,635
So the clock, is going
to have to send a state

362
00:12:32,635 --> 00:12:34,260
update to the user
interface so that it

363
00:12:34,260 --> 00:12:38,380
can reflect the time going
up and so on, and so forth.

364
00:12:38,380 --> 00:12:40,080
And this is the
opposite to the hookup.

365
00:12:40,080 --> 00:12:42,410
This is lookup,
which is also in--

366
00:12:42,410 --> 00:12:44,660
SURMA: Hookup, lookup, hookup,
lookup, hookup, lookup.

367
00:12:44,660 --> 00:12:47,310
PAUL LEWIS: I lose him for hours
at a time when he does this.

368
00:12:47,310 --> 00:12:48,550
OK, hookup and lookup.

369
00:12:48,550 --> 00:12:52,384
So we look up the UI, and
then we can send it a message.

370
00:12:52,384 --> 00:12:54,300
SURMA: And that's very
important to note here.

371
00:12:54,300 --> 00:12:56,790
The handle, this UI
variable that we have there,

372
00:12:56,790 --> 00:12:58,960
it is not the actor instance.

373
00:12:58,960 --> 00:13:02,400
You can't go in and change a
member variable of that class.

374
00:13:02,400 --> 00:13:05,544
It is just an object with a send
method and only that method.

375
00:13:05,544 --> 00:13:06,960
Because that's the
only way you're

376
00:13:06,960 --> 00:13:09,477
allowed to interact with
any of the other actors.

377
00:13:09,477 --> 00:13:10,310
PAUL LEWIS: Exactly.

378
00:13:10,310 --> 00:13:12,930
And so in this case, we're
going to send the UI a message.

379
00:13:12,930 --> 00:13:14,430
And the message is
going to say what

380
00:13:14,430 --> 00:13:18,030
the time is and whether or
not the clock is running.

381
00:13:18,030 --> 00:13:20,440
We found that TypeScript is
really helpful at this point,

382
00:13:20,440 --> 00:13:22,650
because those messages
need to be well-formed,

383
00:13:22,650 --> 00:13:23,650
and well-understood.

384
00:13:23,650 --> 00:13:25,233
And there needs to
be a data contract.

385
00:13:25,233 --> 00:13:27,330
And we've just found,
from practical experience,

386
00:13:27,330 --> 00:13:28,980
that TypeScript is a
really good way of saying,

387
00:13:28,980 --> 00:13:30,310
this object looks like this.

388
00:13:30,310 --> 00:13:31,050
This is a number.

389
00:13:31,050 --> 00:13:31,822
This is a string.

390
00:13:31,822 --> 00:13:33,780
This is another object,
and so on and so forth.

391
00:13:33,780 --> 00:13:36,970
So just take that as
what it is, really.

392
00:13:36,970 --> 00:13:37,970
SURMA: A recommendation.

393
00:13:37,970 --> 00:13:38,770
PAUL LEWIS: Yeah,
a recommendation.

394
00:13:38,770 --> 00:13:40,110
We found that useful.

395
00:13:40,110 --> 00:13:42,430
Let's talk about
the UI a little bit.

396
00:13:42,430 --> 00:13:45,401
Interestingly, you can
bring your own framework.

397
00:13:45,401 --> 00:13:45,900
SURMA: Yeah.

398
00:13:45,900 --> 00:13:48,580
In this model, we don't really
care what kind of framework

399
00:13:48,580 --> 00:13:49,080
you use.

400
00:13:49,080 --> 00:13:51,750
You can use React, you can
use Vue, you can use Lit,

401
00:13:51,750 --> 00:13:55,110
you can use Svelte-- whatever
you feel comfortable with

402
00:13:55,110 --> 00:13:57,240
or whatever makes
sense in your scenario.

403
00:13:57,240 --> 00:14:01,290
The interesting shift here is
that the UI framework is not

404
00:14:01,290 --> 00:14:03,390
your base platform, not
your entry point any more.

405
00:14:03,390 --> 00:14:05,560
The center of the universe
has kind of moved.

406
00:14:05,560 --> 00:14:06,880
PAUL LEWIS: It's that
bootstrap that we showed

407
00:14:06,880 --> 00:14:07,588
[? at the top. ?]

408
00:14:07,588 --> 00:14:09,450
SURMA: UI is just one
participant of many

409
00:14:09,450 --> 00:14:10,477
in the system of actors.

410
00:14:10,477 --> 00:14:12,810
PAUL LEWIS: And if you find
that it's not behaving well,

411
00:14:12,810 --> 00:14:14,779
for whatever reason,
you can swap it out.

412
00:14:14,779 --> 00:14:16,320
The only thing it
has to do is listen

413
00:14:16,320 --> 00:14:19,827
to messages of a particular
type, which is kind of cool.

414
00:14:19,827 --> 00:14:21,660
In our case, then we're
going to use Preact.

415
00:14:21,660 --> 00:14:23,100
It works just great.

416
00:14:23,100 --> 00:14:24,765
So we're going to import preact.

417
00:14:24,765 --> 00:14:27,150
Our UI extends the Actor class.

418
00:14:27,150 --> 00:14:28,830
And when it receives
a message, we're

419
00:14:28,830 --> 00:14:32,260
going to have it render using
Preact to, in this case,

420
00:14:32,260 --> 00:14:34,952
the document body.

421
00:14:34,952 --> 00:14:35,910
SURMA: Same again here.

422
00:14:35,910 --> 00:14:37,464
We need to send messages back.

423
00:14:37,464 --> 00:14:38,422
PAUL LEWIS: Absolutely.

424
00:14:38,422 --> 00:14:42,010
And to do that, it is a
case of, on the UI side,

425
00:14:42,010 --> 00:14:44,437
we find our clock actor,
we do a lookup on it,

426
00:14:44,437 --> 00:14:46,270
and we will send it a
message, in this case,

427
00:14:46,270 --> 00:14:48,880
for this particular example,
sending it a message to start.

428
00:14:48,880 --> 00:14:52,790
There'll be one for stop,
or reset, and so on.

429
00:14:52,790 --> 00:14:54,570
Now, we get to talk
about that location

430
00:14:54,570 --> 00:14:57,240
independence a teeny bit more.

431
00:14:57,240 --> 00:14:59,940
Because one of the questions
that Surma, Tim, and I ask

432
00:14:59,940 --> 00:15:01,950
ourselves when we're
making our actors is,

433
00:15:01,950 --> 00:15:06,490
does this actor need
access to the main thread?

434
00:15:06,490 --> 00:15:09,839
And this is kind of to do
with the rush hour thing.

435
00:15:09,839 --> 00:15:11,380
Our general rule of
thumb-- and there

436
00:15:11,380 --> 00:15:13,270
are some caveats we'll
mention in a moment.

437
00:15:13,270 --> 00:15:16,210
But out general rule of thumb is
that a UI actor is the one that

438
00:15:16,210 --> 00:15:17,237
really needs the DOM.

439
00:15:17,237 --> 00:15:18,820
And therefore, it's
the one that ought

440
00:15:18,820 --> 00:15:22,014
to be on the main thread
wherever possible.

441
00:15:22,014 --> 00:15:22,930
There is an exception.

442
00:15:22,930 --> 00:15:24,760
The exception here is
that certain APIs--

443
00:15:24,760 --> 00:15:27,430
those for media security, device
capabilities, and identity--

444
00:15:27,430 --> 00:15:30,280
are only available on
the main thread today.

445
00:15:30,280 --> 00:15:31,430
SURMA: We think it's a bug.

446
00:15:31,430 --> 00:15:33,388
And we've been talking
to some Chrome engineers

447
00:15:33,388 --> 00:15:34,840
about exposing
these kind of APIs

448
00:15:34,840 --> 00:15:36,422
in a worker and somewhere else.

449
00:15:36,422 --> 00:15:38,380
But that's just not the
world we live in today.

450
00:15:38,380 --> 00:15:41,462
So for now, that's
a restriction.

451
00:15:41,462 --> 00:15:42,670
PAUL LEWIS: Tools not rules--

452
00:15:42,670 --> 00:15:46,420
so you might be thinking, ah, I
should move all my actors away

453
00:15:46,420 --> 00:15:47,500
from the main thread.

454
00:15:47,500 --> 00:15:48,714
We'll get to that.

455
00:15:48,714 --> 00:15:51,130
But the thing is, if you've
got a really chatty actor that

456
00:15:51,130 --> 00:15:53,050
needs to talk to
the UI actor, you

457
00:15:53,050 --> 00:15:56,530
might want to leave it alongside
the UI actor on the method.

458
00:15:56,530 --> 00:15:58,420
Because as Jason and
Shubhie were talking

459
00:15:58,420 --> 00:16:01,840
about earlier, that there's
a cost to the thread hop,

460
00:16:01,840 --> 00:16:06,190
and that might be more expensive
than just sending a message

461
00:16:06,190 --> 00:16:10,120
and just keeping the actor
alongside the UI actor, OK?

462
00:16:10,120 --> 00:16:12,550
SURMA: So basically, if you
want to do that, just measure

463
00:16:12,550 --> 00:16:13,600
and see what the impact is.

464
00:16:13,600 --> 00:16:14,433
PAUL LEWIS: Exactly.

465
00:16:14,433 --> 00:16:17,950
So the location independence--
for all that notwithstanding,

466
00:16:17,950 --> 00:16:19,720
imagine we were
back here where we

467
00:16:19,720 --> 00:16:22,492
started with our four actors.

468
00:16:22,492 --> 00:16:24,700
And they're all on the main
thread, which is probably

469
00:16:24,700 --> 00:16:27,730
where we put them by default.
We're sort of saying,

470
00:16:27,730 --> 00:16:30,360
you might want to look
at it more like this.

471
00:16:30,360 --> 00:16:33,970
And you might be thinking, why
do they say, not main thread?

472
00:16:33,970 --> 00:16:36,670
Surely, they just
meant Web Workers.

473
00:16:36,670 --> 00:16:40,570
And we kind of did because,
in most cases, when

474
00:16:40,570 --> 00:16:42,910
we build these apps, web
workers do feature heavily.

475
00:16:42,910 --> 00:16:46,420
We do move quite a lot of
our actors to web workers,

476
00:16:46,420 --> 00:16:48,940
especially if
they're non-chatty.

477
00:16:48,940 --> 00:16:51,280
SURMA: But not quite.

478
00:16:51,280 --> 00:16:53,140
So we actually
think, or have tried,

479
00:16:53,140 --> 00:16:55,750
that it's sometimes very,
very useful to run an actor,

480
00:16:55,750 --> 00:16:57,785
for example, on the server side.

481
00:16:57,785 --> 00:16:59,410
And this is kind of
an interesting jump

482
00:16:59,410 --> 00:17:02,590
to make because it
allows you to incorporate

483
00:17:02,590 --> 00:17:04,300
your back end into
the architecture

484
00:17:04,300 --> 00:17:05,800
of your entire app.

485
00:17:05,800 --> 00:17:07,724
It is just another
actor in the system.

486
00:17:07,724 --> 00:17:09,099
And as a matter
of fact, the game

487
00:17:09,099 --> 00:17:10,290
that you've been
playing all day--

488
00:17:10,290 --> 00:17:11,680
and it totally
had no bugs at all

489
00:17:11,680 --> 00:17:14,650
whatsoever-- is actually
written in this model.

490
00:17:14,650 --> 00:17:17,079
So every player that
is playing is an actor.

491
00:17:17,079 --> 00:17:21,260
The admin panel that the MCs use
to control the app is an actor.

492
00:17:21,260 --> 00:17:23,569
The presentation view--
just another actor.

493
00:17:23,569 --> 00:17:25,180
And then the Firebase Storage--

494
00:17:25,180 --> 00:17:27,367
a shared actor that's
running on the server side.

495
00:17:27,367 --> 00:17:29,200
PAUL LEWIS: Now
interestingly, the mechanism

496
00:17:29,200 --> 00:17:31,834
by which they chat using
the hookup and lookup

497
00:17:31,834 --> 00:17:32,500
can be anything.

498
00:17:32,500 --> 00:17:33,249
It could be Fetch.

499
00:17:33,249 --> 00:17:34,470
It could be a WebSocket.

500
00:17:34,470 --> 00:17:35,830
And it really doesn't matter.

501
00:17:35,830 --> 00:17:36,760
SURMA: Your Firebase database.

502
00:17:36,760 --> 00:17:37,468
PAUL LEWIS: Yeah.

503
00:17:37,468 --> 00:17:39,250
So long as talk,
these actors can talk,

504
00:17:39,250 --> 00:17:42,100
and they've got a way of
sending messages to one another,

505
00:17:42,100 --> 00:17:43,310
you're all set.

506
00:17:43,310 --> 00:17:46,150
So back to our
original question.

507
00:17:46,150 --> 00:17:48,670
Did we actually
help with rush hour?

508
00:17:48,670 --> 00:17:50,350
Would this actually help?

509
00:17:50,350 --> 00:17:51,347
Well, let's review.

510
00:17:51,347 --> 00:17:52,930
SURMA: So one thing
that we definitely

511
00:17:52,930 --> 00:17:56,920
did achieve is that we are
making it less likely to have

512
00:17:56,920 --> 00:18:00,220
big chunks of uninterruptable
JavaScript and more

513
00:18:00,220 --> 00:18:02,920
little chunks where the
browser can stop it in between

514
00:18:02,920 --> 00:18:03,980
and ship a frame.

515
00:18:03,980 --> 00:18:06,280
So that's definitely one
advantage that we have.

516
00:18:06,280 --> 00:18:07,870
PAUL LEWIS: The
location independence,

517
00:18:07,870 --> 00:18:11,375
hopefully, some of our actors
can be run successfully away

518
00:18:11,375 --> 00:18:12,250
from the main thread.

519
00:18:12,250 --> 00:18:15,190
Hopefully, it's like fewer
cars on the road at rush hour.

520
00:18:15,190 --> 00:18:17,860
That's good for
everybody typically.

521
00:18:17,860 --> 00:18:19,930
SURMA: And as a
result, a lot of work

522
00:18:19,930 --> 00:18:21,670
that can happen in
an unexpected way,

523
00:18:21,670 --> 00:18:24,550
if you're processing a big
API response to something,

524
00:18:24,550 --> 00:18:27,130
that can happen in the worker
and not affect your main thread

525
00:18:27,130 --> 00:18:29,382
from going into jank mode.

526
00:18:29,382 --> 00:18:31,090
PAUL LEWIS: There are
some other benefits

527
00:18:31,090 --> 00:18:33,926
that Surma, Tim, and I have
noticed as well working

528
00:18:33,926 --> 00:18:35,050
in this particular pattern.

529
00:18:35,050 --> 00:18:37,540
One is better testing.

530
00:18:37,540 --> 00:18:42,280
With that kind of
area of ownership,

531
00:18:42,280 --> 00:18:44,722
it's easier to look
at an actor and go,

532
00:18:44,722 --> 00:18:46,180
oh, well I know
what you should do.

533
00:18:46,180 --> 00:18:48,489
And you've got an
onMessage that I can call,

534
00:18:48,489 --> 00:18:50,530
and I can make sure that
you do the right things.

535
00:18:50,530 --> 00:18:52,760
So the testing seems to
become a little bit easier.

536
00:18:52,760 --> 00:18:53,260
SURMA: Yeah.

537
00:18:53,260 --> 00:18:55,510
Off on the other side,
you can mock another actor

538
00:18:55,510 --> 00:18:57,970
by just implementing the
messages that that actor needs

539
00:18:57,970 --> 00:18:59,680
to receive and not
do the actual work,

540
00:18:59,680 --> 00:19:02,165
but just send prerecorded
messages back.

541
00:19:02,165 --> 00:19:03,790
PAUL LEWIS: You have
a clear separation

542
00:19:03,790 --> 00:19:08,380
of concerns, which
again, it helps you

543
00:19:08,380 --> 00:19:12,160
in terms of maybe dividing
the work with your teammates

544
00:19:12,160 --> 00:19:14,670
or even just
deciding for yourself

545
00:19:14,670 --> 00:19:17,020
which actor needs to be
responsible for this part

546
00:19:17,020 --> 00:19:18,617
of the system?

547
00:19:18,617 --> 00:19:20,200
SURMA: And you get
the code splitting.

548
00:19:20,200 --> 00:19:23,950
Because you have actors that
can be hooked up to the system

549
00:19:23,950 --> 00:19:25,660
at any point in time,
really, it allows

550
00:19:25,660 --> 00:19:27,860
you to split them up
and load them lazily.

551
00:19:27,860 --> 00:19:29,693
You can just import
them when you need them.

552
00:19:29,693 --> 00:19:30,430
PAUL LEWIS: Yeah.

553
00:19:30,430 --> 00:19:32,860
That's good.

554
00:19:32,860 --> 00:19:34,210
And bring your own framework.

555
00:19:34,210 --> 00:19:40,300
If you want to use a particular
library or framework, you can.

556
00:19:40,300 --> 00:19:41,712
There's not a prescriptive way.

557
00:19:41,712 --> 00:19:43,670
If you want to use the
[? one ?] thing, use it.

558
00:19:43,670 --> 00:19:44,730
Great.

559
00:19:44,730 --> 00:19:48,430
Now, there are some
considerations in this world,

560
00:19:48,430 --> 00:19:50,110
in this setup that we described.

561
00:19:50,110 --> 00:19:52,300
One is actor
performance challenges.

562
00:19:52,300 --> 00:19:54,400
If you imagine your
UI actor, imagine

563
00:19:54,400 --> 00:19:59,170
it decides to run along and
just be not very yieldy.

564
00:19:59,170 --> 00:20:00,380
You still have that problem.

565
00:20:00,380 --> 00:20:02,470
It's no different to a
process or an application

566
00:20:02,470 --> 00:20:05,800
in an operating system deciding
it's going to hog the CPU.

567
00:20:05,800 --> 00:20:08,840
This is not going to go away.

568
00:20:08,840 --> 00:20:10,360
But we do think
that the Scheduler

569
00:20:10,360 --> 00:20:13,840
API that Jason and Shubhie
mentioned in the previous talk

570
00:20:13,840 --> 00:20:15,610
is a huge part of this story.

571
00:20:15,610 --> 00:20:17,800
Because it's a great way
for individual actors

572
00:20:17,800 --> 00:20:21,470
to start breaking their
work up into smaller chunks.

573
00:20:21,470 --> 00:20:22,970
You may also be
sitting there going,

574
00:20:22,970 --> 00:20:26,460
I'm not sure I could
actorize my blog.

575
00:20:26,460 --> 00:20:27,810
And we would agree.

576
00:20:27,810 --> 00:20:29,900
It's not necessarily
for all use cases.

577
00:20:29,900 --> 00:20:31,640
This works really
well when you've

578
00:20:31,640 --> 00:20:34,460
got apps and in particular
apps where you think, actually,

579
00:20:34,460 --> 00:20:35,270
I can ring fence.

580
00:20:35,270 --> 00:20:38,210
I can mark off particular
parts of this application.

581
00:20:38,210 --> 00:20:40,070
And I can have some
kind of owner for it.

582
00:20:40,070 --> 00:20:42,200
That's where it
works really well.

583
00:20:42,200 --> 00:20:45,190
SURMA: And there's definitely a
different mental model to this.

584
00:20:45,190 --> 00:20:47,330
As I said, it kind
of shifts the center

585
00:20:47,330 --> 00:20:49,550
of the universe away
from the UI framework

586
00:20:49,550 --> 00:20:52,722
into many center pieces--
all the actors are just

587
00:20:52,722 --> 00:20:53,305
communicating.

588
00:20:53,305 --> 00:20:56,900
So it definitely took us a
time to build an intuition

589
00:20:56,900 --> 00:20:58,220
for where do we draw the line?

590
00:20:58,220 --> 00:20:59,210
What becomes an actor?

591
00:20:59,210 --> 00:21:01,520
What is just part of an
already existing actor?

592
00:21:01,520 --> 00:21:03,140
What kind of messages
should we send?

593
00:21:03,140 --> 00:21:05,690
How granular should
this entire set up be?

594
00:21:05,690 --> 00:21:07,981
So if it seems weird
at first, if you're

595
00:21:07,981 --> 00:21:10,355
playing around with this, that
is kind of to be expected.

596
00:21:10,355 --> 00:21:14,660
It's a very different way
of architecting a web app.

597
00:21:14,660 --> 00:21:17,750
PAUL LEWIS: So that
was the rush hour bit.

598
00:21:17,750 --> 00:21:21,177
That future-facing stuff
like the VR, AR, and so on--

599
00:21:21,177 --> 00:21:22,760
well, we have some
thoughts there too.

600
00:21:22,760 --> 00:21:23,554
Watch this.

601
00:21:23,554 --> 00:21:25,220
So you were talking
about actors before.

602
00:21:25,220 --> 00:21:27,080
And I want to talk
about cameras.

603
00:21:27,080 --> 00:21:28,370
And the reason I want
to talk about cameras

604
00:21:28,370 --> 00:21:30,330
is because it all plays
into that story, right?

605
00:21:30,330 --> 00:21:32,538
So if can, have one of these
lenses before I drop it,

606
00:21:32,538 --> 00:21:34,700
because I don't want to.

607
00:21:34,700 --> 00:21:37,460
Your modern camera
has two bits--

608
00:21:37,460 --> 00:21:40,040
the camera body, which
is the thing that

609
00:21:40,040 --> 00:21:42,280
holds the state when you're
shooting in JPEG or RAW--

610
00:21:42,280 --> 00:21:42,440
SURMA: Yeah.

611
00:21:42,440 --> 00:21:43,330
It's like the business logic.

612
00:21:43,330 --> 00:21:45,200
It knows how to take the
picture and how to store it

613
00:21:45,200 --> 00:21:46,080
and it does all that.

614
00:21:46,080 --> 00:21:46,580
PAUL LEWIS: Yeah.

615
00:21:46,580 --> 00:21:48,530
Whether you're shooting video,
or taking photos with it,

616
00:21:48,530 --> 00:21:50,220
or whether you are
autofocus or manual

617
00:21:50,220 --> 00:21:51,290
focus-- you get the idea.

618
00:21:51,290 --> 00:21:53,660
Similar to like
a web app, that's

619
00:21:53,660 --> 00:21:54,920
the state of what's going on.

620
00:21:54,920 --> 00:21:58,110
But you've got different
lenses for different tasks.

621
00:21:58,110 --> 00:22:01,100
So that one would be something
like a portrait lens.

622
00:22:01,100 --> 00:22:03,110
This one might be a wide-angle--

623
00:22:03,110 --> 00:22:04,647
take something of a landscape.

624
00:22:04,647 --> 00:22:07,230
SURMA: As long as we make sure
that the mounts are compatible,

625
00:22:07,230 --> 00:22:08,730
which I guess, in
actor world, means

626
00:22:08,730 --> 00:22:10,994
that they speak with the
same messages to each other.

627
00:22:10,994 --> 00:22:11,660
PAUL LEWIS: Yes.

628
00:22:11,660 --> 00:22:14,120
So the messages that they
send are really important.

629
00:22:14,120 --> 00:22:16,700
They're standardized, right?

630
00:22:16,700 --> 00:22:19,170
And everybody kind of plays
to that same data contract.

631
00:22:19,170 --> 00:22:21,080
Other than that, you
can do what you like.

632
00:22:21,080 --> 00:22:22,010
SURMA: Plug it in.

633
00:22:22,010 --> 00:22:23,442
PAUL LEWIS: Off you go.

634
00:22:23,442 --> 00:22:24,650
SURMA: Last video, I promise.

635
00:22:24,650 --> 00:22:25,358
PAUL LEWIS: Yeah.

636
00:22:25,358 --> 00:22:27,390
So camera lenses--
why camera lenses?

637
00:22:27,390 --> 00:22:31,080
How does that apply
to this story?

638
00:22:31,080 --> 00:22:32,770
When we talked
about this earlier,

639
00:22:32,770 --> 00:22:35,667
I think very naturally, we would
have all thought of the DOM.

640
00:22:35,667 --> 00:22:37,500
We would have thought
of, in the chess game,

641
00:22:37,500 --> 00:22:40,350
we would have thought
of this version.

642
00:22:40,350 --> 00:22:43,369
But there's the freedom
that you get from a UI actor

643
00:22:43,369 --> 00:22:45,410
that, as long as it can
speak the right messages,

644
00:22:45,410 --> 00:22:47,760
it can be implemented in
different technologies.

645
00:22:47,760 --> 00:22:51,770
So you could have a
different actor that does 3D.

646
00:22:51,770 --> 00:22:52,790
And now you get that.

647
00:22:52,790 --> 00:22:56,090
It just has to send the same
messages as the standard DOM

648
00:22:56,090 --> 00:22:56,960
version.

649
00:22:56,960 --> 00:23:00,170
Or maybe one full
XR, similarly, it

650
00:23:00,170 --> 00:23:01,600
needs to be able to do that--

651
00:23:01,600 --> 00:23:02,840
send the right messages.

652
00:23:02,840 --> 00:23:05,930
And perhaps something
like Voice as well--

653
00:23:05,930 --> 00:23:07,479
similar kind of story.

654
00:23:07,479 --> 00:23:09,020
So as a byproduct
of the actor model,

655
00:23:09,020 --> 00:23:12,710
we've all of a sudden got
these different swappable UI

656
00:23:12,710 --> 00:23:15,002
actors that we can take with
us wherever we need to go.

657
00:23:15,002 --> 00:23:16,418
And you might say,
well, actually,

658
00:23:16,418 --> 00:23:18,830
all I need in this particular
app is the XR and Voice.

659
00:23:18,830 --> 00:23:21,442
Or maybe I want DOM and Voice.

660
00:23:21,442 --> 00:23:23,150
SURMA: And you could
even imagine a setup

661
00:23:23,150 --> 00:23:26,840
where you have a DOM actor with
lots of effects and visuals

662
00:23:26,840 --> 00:23:30,410
and one DOM actor implements
the same app, but with a much

663
00:23:30,410 --> 00:23:34,250
less intense memory consumption
version, like a low-end version

664
00:23:34,250 --> 00:23:35,150
of your website.

665
00:23:35,150 --> 00:23:37,520
And once you detect that
the device we're running on

666
00:23:37,520 --> 00:23:39,317
is actually kind of
struggling to keep up.

667
00:23:39,317 --> 00:23:41,150
You can actually switch
it out in the middle

668
00:23:41,150 --> 00:23:44,097
of the app and downgrade to
the lower visual version.

669
00:23:44,097 --> 00:23:46,430
PAUL LEWIS: Or one would say
reduced motion or something

670
00:23:46,430 --> 00:23:47,600
like that.

671
00:23:47,600 --> 00:23:49,100
And technically,
this will be called

672
00:23:49,100 --> 00:23:50,750
multi-view or
multi-modal, which is

673
00:23:50,750 --> 00:23:52,791
a very fancy way of saying
there are lots of ways

674
00:23:52,791 --> 00:23:54,140
to interact with your web app.

675
00:23:54,140 --> 00:23:56,920
And as a byproduct,
within the actor model,

676
00:23:56,920 --> 00:23:59,311
it enables you to
do that pretty well.

677
00:23:59,311 --> 00:24:01,310
So if you're interested
in looking at the hookup

678
00:24:01,310 --> 00:24:02,799
and lookup of the
Actor base class

679
00:24:02,799 --> 00:24:04,340
that we mentioned
earlier, this would

680
00:24:04,340 --> 00:24:07,170
be the place to go if you
want to take a snap at that.

681
00:24:07,170 --> 00:24:09,530
SURMA: This is actually, not
only the Actor base class,

682
00:24:09,530 --> 00:24:10,952
but it's actually
a boiler plate.

683
00:24:10,952 --> 00:24:11,910
So it gets you started.

684
00:24:11,910 --> 00:24:14,160
There's rollup configured
where you can just build it,

685
00:24:14,160 --> 00:24:15,952
does the code splitting,
the lazy loading.

686
00:24:15,952 --> 00:24:17,660
It should get you
started really quickly,

687
00:24:17,660 --> 00:24:19,370
so you can start
writing actors and get

688
00:24:19,370 --> 00:24:20,615
a feel for how it feels.

689
00:24:20,615 --> 00:24:21,740
PAUL LEWIS: Let's be clear.

690
00:24:21,740 --> 00:24:22,400
It's experimental.

691
00:24:22,400 --> 00:24:24,066
It's just the stomping
ground that we've

692
00:24:24,066 --> 00:24:25,890
been using for the
last little while.

693
00:24:25,890 --> 00:24:28,223
And we'd love you to take a
look and have a chat with us

694
00:24:28,223 --> 00:24:30,364
and just tell us what you think.

695
00:24:30,364 --> 00:24:32,780
So in summary, we're actually
quite excited that something

696
00:24:32,780 --> 00:24:36,080
from 45 years ago has
kind of come full circle,

697
00:24:36,080 --> 00:24:39,516
and it seems to be the thing--

698
00:24:39,516 --> 00:24:41,140
SURMA: It's been
hiding in plain sight.

699
00:24:41,140 --> 00:24:41,848
PAUL LEWIS: Yeah.

700
00:24:41,848 --> 00:24:43,975
And from some of the
places in computing,

701
00:24:43,975 --> 00:24:46,100
we've kind of brought it
over, not in a purist way.

702
00:24:46,100 --> 00:24:48,154
We have our own take
on these things.

703
00:24:48,154 --> 00:24:49,820
But it respects that
single-threadedness

704
00:24:49,820 --> 00:24:51,020
of JavaScript.

705
00:24:51,020 --> 00:24:52,970
It seems to help with rush hour.

706
00:24:52,970 --> 00:24:55,460
And it also seems to enable
us to go multi-modal, which

707
00:24:55,460 --> 00:24:57,110
is really kind of exciting.

708
00:24:57,110 --> 00:24:59,446
And on that note, thanks.

709
00:24:59,446 --> 00:25:00,570
SURMA: Thank you very much.

710
00:25:00,570 --> 00:25:03,920
[MUSIC PLAYING]

711
00:25:03,920 --> 00:25:11,060