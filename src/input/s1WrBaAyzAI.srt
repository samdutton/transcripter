1
00:00:00,000 --> 00:00:02,495
[MUSIC PLAYING]

2
00:00:02,495 --> 00:00:06,244


3
00:00:06,244 --> 00:00:07,410
ALBERTO MEDINA: I'm Alberto.

4
00:00:07,410 --> 00:00:09,870
I'm a developer advocate
in the Content Ecosystem

5
00:00:09,870 --> 00:00:10,950
Team at Google.

6
00:00:10,950 --> 00:00:14,160
And I'm super happy to be here
with my teammate, Weston Ruter.

7
00:00:14,160 --> 00:00:15,960
We are going to
talk about bringing

8
00:00:15,960 --> 00:00:17,610
the pillars of modern
web development

9
00:00:17,610 --> 00:00:19,660
to the space of content
management systems.

10
00:00:19,660 --> 00:00:22,830
But let's start with
the end goal in mind.

11
00:00:22,830 --> 00:00:26,580
Our goal as web creators
is to maximize the joy

12
00:00:26,580 --> 00:00:29,910
that our users get when they
go to the websites we build

13
00:00:29,910 --> 00:00:32,880
or the content that we create
and publish on the web.

14
00:00:32,880 --> 00:00:35,820
And although it is true
that user experience is

15
00:00:35,820 --> 00:00:38,400
a complex matter, there
are certain elements

16
00:00:38,400 --> 00:00:42,210
that are commonly found in
experiences that users love.

17
00:00:42,210 --> 00:00:45,780
Specifically, users
love presentations

18
00:00:45,780 --> 00:00:47,880
that work, number one.

19
00:00:47,880 --> 00:00:51,330
They love sites that
load fast consistently

20
00:00:51,330 --> 00:00:54,090
and offer good
runtime performance.

21
00:00:54,090 --> 00:00:58,890
They love sites where they feel
safe when they trust their data

22
00:00:58,890 --> 00:01:01,950
or they do transactions
when they decide to do so.

23
00:01:01,950 --> 00:01:04,967
They like sites that
feel accessible,

24
00:01:04,967 --> 00:01:07,050
and they are integrated
with the full capabilities

25
00:01:07,050 --> 00:01:08,160
of their devices.

26
00:01:08,160 --> 00:01:12,120
And they love sites that
offer great content quality.

27
00:01:12,120 --> 00:01:16,500
The good news is that we can
build today experiences that

28
00:01:16,500 --> 00:01:19,920
have these pillars if we take
advantage of the capabilities

29
00:01:19,920 --> 00:01:22,210
that the modern
web has to offer.

30
00:01:22,210 --> 00:01:26,520
Now, doing this is what we call
progressive web development.

31
00:01:26,520 --> 00:01:28,680
In essence, progressive
web development

32
00:01:28,680 --> 00:01:33,810
is developing
user-first experiences

33
00:01:33,810 --> 00:01:36,600
using modern workflows
and modern web APIs,

34
00:01:36,600 --> 00:01:39,420
following coding best practices
and performance best practices,

35
00:01:39,420 --> 00:01:42,540
and taking advantage of
effective incentive mechanisms

36
00:01:42,540 --> 00:01:46,320
and validation structures that
are available to all, to us.

37
00:01:46,320 --> 00:01:49,050
Now, we can take advantage
of these principles

38
00:01:49,050 --> 00:01:51,090
in different ways,
depending about how

39
00:01:51,090 --> 00:01:53,220
we go through the
creative process,

40
00:01:53,220 --> 00:01:54,780
how do we create
things in the web.

41
00:01:54,780 --> 00:01:57,180
In general, the things
that we create in the web

42
00:01:57,180 --> 00:01:58,740
follow in two categories.

43
00:01:58,740 --> 00:02:01,680
On one hand, we can build
websites or web apps

44
00:02:01,680 --> 00:02:03,630
from scratch, in
which case we have

45
00:02:03,630 --> 00:02:05,970
full control of the
whole creative journey,

46
00:02:05,970 --> 00:02:08,789
from the build process, to
the functionality of the app,

47
00:02:08,789 --> 00:02:10,410
to the look and feel.

48
00:02:10,410 --> 00:02:14,610
Or we can take advantage of
some kind of Content Management

49
00:02:14,610 --> 00:02:19,590
System, or CMS for short, that
are software platforms that

50
00:02:19,590 --> 00:02:22,110
add a layer of abstraction
on top of the open web

51
00:02:22,110 --> 00:02:25,530
to offer capabilities to
create, publish, and consume

52
00:02:25,530 --> 00:02:27,540
digital content on the web.

53
00:02:27,540 --> 00:02:30,780
If we follow the first route,
we have full control and full

54
00:02:30,780 --> 00:02:31,290
flexibility.

55
00:02:31,290 --> 00:02:32,130
It's very powerful.

56
00:02:32,130 --> 00:02:34,950
But also, it requires a lot
of expertise and resources

57
00:02:34,950 --> 00:02:35,900
to follow it.

58
00:02:35,900 --> 00:02:37,560
If we follow the
second route, we

59
00:02:37,560 --> 00:02:39,210
can take advantage
of the capabilities

60
00:02:39,210 --> 00:02:40,804
that the CMS has to offer to us.

61
00:02:40,804 --> 00:02:42,720
But then at the end of
the day, the experience

62
00:02:42,720 --> 00:02:46,180
that we can offer to our users
depends on the characteristic

63
00:02:46,180 --> 00:02:49,110
of the CMS that we choose.

64
00:02:49,110 --> 00:02:53,070
Now, it turns out that nowadays,
the majority of content

65
00:02:53,070 --> 00:02:55,740
in the web is
created and consumed

66
00:02:55,740 --> 00:02:57,960
via some kind of content
management system.

67
00:02:57,960 --> 00:03:00,870
Specifically, 54%
of sites today are

68
00:03:00,870 --> 00:03:03,460
built on some kind of
content management system.

69
00:03:03,460 --> 00:03:06,810
And we saw this year 11%
year over year growth.

70
00:03:06,810 --> 00:03:08,780
These are staggering statistics.

71
00:03:08,780 --> 00:03:10,560
And there are other
systems that do not

72
00:03:10,560 --> 00:03:13,380
think of themselves as
CMSes but also offer

73
00:03:13,380 --> 00:03:15,750
the same capabilities that
make it very easy to create

74
00:03:15,750 --> 00:03:17,110
and publish content.

75
00:03:17,110 --> 00:03:21,010
So in reality, these
statistics are much higher.

76
00:03:21,010 --> 00:03:23,400
So this basically means
that the CMS space

77
00:03:23,400 --> 00:03:26,530
is very large and very complex.

78
00:03:26,530 --> 00:03:28,920
CMS comes in many
shape and form.

79
00:03:28,920 --> 00:03:32,760
And they vary according
to certain dimensions.

80
00:03:32,760 --> 00:03:35,790
For example, you can have static
versus dynamic, open source,

81
00:03:35,790 --> 00:03:38,760
closed source, special
purpose, general purpose.

82
00:03:38,760 --> 00:03:41,640
But although there are
differences between them,

83
00:03:41,640 --> 00:03:44,130
they also share a
lot of commonalities.

84
00:03:44,130 --> 00:03:48,150
And specifically, many of
them face common challenges

85
00:03:48,150 --> 00:03:51,300
when it comes to integrating
progressive web technologies

86
00:03:51,300 --> 00:03:53,650
into their platforms.

87
00:03:53,650 --> 00:03:56,860
So many of these systems
are very large and complex.

88
00:03:56,860 --> 00:03:58,840
They have many
interacting components.

89
00:03:58,840 --> 00:04:00,580
They have large code bases.

90
00:04:00,580 --> 00:04:04,360
They have legacy code,
technical depth, and so on.

91
00:04:04,360 --> 00:04:06,160
There are also,
some of them have

92
00:04:06,160 --> 00:04:09,160
evolved on top of initial
architectural choices that

93
00:04:09,160 --> 00:04:13,360
make it difficult for them to
evolve and become progressive.

94
00:04:13,360 --> 00:04:15,490
They also suffer
from fragmentation

95
00:04:15,490 --> 00:04:17,649
very often in terms of
things like the quality

96
00:04:17,649 --> 00:04:19,420
of the components
that make them,

97
00:04:19,420 --> 00:04:21,724
or the expertise of the
developer community,

98
00:04:21,724 --> 00:04:23,890
or the type of users that
are creating and consuming

99
00:04:23,890 --> 00:04:25,900
content on the platform.

100
00:04:25,900 --> 00:04:27,730
And often-- and this
is very important--

101
00:04:27,730 --> 00:04:32,350
CMSes lack the effective
incentives for developers

102
00:04:32,350 --> 00:04:33,730
to do the right thing.

103
00:04:33,730 --> 00:04:37,750
For example, exposing coding
and performance metrics

104
00:04:37,750 --> 00:04:41,350
so that users of the
CMS can choose solutions

105
00:04:41,350 --> 00:04:44,370
based on quality and
not just on popularity.

106
00:04:44,370 --> 00:04:47,430
Now, we want to tackle these
challenges in the CMS space.

107
00:04:47,430 --> 00:04:49,210
And in order to
reason about how to do

108
00:04:49,210 --> 00:04:51,070
that, it is very useful
to do a [INAUDIBLE]

109
00:04:51,070 --> 00:04:54,160
or thinking about these systems
in terms of the components that

110
00:04:54,160 --> 00:04:56,230
make them, OK?

111
00:04:56,230 --> 00:04:59,590
A CMS ecosystem,
one way or another,

112
00:04:59,590 --> 00:05:03,760
has certain components that
form a unique ecosystem for each

113
00:05:03,760 --> 00:05:04,480
of them.

114
00:05:04,480 --> 00:05:07,720
There is usually a
core, a platform core,

115
00:05:07,720 --> 00:05:10,260
that makes the
functionality of the system.

116
00:05:10,260 --> 00:05:12,910
There is usually some kind
of extension mechanism

117
00:05:12,910 --> 00:05:15,732
that allows you to extend
the core functionality.

118
00:05:15,732 --> 00:05:17,190
These extensions
are usually called

119
00:05:17,190 --> 00:05:21,010
modules in some CMSes, plugins
on another, also, themes,

120
00:05:21,010 --> 00:05:23,610
if they have to do with the
look and feel of the system.

121
00:05:23,610 --> 00:05:25,840
There is usually a
developers' community

122
00:05:25,840 --> 00:05:28,660
that are in charge of
evolving both the core

123
00:05:28,660 --> 00:05:30,920
and the extensions
of that platform.

124
00:05:30,920 --> 00:05:32,860
And then there is the
user base of the CMS

125
00:05:32,860 --> 00:05:35,350
that are either creating
content or consuming

126
00:05:35,350 --> 00:05:38,450
content on the platform.

127
00:05:38,450 --> 00:05:41,020
So when we talk about
progressive content management

128
00:05:41,020 --> 00:05:42,820
systems, we are
talking about bringing

129
00:05:42,820 --> 00:05:45,010
the principles of
progressive web development

130
00:05:45,010 --> 00:05:49,660
to the components of each
of these ecosystems, OK?

131
00:05:49,660 --> 00:05:52,300
For example, how do we
bring coding and performance

132
00:05:52,300 --> 00:05:55,150
best practices to the
developer ecosystem

133
00:05:55,150 --> 00:05:57,220
so that they can
do the right thing?

134
00:05:57,220 --> 00:06:00,880
Can we bring tooling
so that it make it easy

135
00:06:00,880 --> 00:06:04,240
for them to do the right
thing in the first place?

136
00:06:04,240 --> 00:06:06,250
Or can we bring
incentive mechanisms

137
00:06:06,250 --> 00:06:09,280
so that they are compelled
to do the right thing?

138
00:06:09,280 --> 00:06:11,590
Now, Google is working
with many CMSes

139
00:06:11,590 --> 00:06:13,720
to support them in
their effort as they

140
00:06:13,720 --> 00:06:15,550
integrate progressive
technologies

141
00:06:15,550 --> 00:06:16,906
into their platform.

142
00:06:16,906 --> 00:06:18,280
So in the next
few slides, we are

143
00:06:18,280 --> 00:06:20,740
going to show you the results
of a particular effort

144
00:06:20,740 --> 00:06:24,654
that my team has followed in
the context of a specific CMS.

145
00:06:24,654 --> 00:06:26,320
And then later on,
we are going to touch

146
00:06:26,320 --> 00:06:31,840
upon some of the great
work done by other CMSes.

147
00:06:31,840 --> 00:06:33,280
Our team has been
pursuing efforts

148
00:06:33,280 --> 00:06:35,650
to bring progressive web
technologies to the WordPress

149
00:06:35,650 --> 00:06:36,300
ecosystems.

150
00:06:36,300 --> 00:06:38,680
The little fellow
here there is Wapuu.

151
00:06:38,680 --> 00:06:41,150
That is the mascot of
the WordPress ecosystem.

152
00:06:41,150 --> 00:06:43,540
It's not a mouse, although
it looks like a mouse.

153
00:06:43,540 --> 00:06:46,300


154
00:06:46,300 --> 00:06:50,770
So WordPress nowadays powers
about a third of the web.

155
00:06:50,770 --> 00:06:54,100
So there's a lot of users
creating and consuming

156
00:06:54,100 --> 00:06:55,390
content on this platform.

157
00:06:55,390 --> 00:06:58,450
Now, given the size and
complexity of the WordPress

158
00:06:58,450 --> 00:07:02,210
ecosystem, if we address the
challenges that they face,

159
00:07:02,210 --> 00:07:04,720
we will not have only an
impact on a very large swath

160
00:07:04,720 --> 00:07:07,900
of the web, but also we
will be able to shed light

161
00:07:07,900 --> 00:07:11,030
on how to address these
challenges in other CMSes.

162
00:07:11,030 --> 00:07:13,460
So our goal with these
efforts are twofold.

163
00:07:13,460 --> 00:07:15,790
One is to tackle the
challenges that the WordPress

164
00:07:15,790 --> 00:07:19,540
ecosystem faces, and also
to gather our learnings

165
00:07:19,540 --> 00:07:23,470
that we get along the way and
bring them over to other CMSes

166
00:07:23,470 --> 00:07:26,830
in the form of objective
guidance, tutorials, technology

167
00:07:26,830 --> 00:07:28,640
transfers, and so on.

168
00:07:28,640 --> 00:07:32,380
Now, the approach
that we follow to make

169
00:07:32,380 --> 00:07:35,150
WordPress more progressive
consists of two parts.

170
00:07:35,150 --> 00:07:39,060
The first part is leveraging
the capabilities of Accelerated

171
00:07:39,060 --> 00:07:43,510
Mobile Pages, or AMP for short.

172
00:07:43,510 --> 00:07:46,660
AMP provides basically
a well-lit path

173
00:07:46,660 --> 00:07:49,105
to modern web
development in WordPress.

174
00:07:49,105 --> 00:07:52,720
AMP is an open-source web
component library which

175
00:07:52,720 --> 00:07:57,370
provides out-of-the-box a set of
capabilities and optimizations

176
00:07:57,370 --> 00:08:00,310
that are essential to achieve
awesome web experiences

177
00:08:00,310 --> 00:08:01,382
in the web.

178
00:08:01,382 --> 00:08:02,840
For example, coding
and performance

179
00:08:02,840 --> 00:08:04,810
best practices so that
you don't get things

180
00:08:04,810 --> 00:08:07,990
like unresponsive content
when you are loading it,

181
00:08:07,990 --> 00:08:11,022
or good usability so you don't
have this constant shifting

182
00:08:11,022 --> 00:08:12,730
in front of your eyes
when you are trying

183
00:08:12,730 --> 00:08:14,720
to engage with the content.

184
00:08:14,720 --> 00:08:18,280
It also provides a incentive
mechanism-- for example,

185
00:08:18,280 --> 00:08:20,890
the capability of getting
near instant loading

186
00:08:20,890 --> 00:08:24,610
time when AMP content is
loaded from the AMP cache.

187
00:08:24,610 --> 00:08:27,700
And it also provides
a validation framework

188
00:08:27,700 --> 00:08:31,300
that helps developers
to bring their sites

189
00:08:31,300 --> 00:08:33,640
to high-performance
states and to keep them

190
00:08:33,640 --> 00:08:36,220
in that state as
the site evolves.

191
00:08:36,220 --> 00:08:40,150
So if we enable AMP content
creation in WordPress,

192
00:08:40,150 --> 00:08:42,039
that means that
WordPress developers

193
00:08:42,039 --> 00:08:44,590
can take advantage of
all these capabilities

194
00:08:44,590 --> 00:08:48,070
without deviating of the normal
content creation workflow

195
00:08:48,070 --> 00:08:50,890
that they follow in
the platform normally.

196
00:08:50,890 --> 00:08:52,930
We have achieved
this integration

197
00:08:52,930 --> 00:08:56,590
by means of an AMP
plugin for WordPress.

198
00:08:56,590 --> 00:09:00,480
Right now, it is in version
1.0 release candidate 2.

199
00:09:00,480 --> 00:09:02,140
And the stable version
will be released

200
00:09:02,140 --> 00:09:03,840
at the end of this month.

201
00:09:03,840 --> 00:09:06,250
Now, this plugin has a lot
of capabilities and features.

202
00:09:06,250 --> 00:09:08,860
And unfortunately, we don't
have time today to go over them

203
00:09:08,860 --> 00:09:09,650
in detail.

204
00:09:09,650 --> 00:09:11,920
But I want to mention a
specific important one--

205
00:09:11,920 --> 00:09:14,590
one that assists WordPress
developers as they

206
00:09:14,590 --> 00:09:18,470
build themes and plugins that
are fully AMP compatible.

207
00:09:18,470 --> 00:09:21,190
The plugin comes with
a compatibility tool

208
00:09:21,190 --> 00:09:24,310
that supports the development
of AMP content in WordPress.

209
00:09:24,310 --> 00:09:28,420
In a nutshell, for
any URL on a site,

210
00:09:28,420 --> 00:09:31,930
the plugin tells
us all information

211
00:09:31,930 --> 00:09:34,830
about any error that
can exist in that URL

212
00:09:34,830 --> 00:09:37,030
in very minute details.

213
00:09:37,030 --> 00:09:38,920
It tells you even
the markup that

214
00:09:38,920 --> 00:09:43,780
is generating the error and also
the component in the WordPress

215
00:09:43,780 --> 00:09:46,760
site that generated the
markup in the first place.

216
00:09:46,760 --> 00:09:47,620
We'll see the theme.

217
00:09:47,620 --> 00:09:49,870
We'll see the plugin
with WordPress core.

218
00:09:49,870 --> 00:09:50,930
What is it?

219
00:09:50,930 --> 00:09:52,960
So if you are a
WordPress developer,

220
00:09:52,960 --> 00:09:54,880
you can take advantage
of this tool and all

221
00:09:54,880 --> 00:09:56,463
the other capabilities
that the plugin

222
00:09:56,463 --> 00:10:01,120
provides to you to create
AMP content in your website.

223
00:10:01,120 --> 00:10:03,850
If you are a developer
from other CMSes,

224
00:10:03,850 --> 00:10:07,810
the good news is that they
are also implementing AMP.

225
00:10:07,810 --> 00:10:09,220
And we are going
to tell you more

226
00:10:09,220 --> 00:10:11,110
about this in a little bit.

227
00:10:11,110 --> 00:10:13,210
Now, the second
part of our approach

228
00:10:13,210 --> 00:10:15,970
of bringing progressive
[? net ?] to the WordPress

229
00:10:15,970 --> 00:10:19,300
ecosystem consists on
integrating modern web

230
00:10:19,300 --> 00:10:23,170
capabilities and APIs
into WordPress core.

231
00:10:23,170 --> 00:10:25,510
We want things like
service workers,

232
00:10:25,510 --> 00:10:27,340
streaming, background sync--

233
00:10:27,340 --> 00:10:29,140
all the goodies that
you have seen today,

234
00:10:29,140 --> 00:10:31,420
we want them to be
supported natively

235
00:10:31,420 --> 00:10:33,050
in the WordPress platform.

236
00:10:33,050 --> 00:10:34,780
So the goal of
the integration is

237
00:10:34,780 --> 00:10:37,120
that there is a consistent
and unified approach

238
00:10:37,120 --> 00:10:40,090
so that all WordPress developers
can take advantage of them

239
00:10:40,090 --> 00:10:43,060
as they develop functionality
for either core or themes

240
00:10:43,060 --> 00:10:44,410
or plugins.

241
00:10:44,410 --> 00:10:48,730
Now, last year, our
colleague Surma,

242
00:10:48,730 --> 00:10:51,190
where you have heard of
him, and who, by the way,

243
00:10:51,190 --> 00:10:53,770
has a complete disregard
for the impossible,

244
00:10:53,770 --> 00:10:57,370
he decided to show
that PWA with WordPress

245
00:10:57,370 --> 00:11:01,300
is actually possible by building
a WordPress theme that does all

246
00:11:01,300 --> 00:11:02,890
the things, as he called it.

247
00:11:02,890 --> 00:11:05,620
He successfully proved his case.

248
00:11:05,620 --> 00:11:09,130
And he presented his
work at CDS last year.

249
00:11:09,130 --> 00:11:11,380
But he also faced many
challenges along the way.

250
00:11:11,380 --> 00:11:12,880
And he recognized
that it would have

251
00:11:12,880 --> 00:11:16,420
been super great if the
WordPress platform would have

252
00:11:16,420 --> 00:11:18,100
provided him with
the building blocks

253
00:11:18,100 --> 00:11:20,680
that he needed to build
his WordPress that

254
00:11:20,680 --> 00:11:23,750
does all the things
in a much easier way.

255
00:11:23,750 --> 00:11:26,170
So in addition to our
work on AMP for WordPress,

256
00:11:26,170 --> 00:11:29,070
our team focused this year
on devising and implementing

257
00:11:29,070 --> 00:11:31,690
the integration of some
of these building blocks

258
00:11:31,690 --> 00:11:35,800
into the WordPress
core platform, OK?

259
00:11:35,800 --> 00:11:39,220
And we emphasize the
requirement of doing

260
00:11:39,220 --> 00:11:43,390
that in a way that is seamlessly
integrated with how WordPress

261
00:11:43,390 --> 00:11:45,080
worked in the first place.

262
00:11:45,080 --> 00:11:48,220
So I would like to call my
teammate Weston to tell us more

263
00:11:48,220 --> 00:11:50,512
where we are in this effort.

264
00:11:50,512 --> 00:11:52,898
[APPLAUSE]

265
00:11:52,898 --> 00:11:53,398


266
00:11:53,398 --> 00:11:56,770
WESTON RUTER: Gracias, Alberto.

267
00:11:56,770 --> 00:11:59,430
Yeah, Surma certainly did
build a WordPress theme

268
00:11:59,430 --> 00:12:01,140
that did a lot of things.

269
00:12:01,140 --> 00:12:04,950
And he had a service worker
that was installed by the theme.

270
00:12:04,950 --> 00:12:07,530
And that service worker powered
things like offline reading

271
00:12:07,530 --> 00:12:09,240
and background sync.

272
00:12:09,240 --> 00:12:11,580
It facilitated smooth
page transitions

273
00:12:11,580 --> 00:12:12,960
as you navigate around the site.

274
00:12:12,960 --> 00:12:16,220
And while his proof of
concept was compelling,

275
00:12:16,220 --> 00:12:17,890
he faced a lot of challenges.

276
00:12:17,890 --> 00:12:23,580
And it was because WordPress
didn't allow for doing things

277
00:12:23,580 --> 00:12:26,550
that he wanted to do.

278
00:12:26,550 --> 00:12:28,860
But these challenges are
not unique to WordPress.

279
00:12:28,860 --> 00:12:30,692
They are common to
other CMSes as well.

280
00:12:30,692 --> 00:12:32,400
So there are a few
fundamental challenges

281
00:12:32,400 --> 00:12:33,870
that needed to be addressed.

282
00:12:33,870 --> 00:12:35,400
The first challenge
is that there

283
00:12:35,400 --> 00:12:40,460
needs to be a central
API in the CMS

284
00:12:40,460 --> 00:12:42,860
for generating a service worker.

285
00:12:42,860 --> 00:12:45,350
Because there wasn't
this in WordPress,

286
00:12:45,350 --> 00:12:47,870
the theme itself had to
generate the service worker.

287
00:12:47,870 --> 00:12:50,480
And this is a problem
because as with Highlander,

288
00:12:50,480 --> 00:12:53,987
there can only be one
service worker at a time.

289
00:12:53,987 --> 00:12:55,820
Multiple service workers
could be installed,

290
00:12:55,820 --> 00:12:57,290
but only one is active.

291
00:12:57,290 --> 00:12:59,690
And so a CMS like
WordPress needs

292
00:12:59,690 --> 00:13:03,370
to be able to generate that
service worker centrally.

293
00:13:03,370 --> 00:13:05,830
The next challenge is that
writing service worker logic

294
00:13:05,830 --> 00:13:11,140
can be complex and that the
CMS should provide abstractions

295
00:13:11,140 --> 00:13:14,110
as a part of it that eliminate
a lot of that boilerplate code

296
00:13:14,110 --> 00:13:17,410
that has to be repeated
over and over again.

297
00:13:17,410 --> 00:13:20,060
And the last challenge,
as Alberto referred to,

298
00:13:20,060 --> 00:13:25,800
is that WordPress extension
system, and other CMSes

299
00:13:25,800 --> 00:13:28,470
as well, don't have sandboxing.

300
00:13:28,470 --> 00:13:32,580
And so a theme or [? flagging ?]
can do things that make it

301
00:13:32,580 --> 00:13:35,100
difficult to maintain
advanced capabilities like

302
00:13:35,100 --> 00:13:36,180
the [? actual ?] model.

303
00:13:36,180 --> 00:13:38,040
So we implemented
abstractions in WordPress

304
00:13:38,040 --> 00:13:39,510
to solve these challenges.

305
00:13:39,510 --> 00:13:42,900
And what we did is applicable
to more than just WordPress.

306
00:13:42,900 --> 00:13:45,210
First of all, we integrated
the service worker API

307
00:13:45,210 --> 00:13:48,510
into WordPress so that themes
and plugins can each include

308
00:13:48,510 --> 00:13:52,020
their own service worker
logic and to be installed

309
00:13:52,020 --> 00:13:55,770
by the single service worker
that is generated by the CMS.

310
00:13:55,770 --> 00:13:58,704
But this is just the
base requirement.

311
00:13:58,704 --> 00:14:00,120
There also needs
to be, as I said,

312
00:14:00,120 --> 00:14:01,980
those abstractions
to make it easier

313
00:14:01,980 --> 00:14:04,200
to generate the complex
logic that is needed

314
00:14:04,200 --> 00:14:06,000
to power a service worker.

315
00:14:06,000 --> 00:14:12,390
So our integration includes
Workbox out of the box so that,

316
00:14:12,390 --> 00:14:14,460
as you've heard
about earlier today,

317
00:14:14,460 --> 00:14:17,520
you can take advantage
of all the complex logic

318
00:14:17,520 --> 00:14:20,640
for generating caching
strategies and other advanced

319
00:14:20,640 --> 00:14:23,850
functionality, like background
sync, that are part of Workbox,

320
00:14:23,850 --> 00:14:26,990
and so that you don't have
to reinvent the wheel.

321
00:14:26,990 --> 00:14:29,900
And since WordPress
developers have historically

322
00:14:29,900 --> 00:14:35,210
been PHP first developers, we
have included PHP abstraction

323
00:14:35,210 --> 00:14:40,580
that allows you to write
PHP instead of JavaScript

324
00:14:40,580 --> 00:14:42,470
so that you can
have a PHP call that

325
00:14:42,470 --> 00:14:46,200
gets translated into the
equivalent in JavaScript.

326
00:14:46,200 --> 00:14:49,600
To give you a sense for how
this API is used in WordPress,

327
00:14:49,600 --> 00:14:53,640
in this first example, you
can see a caching strategy

328
00:14:53,640 --> 00:14:56,520
being leveraged-- here,
staleWhileRevalidate--

329
00:14:56,520 --> 00:15:02,390
to match any request that is
made to the AMP project CDN

330
00:15:02,390 --> 00:15:05,530
so that it will be then served
from the cache while being

331
00:15:05,530 --> 00:15:07,620
updated in the background.

332
00:15:07,620 --> 00:15:12,250
And here, you can see a image
being precached by the service

333
00:15:12,250 --> 00:15:15,310
worker and then served
directly from the cache

334
00:15:15,310 --> 00:15:18,280
without hitting
the network at all.

335
00:15:18,280 --> 00:15:20,830
And if these two examples
here look familiar to you,

336
00:15:20,830 --> 00:15:23,510
then that is no mistake
because they're essentially

337
00:15:23,510 --> 00:15:25,930
PHP versions of what you
would be doing otherwise

338
00:15:25,930 --> 00:15:28,540
in JavaScript via Workbox.

339
00:15:28,540 --> 00:15:32,240
But if there is no abstraction
in PHP for you to do that,

340
00:15:32,240 --> 00:15:34,480
you can also hook directly
into the service worker

341
00:15:34,480 --> 00:15:37,570
to add your own arbitrary
JavaScript to do more advanced

342
00:15:37,570 --> 00:15:40,960
functionality, if needed.

343
00:15:40,960 --> 00:15:43,020
So given these service
worker capabilities,

344
00:15:43,020 --> 00:15:47,720
one common application
is the App Shell model.

345
00:15:47,720 --> 00:15:52,040
And App Shell facilitates
those seamless page transitions

346
00:15:52,040 --> 00:15:55,310
and offline interactions
that you often see inside

347
00:15:55,310 --> 00:15:57,890
of native applications.

348
00:15:57,890 --> 00:16:01,850
But making a App Shell is often
very difficult and challenging

349
00:16:01,850 --> 00:16:04,200
to do in WordPress because
themes and plugins can

350
00:16:04,200 --> 00:16:07,070
add absolutely anything to
the page, like I just said.

351
00:16:07,070 --> 00:16:10,460
And so this, again, is where
the AMP plugin plays a key role

352
00:16:10,460 --> 00:16:12,950
because it enforces those
constraints to make sure

353
00:16:12,950 --> 00:16:16,140
that the content behaves in a
way that doesn't break the App

354
00:16:16,140 --> 00:16:17,420
Shell model.

355
00:16:17,420 --> 00:16:19,220
And AMP is also
specifically designed

356
00:16:19,220 --> 00:16:23,966
to be embedded inside of
these kinds of experiences.

357
00:16:23,966 --> 00:16:25,340
Here is the
demonstration that we

358
00:16:25,340 --> 00:16:28,160
built that shows the
standard theme 2017,

359
00:16:28,160 --> 00:16:29,820
with a nice spinning
logo for fun.

360
00:16:29,820 --> 00:16:31,880
Keep watching that logo.

361
00:16:31,880 --> 00:16:36,830
Notice as I open the Nav menu
and start clicking around,

362
00:16:36,830 --> 00:16:39,080
the content is changing.

363
00:16:39,080 --> 00:16:43,250
But the logo keeps
spinning and is unchanged.

364
00:16:43,250 --> 00:16:46,760
The header Nav menu
remains expanded.

365
00:16:46,760 --> 00:16:50,431
And you don't lose that
context as you navigate around

366
00:16:50,431 --> 00:16:50,930
the site.

367
00:16:50,930 --> 00:16:53,830


368
00:16:53,830 --> 00:16:56,800
So it's a single page
application built in WordPress

369
00:16:56,800 --> 00:17:00,780
using a standard
theme as the basis.

370
00:17:00,780 --> 00:17:03,100
And we could do it just with
a minimal amount of code,

371
00:17:03,100 --> 00:17:06,490
thanks to the foundation
that the AMP plugin provides,

372
00:17:06,490 --> 00:17:08,670
and the AMP project as well.

373
00:17:08,670 --> 00:17:11,849
You can look at the pull
request on the AMP plugin repo

374
00:17:11,849 --> 00:17:13,950
to see more specifics
on how you can

375
00:17:13,950 --> 00:17:16,230
get started on your own themes.

376
00:17:16,230 --> 00:17:19,819
To give you a glimpse
of that, here you

377
00:17:19,819 --> 00:17:24,010
can see the theme just has
to declare theme support

378
00:17:24,010 --> 00:17:25,430
to enforce those constraints.

379
00:17:25,430 --> 00:17:29,762
To make sure that everything
is available in AMP,

380
00:17:29,762 --> 00:17:32,220
you have to make sure that the
whole theme is able to serve

381
00:17:32,220 --> 00:17:33,380
every page in AMP.

382
00:17:33,380 --> 00:17:34,740
So you add this to your theme.

383
00:17:34,740 --> 00:17:37,650


384
00:17:37,650 --> 00:17:41,024
Next, you indicate the
region in the template that

385
00:17:41,024 --> 00:17:43,190
contains the content that
dynamically changes as you

386
00:17:43,190 --> 00:17:46,280
navigate around the site.

387
00:17:46,280 --> 00:17:48,340
And lastly, you
tell the AMP plugin

388
00:17:48,340 --> 00:17:50,110
that you're opting
into App Shell.

389
00:17:50,110 --> 00:17:53,770
And then that then causes
the AMP plugin to generate

390
00:17:53,770 --> 00:17:56,830
the service worker logic
to precache the App Shell

391
00:17:56,830 --> 00:17:58,997
and to add the JavaScript
to the page that will then

392
00:17:58,997 --> 00:18:01,163
intercept the clicks, and
do the history management,

393
00:18:01,163 --> 00:18:02,140
and all that.

394
00:18:02,140 --> 00:18:05,259
And the bottom line here
is that the theme developer

395
00:18:05,259 --> 00:18:07,300
doesn't have to know the
complexities of building

396
00:18:07,300 --> 00:18:07,900
App Shell.

397
00:18:07,900 --> 00:18:12,620
They just extend what is
already in the platform.

398
00:18:12,620 --> 00:18:15,710
But a service worker is
applicable to more than just

399
00:18:15,710 --> 00:18:16,760
App Shell.

400
00:18:16,760 --> 00:18:19,740
It also is useful for other
advanced capabilities,

401
00:18:19,740 --> 00:18:23,610
including offline access.

402
00:18:23,610 --> 00:18:26,100
Often, if you've developed
a WordPress theme,

403
00:18:26,100 --> 00:18:28,990
you're familiar with
the 404.php template,

404
00:18:28,990 --> 00:18:32,340
which is used to serve a page
to the user when WordPress

405
00:18:32,340 --> 00:18:33,770
can't locate the site--

406
00:18:33,770 --> 00:18:38,430
the content that
you're trying to load.

407
00:18:38,430 --> 00:18:41,460
And in the same way, we have
extended WordPress's template

408
00:18:41,460 --> 00:18:44,040
system to introduce
an offline .php,

409
00:18:44,040 --> 00:18:47,400
which will then be served
to the user when the browser

410
00:18:47,400 --> 00:18:48,930
can't access the site.

411
00:18:48,930 --> 00:18:51,510
And so they get that
nice branded experience

412
00:18:51,510 --> 00:18:54,020
from the theme
without the dinosaur.

413
00:18:54,020 --> 00:18:57,170


414
00:18:57,170 --> 00:19:04,400
And to opt into caching pages
that you visited while online,

415
00:19:04,400 --> 00:19:07,790
you can opt into that
staleWhileRevalidate strategy

416
00:19:07,790 --> 00:19:10,460
for navigation
requests so that those

417
00:19:10,460 --> 00:19:14,070
will continue to be available
when you go offline.

418
00:19:14,070 --> 00:19:19,080
And lastly, service worker is
useful for commenting offline

419
00:19:19,080 --> 00:19:19,630
as well.

420
00:19:19,630 --> 00:19:24,560
So here, if I try to submit
a comment while online--

421
00:19:24,560 --> 00:19:26,920
or while offline--
then the service worker

422
00:19:26,920 --> 00:19:29,230
can intercept that
request and then replay it

423
00:19:29,230 --> 00:19:32,350
when the user comes back
online via background sync.

424
00:19:32,350 --> 00:19:33,850
And here, the
developer doesn't have

425
00:19:33,850 --> 00:19:38,410
to do anything because it's just
part of the integration itself.

426
00:19:38,410 --> 00:19:44,310
So with that in mind, I'll
pass it back to Alberto

427
00:19:44,310 --> 00:19:46,590
to talk about the road ahead.

428
00:19:46,590 --> 00:19:49,040


429
00:19:49,040 --> 00:19:51,490
[APPLAUSE]

430
00:19:51,490 --> 00:19:52,960
ALBERTO MEDINA:
Thank you, Weston.

431
00:19:52,960 --> 00:19:56,020
This is so very good to see
all these things running.

432
00:19:56,020 --> 00:19:58,330
And we certainly have
made a lot of progress

433
00:19:58,330 --> 00:19:59,710
in the context of WordPress.

434
00:19:59,710 --> 00:20:02,540
And other CMSes have done
also a lot of progress.

435
00:20:02,540 --> 00:20:05,660
But we are still not
quite where we need to be.

436
00:20:05,660 --> 00:20:09,310
So in the context of
WordPress, the unplugging

437
00:20:09,310 --> 00:20:10,690
is available to you today.

438
00:20:10,690 --> 00:20:12,580
You can download it
from the GitHub link.

439
00:20:12,580 --> 00:20:15,896
So please download this
[INAUDIBLE] with your site.

440
00:20:15,896 --> 00:20:17,770
We are going to continue
expanding this work,

441
00:20:17,770 --> 00:20:21,400
integrating AMP content creation
into WordPress, specifically

442
00:20:21,400 --> 00:20:22,780
in the context of Gutenberg.

443
00:20:22,780 --> 00:20:26,410
That is the new editing
experience in that platform.

444
00:20:26,410 --> 00:20:28,870
In the area, you know, the
integration of PWA, the service

445
00:20:28,870 --> 00:20:32,020
workers, and all the PWA
capabilities into WordPress

446
00:20:32,020 --> 00:20:34,240
core, we have made
a lot of progress.

447
00:20:34,240 --> 00:20:37,210
Right now that functionality
is available in the form

448
00:20:37,210 --> 00:20:41,790
of a feature plugin that you
can also download and experiment

449
00:20:41,790 --> 00:20:43,229
if you are a
WordPress developer.

450
00:20:43,229 --> 00:20:45,520
And we are going to continue
working with the WordPress

451
00:20:45,520 --> 00:20:47,890
ecosystem to help them to
integrate these technologies

452
00:20:47,890 --> 00:20:50,710
into their work at all levels.

453
00:20:50,710 --> 00:20:54,040
Now, one aspect that we are
working that is very exciting

454
00:20:54,040 --> 00:20:58,660
is enabling content creators
to create content easily,

455
00:20:58,660 --> 00:21:04,060
taking advantage of new powerful
format, such as AMP Stories.

456
00:21:04,060 --> 00:21:06,310
As you can see in this
example, AMP Stories

457
00:21:06,310 --> 00:21:10,330
is a mobile-focused format for
delivering rich information

458
00:21:10,330 --> 00:21:14,320
in terms of visually rich
and tap-through stories.

459
00:21:14,320 --> 00:21:15,880
We are building an
AMP Stories editor

460
00:21:15,880 --> 00:21:18,160
for WordPress, which
is also integrated

461
00:21:18,160 --> 00:21:20,580
with Gutenberg, the new editing
experience of WordPress.

462
00:21:20,580 --> 00:21:23,260
To give you a glimpse of
where we are in this work,

463
00:21:23,260 --> 00:21:26,800
these that you see here is
all the Gutenberg editing

464
00:21:26,800 --> 00:21:27,514
experience.

465
00:21:27,514 --> 00:21:28,930
And the good thing
about Gutenberg

466
00:21:28,930 --> 00:21:32,440
is that everything
corresponds to a blog.

467
00:21:32,440 --> 00:21:35,980
And that design premise
lends itself very well

468
00:21:35,980 --> 00:21:39,410
to create AMP Stories that
also form my component.

469
00:21:39,410 --> 00:21:42,790
So the goal of the editor is
to allow users to manipulate

470
00:21:42,790 --> 00:21:44,350
all the components
of an AMP Stories,

471
00:21:44,350 --> 00:21:46,990
control the
parameters, and so on.

472
00:21:46,990 --> 00:21:49,480
We want powerful content
formats like this

473
00:21:49,480 --> 00:21:51,909
to become available
across all CMSes.

474
00:21:51,909 --> 00:21:53,950
And one interesting
development that is happening

475
00:21:53,950 --> 00:21:55,930
is that Gutenberg
is being imported

476
00:21:55,930 --> 00:21:59,882
to Drupal, which is another
popular open-source CMS.

477
00:21:59,882 --> 00:22:01,340
and this is great
because then they

478
00:22:01,340 --> 00:22:03,910
are going to be able to take
advantage of this editor

479
00:22:03,910 --> 00:22:04,450
right away.

480
00:22:04,450 --> 00:22:07,210
So much more on this
will be coming next year.

481
00:22:07,210 --> 00:22:09,430
So stay tuned.

482
00:22:09,430 --> 00:22:13,270
So to conclude, I can say that
the CMS space is moving forward

483
00:22:13,270 --> 00:22:15,700
steadily along the
progressive web road.

484
00:22:15,700 --> 00:22:18,580
Google is working and
supporting many of CMS platforms

485
00:22:18,580 --> 00:22:21,430
to help them advance
in this path.

486
00:22:21,430 --> 00:22:25,000
And we are seeing excellent
results on some fronts.

487
00:22:25,000 --> 00:22:26,170
Here, we have some examples.

488
00:22:26,170 --> 00:22:29,690
Drupal, which I mentioned, is
another popular open-source

489
00:22:29,690 --> 00:22:30,690
CMS.

490
00:22:30,690 --> 00:22:34,090
Their developer communities
is working on the AMP and PWA

491
00:22:34,090 --> 00:22:34,616
modules.

492
00:22:34,616 --> 00:22:35,740
They are available in-site.

493
00:22:35,740 --> 00:22:38,190
So they are working
on enhancing them.

494
00:22:38,190 --> 00:22:40,720
Magento, which is a popular
e-commerce platform,

495
00:22:40,720 --> 00:22:43,570
they are releasing
Magento 2.3 this month.

496
00:22:43,570 --> 00:22:45,940
And that release
includes PWS Studio,

497
00:22:45,940 --> 00:22:49,000
that is a set of
guidelines and tools

498
00:22:49,000 --> 00:22:52,150
to be able to create awesome web
experience in their platform.

499
00:22:52,150 --> 00:22:55,450
Adobe Experience Manager,
which is a popular CMS

500
00:22:55,450 --> 00:22:57,640
in the enterprise arena--

501
00:22:57,640 --> 00:23:00,100
they have allowed the
creation of and publishing

502
00:23:00,100 --> 00:23:03,250
of single-page applications
directly from the page editor.

503
00:23:03,250 --> 00:23:05,650
And they are working on also
providing service worker

504
00:23:05,650 --> 00:23:10,060
integration natively in their
platform early next year.

505
00:23:10,060 --> 00:23:11,440
At the end we have EC-CUBE.

506
00:23:11,440 --> 00:23:14,574
That is one of the leading
e-commerce platforms in Japan.

507
00:23:14,574 --> 00:23:16,990
They are working with an agency
that is called [INAUDIBLE]

508
00:23:16,990 --> 00:23:19,780
on an AMP plugin that would
also enable the creation of AMP

509
00:23:19,780 --> 00:23:21,590
content on their platform.

510
00:23:21,590 --> 00:23:23,740
So we want to extend
special thanks

511
00:23:23,740 --> 00:23:26,054
to XWP, which is an excellent
WordPress agency that

512
00:23:26,054 --> 00:23:27,220
has been partnering with us.

513
00:23:27,220 --> 00:23:29,200
And they have made
awesome contributions

514
00:23:29,200 --> 00:23:31,930
in the areas of bringing
AMP and PWA technologies

515
00:23:31,930 --> 00:23:33,520
to the WordPress platform.

516
00:23:33,520 --> 00:23:35,110
With that, I want
to say thank you.

517
00:23:35,110 --> 00:23:38,490
And stay tuned for more progress
coming soon to a CMS near you.

518
00:23:38,490 --> 00:23:39,090
[APPLAUSE]

519
00:23:39,090 --> 00:23:42,440
[MUSIC PLAYING]

520
00:23:42,440 --> 00:23:49,326