1
00:00:00,000 --> 00:00:02,904
[MUSIC PLAYING]

2
00:00:02,904 --> 00:00:05,460


3
00:00:05,460 --> 00:00:06,960
GRAY NORTON: Good
morning, everyone,

4
00:00:06,960 --> 00:00:08,560
and welcome back from the break.

5
00:00:08,560 --> 00:00:09,060
It's true.

6
00:00:09,060 --> 00:00:10,374
My name is Gray.

7
00:00:10,374 --> 00:00:11,790
And I don't think
my parents could

8
00:00:11,790 --> 00:00:13,920
have known when they named
me all those years ago

9
00:00:13,920 --> 00:00:16,470
that my hair would
prematurely match my name

10
00:00:16,470 --> 00:00:18,580
or that I would be
a valid CSS color.

11
00:00:18,580 --> 00:00:22,180
So I give them a lot of credit.

12
00:00:22,180 --> 00:00:24,830
So I'm the engineering manager
for the Polymer Project

13
00:00:24,830 --> 00:00:25,500
at Chrome.

14
00:00:25,500 --> 00:00:28,530
And my team focuses mainly on
web components, and libraries,

15
00:00:28,530 --> 00:00:30,147
and tools to help you use them.

16
00:00:30,147 --> 00:00:31,980
But we're involved in
some other stuff, too.

17
00:00:31,980 --> 00:00:35,748
And today I'm here to talk about
something a little different.

18
00:00:35,748 --> 00:00:39,849


19
00:00:39,849 --> 00:00:42,140
Or maybe we'll just stand
here, and look at my picture.

20
00:00:42,140 --> 00:00:43,710
[CHUCKLES]

21
00:00:43,710 --> 00:00:46,620
So shockingly, we're going to
be talking about performance.

22
00:00:46,620 --> 00:00:48,360
As you may have
noticed, we're a wee bit

23
00:00:48,360 --> 00:00:50,710
obsessed with that topic.

24
00:00:50,710 --> 00:00:54,270
And by now, you've already heard
about speed tooling, and best

25
00:00:54,270 --> 00:00:56,430
practices for doing
everything faster,

26
00:00:56,430 --> 00:01:00,695
from loading, to rendering,
to responding to user input.

27
00:01:00,695 --> 00:01:02,070
But for the next
half hour, we're

28
00:01:02,070 --> 00:01:05,280
going to drill in on something
a little more specific.

29
00:01:05,280 --> 00:01:08,220
And that's a proven pattern for
improving performance that we'd

30
00:01:08,220 --> 00:01:11,010
like to see more of on the web.

31
00:01:11,010 --> 00:01:14,220
[INAUDIBLE] mentioned
in yesterday's keynote

32
00:01:14,220 --> 00:01:16,350
that today's web
platform is really

33
00:01:16,350 --> 00:01:18,180
a high-performance machine.

34
00:01:18,180 --> 00:01:20,610
And it's way faster in
almost every way than it

35
00:01:20,610 --> 00:01:23,260
was even a few years ago.

36
00:01:23,260 --> 00:01:26,290
But there are still some
surefire ways to slow it down.

37
00:01:26,290 --> 00:01:30,110
And one of those ways is just
trying to render too much.

38
00:01:30,110 --> 00:01:31,910
Especially on low-end
mobile devices,

39
00:01:31,910 --> 00:01:33,820
you can bring
performance to a crawl

40
00:01:33,820 --> 00:01:36,210
by piling on too much DOM.

41
00:01:36,210 --> 00:01:39,520
And sadly, there are key parts
of the rendering process,

42
00:01:39,520 --> 00:01:42,669
like styling and layout, that
just take longer the more nodes

43
00:01:42,669 --> 00:01:43,585
you have in your page.

44
00:01:43,585 --> 00:01:46,530


45
00:01:46,530 --> 00:01:49,070
So for a certain class
of performance problems,

46
00:01:49,070 --> 00:01:51,530
the best thing you can
do to speed things up

47
00:01:51,530 --> 00:01:53,480
is to lighten your
load, minimize

48
00:01:53,480 --> 00:01:56,670
the number of DOM nodes you have
on the page at any given time.

49
00:01:56,670 --> 00:01:58,750
And there are various ways
to do this, of course.

50
00:01:58,750 --> 00:02:00,500
But one of the simplest
and most effective

51
00:02:00,500 --> 00:02:05,340
is to adopt a pattern
called virtual scrolling.

52
00:02:05,340 --> 00:02:08,280
So for the last several months,
a couple of members of my team

53
00:02:08,280 --> 00:02:10,470
have teamed up with some
of our Chrome colleagues

54
00:02:10,470 --> 00:02:13,380
and some other folks inside
and outside of Google

55
00:02:13,380 --> 00:02:15,150
to explore what it
might look like to add

56
00:02:15,150 --> 00:02:19,650
first-class virtual scrolling
support to the web platform.

57
00:02:19,650 --> 00:02:22,720
Today I'd like to share what
we've come up with so far.

58
00:02:22,720 --> 00:02:24,720
It's early, but we're
pretty excited about where

59
00:02:24,720 --> 00:02:25,636
the project is headed.

60
00:02:25,636 --> 00:02:27,979


61
00:02:27,979 --> 00:02:29,520
We'll start with a
quick introduction

62
00:02:29,520 --> 00:02:31,890
to what virtual scrolling
is and how it's currently

63
00:02:31,890 --> 00:02:35,114
being used on and off the web.

64
00:02:35,114 --> 00:02:37,280
And then we'll take a closer
look at the performance

65
00:02:37,280 --> 00:02:39,950
problems we're trying to
addressing, seeing firsthand

66
00:02:39,950 --> 00:02:44,880
how too much DOM can impact the
responsiveness of your pages.

67
00:02:44,880 --> 00:02:49,160
Next, we'll talk briefly about
the approach we're taking,

68
00:02:49,160 --> 00:02:52,729
and we'll show you what
we've come up with so far.

69
00:02:52,729 --> 00:02:54,770
And then finally, we'll
look ahead to what's next

70
00:02:54,770 --> 00:02:58,957
and how you can get involved
if you're interested.

71
00:02:58,957 --> 00:03:00,540
So without further
ado, let's see what

72
00:03:00,540 --> 00:03:02,580
virtual scrolling is all about.

73
00:03:02,580 --> 00:03:04,530
For the sake of
comparison, first we'll

74
00:03:04,530 --> 00:03:06,030
look at ordinary scrolling.

75
00:03:06,030 --> 00:03:08,010
So the blue box here
is our viewport.

76
00:03:08,010 --> 00:03:10,290
And as you can
see, as we scroll,

77
00:03:10,290 --> 00:03:12,900
the document moves behind the
viewport revealing content

78
00:03:12,900 --> 00:03:14,160
further up or down.

79
00:03:14,160 --> 00:03:17,010
But notice that all the content
was present from the start.

80
00:03:17,010 --> 00:03:20,900
The only thing that
changes is what we see.

81
00:03:20,900 --> 00:03:23,870
Now here's the same page
in a virtual scroller.

82
00:03:23,870 --> 00:03:27,080
As you'll see, only part of the
content exists on the document.

83
00:03:27,080 --> 00:03:30,440
As we scroll, nodes are
dynamically added and removed

84
00:03:30,440 --> 00:03:32,920
keeping just enough
to fill the viewport.

85
00:03:32,920 --> 00:03:34,730
Nodes is an obvious
one at load times,

86
00:03:34,730 --> 00:03:37,280
since we only need to
render one screenfull.

87
00:03:37,280 --> 00:03:39,410
But as we'll see, virtual
scrolling actually

88
00:03:39,410 --> 00:03:41,150
also improves
performance in other ways

89
00:03:41,150 --> 00:03:42,358
that might not be as obvious.

90
00:03:42,358 --> 00:03:45,340


91
00:03:45,340 --> 00:03:48,780
So when does it make sense
to use virtual scrolling?

92
00:03:48,780 --> 00:03:50,520
It's clearly a natural
fit for anytime

93
00:03:50,520 --> 00:03:52,380
you need to display
a lot of data

94
00:03:52,380 --> 00:03:54,480
in a list or table
form-- for example,

95
00:03:54,480 --> 00:03:57,280
like this address book.

96
00:03:57,280 --> 00:04:00,170
And also, it's an
obvious call for content

97
00:04:00,170 --> 00:04:03,890
feeds in cases like
social media or messaging.

98
00:04:03,890 --> 00:04:06,669


99
00:04:06,669 --> 00:04:09,210
But feeds have started showing
up in less traditional places,

100
00:04:09,210 --> 00:04:09,720
too.

101
00:04:09,720 --> 00:04:11,940
So some publishers have
started stitching together

102
00:04:11,940 --> 00:04:14,340
articles in a way
that takes advantage

103
00:04:14,340 --> 00:04:16,920
of the low friction
of scrolling.

104
00:04:16,920 --> 00:04:19,576
And this may not look like your
garden-variety infinite list.

105
00:04:19,576 --> 00:04:21,450
But nonetheless, it's
absolutely a case where

106
00:04:21,450 --> 00:04:24,440
virtual scrolling can help.

107
00:04:24,440 --> 00:04:26,210
And for that matter,
we actually think

108
00:04:26,210 --> 00:04:27,830
there's a strong
argument to be made

109
00:04:27,830 --> 00:04:31,850
for looking at virtual
scrolling in cases beyond lists

110
00:04:31,850 --> 00:04:33,440
and feeds.

111
00:04:33,440 --> 00:04:35,000
A single piece of
long-form content,

112
00:04:35,000 --> 00:04:37,040
like this Wikipedia
article, might easily

113
00:04:37,040 --> 00:04:39,370
contain tens of
thousands of nodes.

114
00:04:39,370 --> 00:04:41,360
And the same techniques
that we use for lists

115
00:04:41,360 --> 00:04:43,480
can also help us keep
the weight of documents

116
00:04:43,480 --> 00:04:44,480
like this under control.

117
00:04:44,480 --> 00:04:47,810


118
00:04:47,810 --> 00:04:50,360
So virtual scrolling isn't
a new idea, of course.

119
00:04:50,360 --> 00:04:53,150
It's widely used on
native mobile platforms.

120
00:04:53,150 --> 00:04:56,240
In fact, both iOS and
Android put virtualized views

121
00:04:56,240 --> 00:04:58,514
front and center in
their SDKs, making

122
00:04:58,514 --> 00:04:59,930
this one of the
first concepts you

123
00:04:59,930 --> 00:05:03,670
learn as a new developer
on one of those platforms.

124
00:05:03,670 --> 00:05:06,050
And this is a big part of
why native mobile apps tend

125
00:05:06,050 --> 00:05:07,850
to feel fast.

126
00:05:07,850 --> 00:05:10,370
A basic native view is actually
heavier than the equivalent

127
00:05:10,370 --> 00:05:11,360
chunk of DOM.

128
00:05:11,360 --> 00:05:14,030
But the mainstream use
of virtual scrolling

129
00:05:14,030 --> 00:05:16,580
on platforms like these
helps keep performance line.

130
00:05:16,580 --> 00:05:19,627


131
00:05:19,627 --> 00:05:21,460
Now you might be thinking,
virtual scrolling

132
00:05:21,460 --> 00:05:22,990
isn't new to the web, either.

133
00:05:22,990 --> 00:05:24,500
And you'd be right.

134
00:05:24,500 --> 00:05:27,310
There are popular and effective
virtual scrolling solutions

135
00:05:27,310 --> 00:05:29,720
for all the top
frameworks, including,

136
00:05:29,720 --> 00:05:32,740
among others, react-virtualized,
and its younger sibling

137
00:05:32,740 --> 00:05:36,280
react-window, the
virtual-scroll-viewport

138
00:05:36,280 --> 00:05:40,385
in the Angular Material CDK,
and the view-virtual-scroller

139
00:05:40,385 --> 00:05:40,885
library.

140
00:05:40,885 --> 00:05:44,266


141
00:05:44,266 --> 00:05:45,640
But these solutions
are currently

142
00:05:45,640 --> 00:05:48,800
getting by without much
help from the web platform.

143
00:05:48,800 --> 00:05:51,970
So in the age-old tradition
of paving cow paths,

144
00:05:51,970 --> 00:05:53,560
we asked ourselves,
what might it

145
00:05:53,560 --> 00:05:56,680
look like for the web to offer
first-class virtual scrolling

146
00:05:56,680 --> 00:05:57,280
support?

147
00:05:57,280 --> 00:05:59,600
How could we make things better?

148
00:05:59,600 --> 00:06:02,970
And we came up with a few ideas.

149
00:06:02,970 --> 00:06:05,540
First, virtualization
generally means

150
00:06:05,540 --> 00:06:08,219
you can't link to locations
within the same document

151
00:06:08,219 --> 00:06:10,760
since the browser can't scroll
to a node that's not currently

152
00:06:10,760 --> 00:06:11,780
on the DOM.

153
00:06:11,780 --> 00:06:14,450
Now, this may not be an
issue for many use cases.

154
00:06:14,450 --> 00:06:17,240
You don't see a lot of links
between address book entries,

155
00:06:17,240 --> 00:06:18,500
for example.

156
00:06:18,500 --> 00:06:20,412
But in other cases,
it is a big deal,

157
00:06:20,412 --> 00:06:22,370
and it breaks a fundamental
feature of the web.

158
00:06:22,370 --> 00:06:25,340


159
00:06:25,340 --> 00:06:27,585
And there's a similar problem
with the browsers Find

160
00:06:27,585 --> 00:06:29,756
in Page feature,
which only sees text

161
00:06:29,756 --> 00:06:30,880
if it's present in the DOM.

162
00:06:30,880 --> 00:06:33,420


163
00:06:33,420 --> 00:06:35,550
And then there's
search friendliness.

164
00:06:35,550 --> 00:06:38,500
Since virtualized content
is added on the fly,

165
00:06:38,500 --> 00:06:41,777
it's not generally visible
to search engine crawlers.

166
00:06:41,777 --> 00:06:43,860
And again, this isn't
relevant for every use case.

167
00:06:43,860 --> 00:06:45,360
But we'd love to
get the performance

168
00:06:45,360 --> 00:06:47,610
benefits of virtual
scrolling without sacrificing

169
00:06:47,610 --> 00:06:51,090
indexability.

170
00:06:51,090 --> 00:06:52,890
Finally, and maybe
most importantly,

171
00:06:52,890 --> 00:06:54,420
we'd like to see
if we can greatly

172
00:06:54,420 --> 00:06:56,190
increase the amount
of virtualization that

173
00:06:56,190 --> 00:06:59,065
happens on the web by adding
platform-level support.

174
00:06:59,065 --> 00:07:01,440
While you could do it today,
virtual scrolling on the web

175
00:07:01,440 --> 00:07:03,150
is basically a fringe feature.

176
00:07:03,150 --> 00:07:04,819
You have to discover
you need it,

177
00:07:04,819 --> 00:07:07,110
and then you have to jump
through some hoops to get it.

178
00:07:07,110 --> 00:07:08,400
We'd like to put it
front and center--

179
00:07:08,400 --> 00:07:09,870
the way it is in mobile SDKs--

180
00:07:09,870 --> 00:07:12,120
making it easier to
discover and easier to use.

181
00:07:12,120 --> 00:07:17,780


182
00:07:17,780 --> 00:07:20,780
OK, so we've talked about
what virtual scrolling is

183
00:07:20,780 --> 00:07:23,430
and why we're interested in
adding it to the web platform.

184
00:07:23,430 --> 00:07:25,400
But to really understand the
nature of the performance

185
00:07:25,400 --> 00:07:26,960
problems we're trying
to solve, it'll

186
00:07:26,960 --> 00:07:28,210
help to look at some examples.

187
00:07:28,210 --> 00:07:31,520


188
00:07:31,520 --> 00:07:33,980
Since problems are the
worst on low-end devices,

189
00:07:33,980 --> 00:07:37,560
we'll use a typical Android
Go phone for this exercise.

190
00:07:37,560 --> 00:07:40,460
So I actually recorded a bunch
of real-world interactions

191
00:07:40,460 --> 00:07:41,272
for this talk.

192
00:07:41,272 --> 00:07:43,730
But I wasn't super happy with
the quality of the recording.

193
00:07:43,730 --> 00:07:47,780
So I ended up creating dramatic
reenactments in Dev Tools

194
00:07:47,780 --> 00:07:50,050
with CPU throttling turned on.

195
00:07:50,050 --> 00:07:51,800
But what you'll see
here is representative

196
00:07:51,800 --> 00:07:53,300
of the performance
on a real device.

197
00:07:53,300 --> 00:07:55,532
And I'd be happy to show
you on the device itself

198
00:07:55,532 --> 00:07:56,990
if you come find
me after the talk.

199
00:07:56,990 --> 00:08:02,050


200
00:08:02,050 --> 00:08:05,470
OK, so first, we'll look at
how the size of the document

201
00:08:05,470 --> 00:08:07,390
impacts rendering
and what that means

202
00:08:07,390 --> 00:08:10,095
for responding to user
interactions and content

203
00:08:10,095 --> 00:08:10,595
updates.

204
00:08:10,595 --> 00:08:13,340


205
00:08:13,340 --> 00:08:15,480
So I created a simple
example to demonstrate.

206
00:08:15,480 --> 00:08:18,040
It's a bit contrived, but it
exercises the browser engine

207
00:08:18,040 --> 00:08:20,650
in the same way as
the real pages do.

208
00:08:20,650 --> 00:08:23,330
So this mocked-up content feed
has just five items in it.

209
00:08:23,330 --> 00:08:24,940
And it performs pretty well.

210
00:08:24,940 --> 00:08:28,300
You'll see it has advanced
features like a dark mode

211
00:08:28,300 --> 00:08:30,700
and a compact layout mode.

212
00:08:30,700 --> 00:08:33,340
And these are all made just
using standard CSS techniques

213
00:08:33,340 --> 00:08:35,231
changing classes.

214
00:08:35,231 --> 00:08:36,980
And then lastly, we
have this slider here,

215
00:08:36,980 --> 00:08:40,600
which lets us increase or
decrease the size of the items

216
00:08:40,600 --> 00:08:43,000
by changing the base font
size in the document, which

217
00:08:43,000 --> 00:08:45,700
is a technique that many
of you have probably used.

218
00:08:45,700 --> 00:08:48,340
And layouts or the
items themselves

219
00:08:48,340 --> 00:08:52,709
are based on [INAUDIBLE] so
that the whole thing scales.

220
00:08:52,709 --> 00:08:54,500
As you can see, this
performed pretty well.

221
00:08:54,500 --> 00:08:57,235
But again, it's only five items.

222
00:08:57,235 --> 00:08:58,860
So let's see what
happens if we bump up

223
00:08:58,860 --> 00:09:00,366
to 50 items on our feed.

224
00:09:00,366 --> 00:09:02,490
So I'm scrolling here to
show there's more content.

225
00:09:02,490 --> 00:09:04,480
But don't focus on the
scrolling performance.

226
00:09:04,480 --> 00:09:05,896
We'll talk about
that in a minute.

227
00:09:05,896 --> 00:09:08,250
For now, we want to focus
on the other interactions.

228
00:09:08,250 --> 00:09:10,020
You'll notice I added
a jank indicator.

229
00:09:10,020 --> 00:09:14,280
So the screen flashes red
when rendering gets slow.

230
00:09:14,280 --> 00:09:16,410
And we're not too
bad here at 50 items

231
00:09:16,410 --> 00:09:18,810
still, although there are
noticeable delays for the mode

232
00:09:18,810 --> 00:09:19,500
switches.

233
00:09:19,500 --> 00:09:21,720
And then you'll see
there's some sluggishness

234
00:09:21,720 --> 00:09:23,040
as we start moving the slider.

235
00:09:23,040 --> 00:09:31,610


236
00:09:31,610 --> 00:09:33,620
But where we really
start feeling the pain

237
00:09:33,620 --> 00:09:36,290
is when we get up to
500 times or more.

238
00:09:36,290 --> 00:09:38,000
So the lagginess
in this example is

239
00:09:38,000 --> 00:09:41,570
going to be impossible to miss.

240
00:09:41,570 --> 00:09:43,020
So you'll notice
that, when we go

241
00:09:43,020 --> 00:09:46,640
to dark mode or compact mode,
there's a very noticeable lag.

242
00:09:46,640 --> 00:09:49,790


243
00:09:49,790 --> 00:09:53,540
And the slider is going
to be virtually unusable,

244
00:09:53,540 --> 00:09:54,680
it's so slow to update.

245
00:09:54,680 --> 00:09:57,960


246
00:09:57,960 --> 00:09:59,460
If anything, it
actually feels worse

247
00:09:59,460 --> 00:10:00,626
on the real phone than this.

248
00:10:00,626 --> 00:10:03,530


249
00:10:03,530 --> 00:10:05,330
So again, this example
is a bit contrived.

250
00:10:05,330 --> 00:10:07,410
You may not do exactly
this on your page.

251
00:10:07,410 --> 00:10:09,825
But the effects it
illustrates are very real.

252
00:10:09,825 --> 00:10:13,290
When you're rendering
any content on your page,

253
00:10:13,290 --> 00:10:16,340
whether it's in response to user
interactions or changing data,

254
00:10:16,340 --> 00:10:19,220
it gets much slower as
your document gets bigger.

255
00:10:19,220 --> 00:10:21,770
And on devices like this,
it can kill your page.

256
00:10:21,770 --> 00:10:25,910


257
00:10:25,910 --> 00:10:29,080
So let's jump ahead of
it, and see how much

258
00:10:29,080 --> 00:10:30,860
virtual scrolling might help.

259
00:10:30,860 --> 00:10:32,500
So this is exactly
the same page with

260
00:10:32,500 --> 00:10:34,660
our work-in-progress
virtual scroller swapped

261
00:10:34,660 --> 00:10:36,150
in for the scrolling region.

262
00:10:36,150 --> 00:10:38,140
And we've bumped all the
way up to 5,000 items.

263
00:10:38,140 --> 00:10:39,931
But of course, only a
small effect fraction

264
00:10:39,931 --> 00:10:42,421
are actually in the
document at any given time.

265
00:10:42,421 --> 00:10:44,170
And as you can see,
we're pretty much back

266
00:10:44,170 --> 00:10:46,840
to the same performance we had
in our original five-item list.

267
00:10:46,840 --> 00:10:51,740
And this is essentially how it
feels on the phone, as well.

268
00:10:51,740 --> 00:10:54,940
And remember, this is a very
low-powered Android Go device.

269
00:10:54,940 --> 00:11:00,750


270
00:11:00,750 --> 00:11:04,170
Next, let's see how virtualizing
might help us that load time.

271
00:11:04,170 --> 00:11:06,360
So a quick caveat about this--

272
00:11:06,360 --> 00:11:08,520
load time performance, how
quickly we get something

273
00:11:08,520 --> 00:11:10,800
on screen, how quickly
we make it interactive,

274
00:11:10,800 --> 00:11:12,240
depends on a lot of factors.

275
00:11:12,240 --> 00:11:15,570
And virtual scrolling doesn't
directly impact many of them.

276
00:11:15,570 --> 00:11:18,870
But to the extent that styling
and layout are slowing things

277
00:11:18,870 --> 00:11:21,890
down at load time, virtual
scrolling can definitely help.

278
00:11:21,890 --> 00:11:24,550


279
00:11:24,550 --> 00:11:27,010
So being the big web
nerds that we are,

280
00:11:27,010 --> 00:11:30,530
we'll use the single-page
HTML spec doc as an example.

281
00:11:30,530 --> 00:11:32,530
So this thing is massive,
somewhere on the order

282
00:11:32,530 --> 00:11:34,600
of a million words, I'm told.

283
00:11:34,600 --> 00:11:36,670
And it's notoriously
slow to load.

284
00:11:36,670 --> 00:11:39,730
So on my Android Go device,
with a "good but not great"

285
00:11:39,730 --> 00:11:42,850
network connection-- because
I'd gone over my data allowance

286
00:11:42,850 --> 00:11:44,650
for the month--

287
00:11:44,650 --> 00:11:49,620
it took about seven seconds
to get something on screen.

288
00:11:49,620 --> 00:11:54,050
So for comparison, we've
built a virtual scrolling

289
00:11:54,050 --> 00:11:56,810
version of this page out of
duct tape and baling wire.

290
00:11:56,810 --> 00:11:59,990
Basically, it loads the original
dock into a hidden iframe.

291
00:11:59,990 --> 00:12:01,850
And then it populates
the virtual scroller

292
00:12:01,850 --> 00:12:03,706
as the nodes stream
into the iframe.

293
00:12:03,706 --> 00:12:05,580
And you wouldn't build
a real thing this way.

294
00:12:05,580 --> 00:12:06,996
But it's an
interesting test case.

295
00:12:06,996 --> 00:12:08,970
And it illustrates the impact.

296
00:12:08,970 --> 00:12:12,230
So as this visualization shows,
we got something on screen

297
00:12:12,230 --> 00:12:13,160
much faster--

298
00:12:13,160 --> 00:12:15,470
just over three seconds
instead of seven--

299
00:12:15,470 --> 00:12:18,250
and it actually gets
even better from there.

300
00:12:18,250 --> 00:12:21,590
The original version on
this Android Go phone

301
00:12:21,590 --> 00:12:25,340
was suffering from scroll
jank for well over a minute

302
00:12:25,340 --> 00:12:26,690
after I started loading it.

303
00:12:26,690 --> 00:12:29,750
Whereas, the virtual scrolling
version is usable right away.

304
00:12:29,750 --> 00:12:32,420
As you scroll,
there's occasionally

305
00:12:32,420 --> 00:12:34,550
a delay as it updates.

306
00:12:34,550 --> 00:12:37,820
But unlike on the
original version,

307
00:12:37,820 --> 00:12:39,721
you're never sitting
and waiting for seconds

308
00:12:39,721 --> 00:12:40,970
while the screen is locked up.

309
00:12:40,970 --> 00:12:46,430


310
00:12:46,430 --> 00:12:48,380
OK, so before we move
on from performance,

311
00:12:48,380 --> 00:12:50,450
one quick word about
scrolling performance--

312
00:12:50,450 --> 00:12:52,850
because it seems a little
weird not to talk about that

313
00:12:52,850 --> 00:12:55,640
in a talk about scrolling.

314
00:12:55,640 --> 00:12:58,430
So because scrolling
is driven by the GPU,

315
00:12:58,430 --> 00:13:00,862
even on our low-end
Android Go device,

316
00:13:00,862 --> 00:13:02,570
you actually get pretty
decent scrolling.

317
00:13:02,570 --> 00:13:04,220
It scrolls at a
reliably high frame

318
00:13:04,220 --> 00:13:06,560
rate that actually looks
really good at normal scrolling

319
00:13:06,560 --> 00:13:07,670
speeds.

320
00:13:07,670 --> 00:13:10,840
But when you scroll quickly,
something funny happens.

321
00:13:10,840 --> 00:13:13,070
The screen blanks out,
goes completely white

322
00:13:13,070 --> 00:13:16,010
for long periods of time
while the rendering pipeline

323
00:13:16,010 --> 00:13:16,610
catches up.

324
00:13:16,610 --> 00:13:19,040
And this actually gets worse
as the size of the document

325
00:13:19,040 --> 00:13:20,600
increases, just like
the other performance

326
00:13:20,600 --> 00:13:21,891
problems we've been looking at.

327
00:13:21,891 --> 00:13:24,330


328
00:13:24,330 --> 00:13:28,100
So I did salvage one of my
original on-device recordings.

329
00:13:28,100 --> 00:13:30,212
And we'll look at it here.

330
00:13:30,212 --> 00:13:31,670
Our virtual scroller,
it turns out,

331
00:13:31,670 --> 00:13:34,190
significantly reduced
the blanking problem.

332
00:13:34,190 --> 00:13:35,719
It happens much less frequently.

333
00:13:35,719 --> 00:13:37,260
And when it does
happen, the renderer

334
00:13:37,260 --> 00:13:39,980
catches up much more quickly.

335
00:13:39,980 --> 00:13:42,770
The trade off is that scrolling
is mildly but noticeably less

336
00:13:42,770 --> 00:13:43,880
smooth overall.

337
00:13:43,880 --> 00:13:47,030
As you would expect,
doing JavaScript layout

338
00:13:47,030 --> 00:13:49,520
on a CPU-challenged
device like this

339
00:13:49,520 --> 00:13:51,510
does impact the frame rate.

340
00:13:51,510 --> 00:13:53,510
But as you can see
from the video,

341
00:13:53,510 --> 00:13:56,646
it's a very good experience
nonetheless, even

342
00:13:56,646 --> 00:13:57,770
on this low-powered device.

343
00:13:57,770 --> 00:14:02,040


344
00:14:02,040 --> 00:14:03,190
OK.

345
00:14:03,190 --> 00:14:04,960
So we know what
virtual scrolling is.

346
00:14:04,960 --> 00:14:06,970
We know why we want to
add it to the platform.

347
00:14:06,970 --> 00:14:10,780
And we've seen firsthand
why we need it.

348
00:14:10,780 --> 00:14:15,560
We see the performance issues
we're trying to overcome.

349
00:14:15,560 --> 00:14:19,120
So I want to talk for a
moment about the process

350
00:14:19,120 --> 00:14:21,100
that we're going through.

351
00:14:21,100 --> 00:14:24,730
Because it's actually not
that common in recent years

352
00:14:24,730 --> 00:14:26,950
for the web to add new
high-level features.

353
00:14:26,950 --> 00:14:33,070
And so we had a bunch of things
that we really want to do--

354
00:14:33,070 --> 00:14:34,750
and treat this
sort of as a Guinea

355
00:14:34,750 --> 00:14:39,040
pig for how we might add
to higher-level features.

356
00:14:39,040 --> 00:14:40,780
We'll start with some
basic principles.

357
00:14:40,780 --> 00:14:43,345


358
00:14:43,345 --> 00:14:44,720
Anytime you're
building something

359
00:14:44,720 --> 00:14:48,620
in the web platform itself,
as opposed to in user space,

360
00:14:48,620 --> 00:14:51,140
it's important to get the
very basic use cases right.

361
00:14:51,140 --> 00:14:54,350
Because web APIs live forever.

362
00:14:54,350 --> 00:14:57,890
And it's much more important
that we do the simple stuff

363
00:14:57,890 --> 00:14:59,600
right.

364
00:14:59,600 --> 00:15:01,520
So with that in mind,
we wanted to make sure

365
00:15:01,520 --> 00:15:02,930
that we learned from prior art.

366
00:15:02,930 --> 00:15:05,300
There's obviously virtual
scrollers on other platforms

367
00:15:05,300 --> 00:15:08,480
and plenty of good work
in the framework space.

368
00:15:08,480 --> 00:15:11,370
As I said, we want
to make it simple.

369
00:15:11,370 --> 00:15:13,047
We want the feature
to be easy to use.

370
00:15:13,047 --> 00:15:14,630
As much as possible,
we want you to be

371
00:15:14,630 --> 00:15:16,947
able to create web
content that you just

372
00:15:16,947 --> 00:15:18,530
happened to put in
a virtual stroller,

373
00:15:18,530 --> 00:15:21,170
as opposed to picking
up a brand new API

374
00:15:21,170 --> 00:15:22,850
and thinking
fundamentally differently

375
00:15:22,850 --> 00:15:24,099
about the way you build stuff.

376
00:15:24,099 --> 00:15:26,650


377
00:15:26,650 --> 00:15:28,840
Make it work-- it
sounds trite, and it is.

378
00:15:28,840 --> 00:15:31,720
But what I mean by this is
everything needs to work.

379
00:15:31,720 --> 00:15:32,650
We talked about links.

380
00:15:32,650 --> 00:15:34,000
We talked about finding page.

381
00:15:34,000 --> 00:15:35,770
It's critical that
accessibility works.

382
00:15:35,770 --> 00:15:38,440
We want tapping from
item to item to work.

383
00:15:38,440 --> 00:15:41,172


384
00:15:41,172 --> 00:15:42,630
And of course, it
needs to be fast.

385
00:15:42,630 --> 00:15:45,420
After all, this is a performance
problem we're trying to solve.

386
00:15:45,420 --> 00:15:48,321


387
00:15:48,321 --> 00:15:48,820
OK.

388
00:15:48,820 --> 00:15:52,350
The next thing we want to do
is we want to embrace layering.

389
00:15:52,350 --> 00:15:56,580
And we'll talk a little bit
more about what we mean by that.

390
00:15:56,580 --> 00:16:00,930
Nicole actually mentioned
this in the keynote.

391
00:16:00,930 --> 00:16:03,660
One of the important things we
want to do out of this process

392
00:16:03,660 --> 00:16:06,780
is identify and implement
any lower-level primitives

393
00:16:06,780 --> 00:16:08,730
that the browser may
be missing in order

394
00:16:08,730 --> 00:16:12,270
to support this
high-level use case.

395
00:16:12,270 --> 00:16:13,710
We also want to
enable this thing

396
00:16:13,710 --> 00:16:15,990
to be used right out of
the box, much like you use

397
00:16:15,990 --> 00:16:17,880
a vanilla HTML and JavaScript.

398
00:16:17,880 --> 00:16:20,460
We don't want you to have
to pick up a framework

399
00:16:20,460 --> 00:16:21,570
to do a virtual scrolling.

400
00:16:21,570 --> 00:16:24,990
We'd like you to be able to use
it on the web platform simply.

401
00:16:24,990 --> 00:16:27,420
But with that said,
we also want to give

402
00:16:27,420 --> 00:16:30,175
frameworks and libraries
a solid base to build on.

403
00:16:30,175 --> 00:16:31,800
And certainly, the
low-level primitives

404
00:16:31,800 --> 00:16:32,800
are things they can use.

405
00:16:32,800 --> 00:16:35,040
But ideally, we'd like
the virtual stroller

406
00:16:35,040 --> 00:16:37,920
itself to be something that they
can take, in whole or in part,

407
00:16:37,920 --> 00:16:41,370
and layer features on top of
for their own virtual scrolling

408
00:16:41,370 --> 00:16:44,340
solutions.

409
00:16:44,340 --> 00:16:46,850
And as I mentioned,
this is all really--

410
00:16:46,850 --> 00:16:48,560
with the idea of
blazing a trail.

411
00:16:48,560 --> 00:16:51,500
We think that there's a lot of
room to improve the developer

412
00:16:51,500 --> 00:16:53,990
experience and the user
experience of the web platform

413
00:16:53,990 --> 00:16:57,750
by adding some high-level
features in coming years.

414
00:16:57,750 --> 00:17:00,260
And with that in mind, we
want to use virtual scroller

415
00:17:00,260 --> 00:17:02,960
as sort of a lens
or a testing ground

416
00:17:02,960 --> 00:17:07,294
for us to examine what it means
to add new high-level features.

417
00:17:07,294 --> 00:17:09,829
And so we'll talk about
some of these things

418
00:17:09,829 --> 00:17:13,244
as we look at the
virtual stroller.

419
00:17:13,244 --> 00:17:14,619
So with those
principles in mind,

420
00:17:14,619 --> 00:17:16,710
we sat down to do our homework.

421
00:17:16,710 --> 00:17:18,910
And the first thing
we did was we set up

422
00:17:18,910 --> 00:17:21,819
what we called at that time
the infinite list study group.

423
00:17:21,819 --> 00:17:23,829
And we basically had
a bunch of people

424
00:17:23,829 --> 00:17:25,900
from across Chrome
who would get together

425
00:17:25,900 --> 00:17:27,130
once every couple of weeks.

426
00:17:27,130 --> 00:17:29,046
And each time, someone
would take the homework

427
00:17:29,046 --> 00:17:31,460
of looking at a particular
virtual scrolling solution

428
00:17:31,460 --> 00:17:32,530
and reporting back.

429
00:17:32,530 --> 00:17:33,920
And we would discuss it.

430
00:17:33,920 --> 00:17:36,620
And we'd learn about what
was working and what wasn't.

431
00:17:36,620 --> 00:17:40,262
And we documented all
this here on GitHub.

432
00:17:40,262 --> 00:17:41,720
Once we'd done that
for a while, we

433
00:17:41,720 --> 00:17:44,330
came up with a set
of requirements,

434
00:17:44,330 --> 00:17:47,340
and it was time
to start building.

435
00:17:47,340 --> 00:17:49,034
Now I don't know what this is.

436
00:17:49,034 --> 00:17:50,450
I think it's molding
or something.

437
00:17:50,450 --> 00:17:52,658
But it looks like something
I'd really like to build.

438
00:17:52,658 --> 00:17:55,100
So I put it on the slide.

439
00:17:55,100 --> 00:17:58,340
And we have the same sort of
love for virtual scroller.

440
00:17:58,340 --> 00:18:00,440
So once we started
implementation,

441
00:18:00,440 --> 00:18:02,010
we did that on GitHub, as well.

442
00:18:02,010 --> 00:18:03,676
And one of the things
you'll notice here

443
00:18:03,676 --> 00:18:05,210
is that virtual
scroller is being

444
00:18:05,210 --> 00:18:07,610
implemented in JavaScript.

445
00:18:07,610 --> 00:18:10,670
And this obviously is sort
of unusual for something

446
00:18:10,670 --> 00:18:13,910
that's under consideration
for a web platform API.

447
00:18:13,910 --> 00:18:18,410
It's not typically how
we build platform APIs.

448
00:18:18,410 --> 00:18:20,360
But this gets to the
layering concept.

449
00:18:20,360 --> 00:18:21,901
We wanted to make
sure that we didn't

450
00:18:21,901 --> 00:18:25,502
reserve any special powers
in adding these features.

451
00:18:25,502 --> 00:18:26,960
And one of the best
ways to do that

452
00:18:26,960 --> 00:18:30,290
is to develop things
on the same environment

453
00:18:30,290 --> 00:18:32,870
that framework and app
developers develop in.

454
00:18:32,870 --> 00:18:37,866


455
00:18:37,866 --> 00:18:39,740
So the next important
thing about the process

456
00:18:39,740 --> 00:18:41,750
is we wanted to be
in constant dialogue.

457
00:18:41,750 --> 00:18:43,370
We talked about the fact
that we're doing these things

458
00:18:43,370 --> 00:18:44,660
out in the open and GitHub.

459
00:18:44,660 --> 00:18:46,877
But also, we've been
talking to people all along.

460
00:18:46,877 --> 00:18:49,460
So we've been talking to other
browser vendors about the ideas

461
00:18:49,460 --> 00:18:51,830
behind virtual stroller
and the principles

462
00:18:51,830 --> 00:18:54,560
that we're trying to look at for
adding new high-level features.

463
00:18:54,560 --> 00:18:57,300
We've been talking to
framework and library authors.

464
00:18:57,300 --> 00:19:02,510
So along the way, we've talked
to members of the Angular team

465
00:19:02,510 --> 00:19:06,500
who were working on the
Angular Material stroller.

466
00:19:06,500 --> 00:19:09,110
We talked to the AMP team.

467
00:19:09,110 --> 00:19:12,860
We've talked to members of
the Ionic team who are working

468
00:19:12,860 --> 00:19:15,110
on their own virtual stroller.

469
00:19:15,110 --> 00:19:16,880
And we've talked
with Brian Vaughn,

470
00:19:16,880 --> 00:19:18,770
who's the author of
react-virtualized

471
00:19:18,770 --> 00:19:22,440
and react-window, as well.

472
00:19:22,440 --> 00:19:25,160
And we also have very active
discussions going on in GitHub.

473
00:19:25,160 --> 00:19:30,020
So it's important to us that
this process be carried out

474
00:19:30,020 --> 00:19:32,700
in the open and with the
input of the community,

475
00:19:32,700 --> 00:19:34,107
including frameworks.

476
00:19:34,107 --> 00:19:39,470


477
00:19:39,470 --> 00:19:40,124
OK.

478
00:19:40,124 --> 00:19:42,040
With that process as
backdrop, let's go ahead,

479
00:19:42,040 --> 00:19:46,140
and look at what we've built.

480
00:19:46,140 --> 00:19:48,810
So this is that example
we were looking at before.

481
00:19:48,810 --> 00:19:50,670
And I show it here
in Dev Tools just

482
00:19:50,670 --> 00:19:53,340
so you can see, as
we scroll, there

483
00:19:53,340 --> 00:19:58,030
are just a few items in
the DOM at any given time.

484
00:19:58,030 --> 00:20:00,420
And when we scroll, you'll
see them cycle in and out.

485
00:20:00,420 --> 00:20:03,760


486
00:20:03,760 --> 00:20:07,180
And so, even though we
have a list of 5,000 items

487
00:20:07,180 --> 00:20:09,430
here, at any given
time, we're only

488
00:20:09,430 --> 00:20:15,840
laying out, styling, rendering
a very small number of them.

489
00:20:15,840 --> 00:20:17,570
And as you can see,
the virtual scroller

490
00:20:17,570 --> 00:20:21,080
itself is a custom element.

491
00:20:21,080 --> 00:20:22,580
And let's see how
you would actually

492
00:20:22,580 --> 00:20:24,015
use that in vanilla style.

493
00:20:24,015 --> 00:20:27,880


494
00:20:27,880 --> 00:20:29,807
So starting from a
blank slate here,

495
00:20:29,807 --> 00:20:31,390
the first thing that
we're going to do

496
00:20:31,390 --> 00:20:34,690
is we're going to use the
browser's native module

497
00:20:34,690 --> 00:20:36,430
loader to import this.

498
00:20:36,430 --> 00:20:39,250
Now this is also a
new concept that we're

499
00:20:39,250 --> 00:20:41,770
trying out as part
of the way we're

500
00:20:41,770 --> 00:20:43,930
thinking about
higher-level APIs.

501
00:20:43,930 --> 00:20:47,710
Typically, browser APIs are
sort of baked into every page.

502
00:20:47,710 --> 00:20:48,460
You may use them.

503
00:20:48,460 --> 00:20:49,060
You may not.

504
00:20:49,060 --> 00:20:52,600
But there is a memory impact,
and the size of the browser

505
00:20:52,600 --> 00:20:54,730
is impacted.

506
00:20:54,730 --> 00:20:57,060
We'd like to explore
a pay-as-you-go model.

507
00:20:57,060 --> 00:20:59,750
And so we already have, in
the form of the module loader,

508
00:20:59,750 --> 00:21:06,250
a way to dynamically load
libraries and code at runtime.

509
00:21:06,250 --> 00:21:07,790
And so we're using that here.

510
00:21:07,790 --> 00:21:13,632
And you can see we have a
proposed syntax for requesting

511
00:21:13,632 --> 00:21:16,090
something that would be part
of a standard library provided

512
00:21:16,090 --> 00:21:16,869
by the browser.

513
00:21:16,869 --> 00:21:18,410
And I won't go into
the details here.

514
00:21:18,410 --> 00:21:21,170
But you can read about it.

515
00:21:21,170 --> 00:21:24,500
So once we've
imported it, we just

516
00:21:24,500 --> 00:21:29,250
put the virtual scroller
tag in our HTML document.

517
00:21:29,250 --> 00:21:32,164
And this is what you get
without doing anything more.

518
00:21:32,164 --> 00:21:34,080
You can see the virtual
scroller has a default

519
00:21:34,080 --> 00:21:40,350
size, much like for an iframe.

520
00:21:40,350 --> 00:21:42,390
And so it's not
doing anything yet.

521
00:21:42,390 --> 00:21:45,520
Let's make it do something.

522
00:21:45,520 --> 00:21:51,080
So first, ordinary querySelector
to find the virtual stroller.

523
00:21:51,080 --> 00:21:53,490
We're just going
to fetch some data.

524
00:21:53,490 --> 00:21:55,740
And then here's the first
bit of virtual scroller API.

525
00:21:55,740 --> 00:21:56,970
It's an item source.

526
00:21:56,970 --> 00:22:02,910
You can assign this
in an ordinary array,

527
00:22:02,910 --> 00:22:04,210
as we've done here.

528
00:22:04,210 --> 00:22:06,790
And then we'll call
our async function.

529
00:22:06,790 --> 00:22:09,600
And we get that, which probably
isn't exactly what we want,

530
00:22:09,600 --> 00:22:10,110
either.

531
00:22:10,110 --> 00:22:12,630
So we wanted the
virtual scrolling

532
00:22:12,630 --> 00:22:15,090
to do something by default.
And so what it does

533
00:22:15,090 --> 00:22:19,020
is it just takes the
item, and it tries

534
00:22:19,020 --> 00:22:21,450
to render it into the item.

535
00:22:21,450 --> 00:22:23,640
And in this case, it's a string.

536
00:22:23,640 --> 00:22:25,570
And it doesn't look very good.

537
00:22:25,570 --> 00:22:28,620
So let's fix that.

538
00:22:28,620 --> 00:22:32,990
So the next bit of API is
this update element hook.

539
00:22:32,990 --> 00:22:36,260
So here we're basically just
going to take the contact name

540
00:22:36,260 --> 00:22:39,170
and put that in
the text content.

541
00:22:39,170 --> 00:22:43,020
And there we have something
that looks much more useful.

542
00:22:43,020 --> 00:22:46,160
So just a few lines of code,
vanilla HTML, and JavaScript,

543
00:22:46,160 --> 00:22:47,570
and we have a virtual scroller.

544
00:22:47,570 --> 00:22:50,107


545
00:22:50,107 --> 00:22:51,815
So let's take a look
at one more example.

546
00:22:51,815 --> 00:22:55,170


547
00:22:55,170 --> 00:22:58,010
You notice the virtual
scroller initially was empty.

548
00:22:58,010 --> 00:23:00,710
And by default, it will just
create a div for each item.

549
00:23:00,710 --> 00:23:02,060
You can actually override that.

550
00:23:02,060 --> 00:23:03,476
In addition to the
update element,

551
00:23:03,476 --> 00:23:06,350
there's a create element
hook, and you can give it

552
00:23:06,350 --> 00:23:08,840
any kind of DOM you want.

553
00:23:08,840 --> 00:23:11,450
But you can also put a template
inside the virtual stroller.

554
00:23:11,450 --> 00:23:12,950
And whatever is
there will be what's

555
00:23:12,950 --> 00:23:16,080
instantiated for each item.

556
00:23:16,080 --> 00:23:17,210
So I'm going to go ahead.

557
00:23:17,210 --> 00:23:19,495
And in my update
element function,

558
00:23:19,495 --> 00:23:21,947
I'm going to assign the image.

559
00:23:21,947 --> 00:23:23,780
And then lastly, I'm
going to specify that I

560
00:23:23,780 --> 00:23:25,130
want a vertical grid layout.

561
00:23:25,130 --> 00:23:28,760
So out of the box, it supports
vertical, and horizontal,

562
00:23:28,760 --> 00:23:31,880
normal, and grid layouts.

563
00:23:31,880 --> 00:23:33,980
Layouts are actually
pluggable under the hood.

564
00:23:33,980 --> 00:23:37,190
It's TBD whether that
gets exposed in the API

565
00:23:37,190 --> 00:23:40,240
as it eventually ships.

566
00:23:40,240 --> 00:23:40,950
OK.

567
00:23:40,950 --> 00:23:43,410
So as I mentioned, we're
taking a layered approach.

568
00:23:43,410 --> 00:23:46,080
We're not building fancy
features like custom headers

569
00:23:46,080 --> 00:23:46,970
and things in.

570
00:23:46,970 --> 00:23:49,170
But it is important to us
that these things work.

571
00:23:49,170 --> 00:23:51,430
Because again, we want layering.

572
00:23:51,430 --> 00:23:54,300
So here's a case
where we have headers

573
00:23:54,300 --> 00:23:56,980
interspersed with list items.

574
00:23:56,980 --> 00:23:59,684
These are all examples that
you'll find in our GitHub repo.

575
00:23:59,684 --> 00:24:02,100
So the other thing is, it's
important-- we want to support

576
00:24:02,100 --> 00:24:04,210
various loading patterns.

577
00:24:04,210 --> 00:24:05,850
So this is a common
one, where it's

578
00:24:05,850 --> 00:24:09,180
sort of an infinite
scroll, and as you go,

579
00:24:09,180 --> 00:24:11,730
each item gets loaded, and
you just keeps scrolling.

580
00:24:11,730 --> 00:24:13,950
We also support the
other common pattern,

581
00:24:13,950 --> 00:24:18,130
where you scroll to the bottom,
you explicitly ask for more.

582
00:24:18,130 --> 00:24:20,670
So again, we're validating
that our basic constructs are

583
00:24:20,670 --> 00:24:21,900
working for these use cases.

584
00:24:21,900 --> 00:24:24,480


585
00:24:24,480 --> 00:24:26,970
Fancier features-- if
you've ever built stuff

586
00:24:26,970 --> 00:24:28,570
like this, worked
with the UX team,

587
00:24:28,570 --> 00:24:30,870
inevitably they're going
to want fancy stuff.

588
00:24:30,870 --> 00:24:32,550
So here's a proof
of concept that

589
00:24:32,550 --> 00:24:35,160
shows that things
like swipe to dismiss

590
00:24:35,160 --> 00:24:38,820
can work with this
virtual scroller, as well.

591
00:24:38,820 --> 00:24:47,210


592
00:24:47,210 --> 00:24:47,790
OK.

593
00:24:47,790 --> 00:24:50,490
So we mentioned that
we thought there

594
00:24:50,490 --> 00:24:54,830
would be some missing primitives
that we might discover.

595
00:24:54,830 --> 00:24:56,400
And we think we found one.

596
00:24:56,400 --> 00:24:59,460
Specifically, it's
called invisible DOM.

597
00:24:59,460 --> 00:25:01,749
So you remember our
earlier examples.

598
00:25:01,749 --> 00:25:04,290
In this one, you'll see it's a
lot like the virtual scroller,

599
00:25:04,290 --> 00:25:06,300
except instead of
actually getting rid of

600
00:25:06,300 --> 00:25:10,080
and adding nodes, it's basically
just making nodes invisible.

601
00:25:10,080 --> 00:25:12,630
Invisible DOM is
in the document,

602
00:25:12,630 --> 00:25:15,390
much like a display
none element But it's

603
00:25:15,390 --> 00:25:18,855
different from display none,
in that it can be linked to

604
00:25:18,855 --> 00:25:22,880
and it can be found by the
browser's Find In page.

605
00:25:22,880 --> 00:25:24,630
And so here's an
example, where we

606
00:25:24,630 --> 00:25:29,550
have non-traditional virtual
scroll type of content.

607
00:25:29,550 --> 00:25:31,080
This is a document,
much like you

608
00:25:31,080 --> 00:25:34,280
might find in Wikipedia or
a long-form news article.

609
00:25:34,280 --> 00:25:36,750
And you can see--

610
00:25:36,750 --> 00:25:37,260
here it is.

611
00:25:37,260 --> 00:25:38,767
We get a certain
way down the list.

612
00:25:38,767 --> 00:25:41,100
And all of the sudden, there's
nothing highlighting over

613
00:25:41,100 --> 00:25:41,683
in the window.

614
00:25:41,683 --> 00:25:44,710
Because some of these
DOM nodes are invisible.

615
00:25:44,710 --> 00:25:45,790
They're just not there.

616
00:25:45,790 --> 00:25:49,500
And as we scroll, we'll
see that they're basically

617
00:25:49,500 --> 00:25:52,300
being flipped to visible.

618
00:25:52,300 --> 00:25:56,430
And so when the virtual scroller
is working with invisible DOM,

619
00:25:56,430 --> 00:25:57,450
this is how it works.

620
00:25:57,450 --> 00:26:00,530


621
00:26:00,530 --> 00:26:05,690
So you'll see here,
we'll do some resizing,

622
00:26:05,690 --> 00:26:06,707
changing orientation.

623
00:26:06,707 --> 00:26:08,540
And you'll see that the
layout is preserved.

624
00:26:08,540 --> 00:26:12,260
Again, this is just
ordinary styling and layout

625
00:26:12,260 --> 00:26:12,920
on these items.

626
00:26:12,920 --> 00:26:14,780
And virtual scroller works
with them out of the box.

627
00:26:14,780 --> 00:26:16,220
This is what we were
talking about when we said

628
00:26:16,220 --> 00:26:17,400
we wanted to make it simple.

629
00:26:17,400 --> 00:26:18,900
We don't want you
have to think hard

630
00:26:18,900 --> 00:26:20,510
about using a virtual scroller.

631
00:26:20,510 --> 00:26:23,530
So what we're looking at here,
though-- is the cool thing--

632
00:26:23,530 --> 00:26:24,290
its links.

633
00:26:24,290 --> 00:26:27,150
And this is what invisible
DOM is making possible for us.

634
00:26:27,150 --> 00:26:29,080
So when I click on
one of those links,

635
00:26:29,080 --> 00:26:30,830
the DOM nodes that
it's linking to are not

636
00:26:30,830 --> 00:26:33,217
even in the document yet--

637
00:26:33,217 --> 00:26:35,550
well, they're in the document,
but they're not rendered.

638
00:26:35,550 --> 00:26:37,220
And so you get an event on them.

639
00:26:37,220 --> 00:26:39,080
And by default, the
browser will actually

640
00:26:39,080 --> 00:26:40,747
flip visible and scroll to it.

641
00:26:40,747 --> 00:26:42,330
But in the case of
a virtual stroller,

642
00:26:42,330 --> 00:26:44,960
we're capturing that event.

643
00:26:44,960 --> 00:26:47,586
We're scrolling to it.

644
00:26:47,586 --> 00:26:48,960
But in the process
of doing that,

645
00:26:48,960 --> 00:26:50,640
we're rendering all
the context around it.

646
00:26:50,640 --> 00:26:51,764
So it's perfectly seamless.

647
00:26:51,764 --> 00:26:53,480
To the end user who's
using invisible DOM

648
00:26:53,480 --> 00:26:55,100
with a virtual
scroller, it's exactly

649
00:26:55,100 --> 00:26:57,558
as if the entire document had
been rendered the whole time.

650
00:26:57,558 --> 00:27:00,610


651
00:27:00,610 --> 00:27:03,070
And I am just about out of time.

652
00:27:03,070 --> 00:27:06,690
But I wanted to show you one of
the exciting things about using

653
00:27:06,690 --> 00:27:08,850
invisible DOM with
virtual stroller

654
00:27:08,850 --> 00:27:11,790
is that it means you can
actually put invisible content

655
00:27:11,790 --> 00:27:13,170
directly in a document.

656
00:27:13,170 --> 00:27:15,780
And we're talking with our
friends over in Search.

657
00:27:15,780 --> 00:27:19,410
And the idea is that you'd
be able to effectively

658
00:27:19,410 --> 00:27:21,510
have your content be
entirely indexable

659
00:27:21,510 --> 00:27:24,750
but to benefit from
the performance

660
00:27:24,750 --> 00:27:27,210
wins of virtual scrolling
by not having a render it

661
00:27:27,210 --> 00:27:30,240
all on first load.

662
00:27:30,240 --> 00:27:33,750
So very quickly, I'll talk
about the path forward.

663
00:27:33,750 --> 00:27:37,680
Again, very early days-- but
very encouraging results.

664
00:27:37,680 --> 00:27:38,959
What's next?

665
00:27:38,959 --> 00:27:40,250
More invisible DOM integration.

666
00:27:40,250 --> 00:27:41,967
We've really just
started exploring

667
00:27:41,967 --> 00:27:43,050
how the two play together.

668
00:27:43,050 --> 00:27:45,600
Because thanks to
some great work

669
00:27:45,600 --> 00:27:47,670
from [? Raquina ?]
on our DOM team,

670
00:27:47,670 --> 00:27:51,060
we've just had a working
version of it become available

671
00:27:51,060 --> 00:27:51,690
very recently.

672
00:27:51,690 --> 00:27:57,210
In fact, it's available behind
the flag in Chrome Canary.

673
00:27:57,210 --> 00:28:01,090
We think there may be
additional primitives, as well.

674
00:28:01,090 --> 00:28:02,430
We've talked about some.

675
00:28:02,430 --> 00:28:03,710
I won't go into detail here.

676
00:28:03,710 --> 00:28:06,900
But invisible DOM
is just the first.

677
00:28:06,900 --> 00:28:09,000
Framework collaborations--
so from the start,

678
00:28:09,000 --> 00:28:13,590
we've actually in the repo had
proof of concept integrations

679
00:28:13,590 --> 00:28:16,590
with lit-HTML and with Preact.

680
00:28:16,590 --> 00:28:18,094
And for this talk--

681
00:28:18,094 --> 00:28:19,260
but I'd end up getting cut--

682
00:28:19,260 --> 00:28:22,480
I did a basic react
integration, as well.

683
00:28:22,480 --> 00:28:24,090
But it's very
early there, and we

684
00:28:24,090 --> 00:28:26,340
haven't worked closely with the
frameworks on that specifically

685
00:28:26,340 --> 00:28:26,840
yet.

686
00:28:26,840 --> 00:28:30,870


687
00:28:30,870 --> 00:28:34,570
More advanced use cases-- so
we saw some of those examples.

688
00:28:34,570 --> 00:28:38,250
But there are others that
we have not gotten to yet.

689
00:28:38,250 --> 00:28:40,940
Performance optimization-- it's
pretty darn fast right now.

690
00:28:40,940 --> 00:28:43,650
But there actually hasn't
been intensive optimization

691
00:28:43,650 --> 00:28:45,580
done on it yet.

692
00:28:45,580 --> 00:28:47,960
And then importantly,
down-the-stack explorations--

693
00:28:47,960 --> 00:28:50,460
so one of the first questions
we get when we talk about this

694
00:28:50,460 --> 00:28:52,849
is, why doesn't the browser
just do this stuff better

695
00:28:52,849 --> 00:28:53,640
in the first place?

696
00:28:53,640 --> 00:28:55,380
Why do you need a
virtual scroller?

697
00:28:55,380 --> 00:28:56,820
Can't the browser just do this?

698
00:28:56,820 --> 00:28:58,830
And these are
discussions that we're

699
00:28:58,830 --> 00:29:01,900
having not only externally,
but also internally.

700
00:29:01,900 --> 00:29:04,440
And it's a long,
complicated story.

701
00:29:04,440 --> 00:29:06,420
Browser layout is complicated.

702
00:29:06,420 --> 00:29:07,170
And in much

703
00:29:07,170 --> 00:29:09,750
The way that AMP
simplifies building pages,

704
00:29:09,750 --> 00:29:11,700
virtual scroller
can simplify layout

705
00:29:11,700 --> 00:29:13,540
by locking you into
a much simpler model.

706
00:29:13,540 --> 00:29:14,830
And there are some wins there.

707
00:29:14,830 --> 00:29:16,920
But that being said,
it's very possible

708
00:29:16,920 --> 00:29:22,094
that we can also pursue
other types of optimizations

709
00:29:22,094 --> 00:29:23,760
further down the stack
that get you some

710
00:29:23,760 --> 00:29:25,470
of the same types of
benefits without even having

711
00:29:25,470 --> 00:29:26,460
to go to a virtual stroller.

712
00:29:26,460 --> 00:29:28,817
And those are certainly
things that we're discussing.

713
00:29:28,817 --> 00:29:32,300


714
00:29:32,300 --> 00:29:33,860
The standards
process-- so again,

715
00:29:33,860 --> 00:29:36,226
we've been talking to other
browser vendors all along.

716
00:29:36,226 --> 00:29:38,600
But it's very early for this
and other similar high-level

717
00:29:38,600 --> 00:29:39,680
features.

718
00:29:39,680 --> 00:29:41,300
And the list could go on.

719
00:29:41,300 --> 00:29:43,820
So if you're
interested, I invite you

720
00:29:43,820 --> 00:29:46,580
to engage with us on GitHub.

721
00:29:46,580 --> 00:29:49,640
We have a very active set
of discussions going on

722
00:29:49,640 --> 00:29:52,810
in the issues here.

723
00:29:52,810 --> 00:29:57,550
And here is the GitHub
repo where you'll find us.

724
00:29:57,550 --> 00:30:00,305
And with that, I've been excited
to show you virtual scroller.

725
00:30:00,305 --> 00:30:01,930
I hope you're as
excited as I am to see

726
00:30:01,930 --> 00:30:04,140
it come into the web platform.

727
00:30:04,140 --> 00:30:16,333