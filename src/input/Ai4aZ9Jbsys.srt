1
00:00:00,000 --> 00:00:03,000
[MUSIC PLAYING]

2
00:00:03,000 --> 00:00:06,953


3
00:00:06,953 --> 00:00:08,119
KINUKO YASUDA: Hi, everyone.

4
00:00:08,119 --> 00:00:08,950
I'm Kinuko.

5
00:00:08,950 --> 00:00:11,260
I'm the tech lead of
[INAUDIBLE] projects

6
00:00:11,260 --> 00:00:12,889
for the web platform in Chrome.

7
00:00:12,889 --> 00:00:13,930
RUDY GALFI: And I'm Rudy.

8
00:00:13,930 --> 00:00:16,792
I'm the lead product
manager for AMP at Google.

9
00:00:16,792 --> 00:00:18,250
KINUKO YASUDA: This
presentation is

10
00:00:18,250 --> 00:00:21,460
a bit of preview of two
upcoming APIs, web packaging

11
00:00:21,460 --> 00:00:22,040
and portals.

12
00:00:22,040 --> 00:00:24,910
With these APIs we
believe that you'll

13
00:00:24,910 --> 00:00:27,160
be able to take
that low friction

14
00:00:27,160 --> 00:00:30,310
agent to the next level, and
create a zero friction user

15
00:00:30,310 --> 00:00:31,780
experience.

16
00:00:31,780 --> 00:00:32,890
I hope you like it.

17
00:00:32,890 --> 00:00:35,470
Let's dive right into it.

18
00:00:35,470 --> 00:00:38,920
RUDY GALFI: All right, so
here's a slide showing a slide.

19
00:00:38,920 --> 00:00:41,620
To be more precise, this
is one of those old school

20
00:00:41,620 --> 00:00:44,169
projector slides.

21
00:00:44,169 --> 00:00:46,210
In their day, slides like
these were a useful way

22
00:00:46,210 --> 00:00:49,770
to communicate, or held
important memories for people.

23
00:00:49,770 --> 00:00:51,520
To view the slide's
content, the projector

24
00:00:51,520 --> 00:00:53,290
needed to mechanically
position it

25
00:00:53,290 --> 00:00:56,629
into place, so that the light
source would shine through it.

26
00:00:56,629 --> 00:00:58,420
And for those of you
who might have watched

27
00:00:58,420 --> 00:00:59,920
one of these old
school slide shows,

28
00:00:59,920 --> 00:01:01,560
you probably
remember how tedious

29
00:01:01,560 --> 00:01:04,160
it was to progress
through each slide.

30
00:01:04,160 --> 00:01:07,150
This kind of makes
me feel, you know,

31
00:01:07,150 --> 00:01:11,310
like how we think about the
web today, the same feeling.

32
00:01:11,310 --> 00:01:13,590
Just like progressing
through cylinder slides, when

33
00:01:13,590 --> 00:01:24,260
you browse the web today you
can feel all the navigations.

34
00:01:24,260 --> 00:01:26,690
Today the web is
used a lot on the go,

35
00:01:26,690 --> 00:01:29,620
say in between meetings,
in an elevator,

36
00:01:29,620 --> 00:01:31,850
or maybe you're on
a poor connection.

37
00:01:31,850 --> 00:01:33,950
When I've got limited
time, focused on my phone

38
00:01:33,950 --> 00:01:36,110
before the next
distraction comes along,

39
00:01:36,110 --> 00:01:39,540
spending five seconds or longer
staring at a white screen,

40
00:01:39,540 --> 00:01:41,330
waiting for the
content to come in,

41
00:01:41,330 --> 00:01:45,799
for the page to be interactive,
that's incredibly noticeable.

42
00:01:45,799 --> 00:01:47,340
Many of you may have
observed we used

43
00:01:47,340 --> 00:01:49,760
some exaggerated long
transitions on our own

44
00:01:49,760 --> 00:01:51,260
slides so far in this talk.

45
00:01:51,260 --> 00:01:52,220
Don't worry.

46
00:01:52,220 --> 00:01:54,050
We're going to put
an end to that soon.

47
00:01:54,050 --> 00:01:56,120
Those were just
one second fades.

48
00:01:56,120 --> 00:01:58,650
Think of how used to
the cycle of reading

49
00:01:58,650 --> 00:02:01,160
and then waiting,
reading and then waiting,

50
00:02:01,160 --> 00:02:03,760
that we've kind
of grown used to.

51
00:02:03,760 --> 00:02:05,446
We think it's time to do better.

52
00:02:05,446 --> 00:02:07,570
And we have some ideas to
help you create seamless,

53
00:02:07,570 --> 00:02:09,530
zero friction user experiences.

54
00:02:09,530 --> 00:02:11,920
And that's what this
talk is all about.

55
00:02:11,920 --> 00:02:13,460
KINUKO YASUDA: So
our desire to see

56
00:02:13,460 --> 00:02:16,600
seamless user experience
on the web, it's not new.

57
00:02:16,600 --> 00:02:19,660
In Chrome 13 back
in 2011, we launched

58
00:02:19,660 --> 00:02:22,860
a feature called Instant Search,
which provides the search

59
00:02:22,860 --> 00:02:25,030
abilities for user experience.

60
00:02:25,030 --> 00:02:28,480
It did so by pairing the
[INAUDIBLE] user would

61
00:02:28,480 --> 00:02:30,160
most likely click on.

62
00:02:30,160 --> 00:02:33,310
However, the feature only
worked in limited scenarios

63
00:02:33,310 --> 00:02:34,570
for various reasons.

64
00:02:34,570 --> 00:02:37,090
In particular,
for privacy reason

65
00:02:37,090 --> 00:02:39,310
it only worked for
the search results

66
00:02:39,310 --> 00:02:41,680
the user had already
visited and for which

67
00:02:41,680 --> 00:02:45,240
we had a high confidence
of user interest.

68
00:02:45,240 --> 00:02:49,210
Then in 2015, another
example with [INAUDIBLE]

69
00:02:49,210 --> 00:02:51,100
user experience was launched.

70
00:02:51,100 --> 00:02:53,040
I'm talking about AMP.

71
00:02:53,040 --> 00:02:55,360
Rudy is going to walk
us through what it took,

72
00:02:55,360 --> 00:02:57,354
and where things are headed.

73
00:02:57,354 --> 00:02:59,020
RUDY GALFI: So as
Kinuko said, advancing

74
00:02:59,020 --> 00:03:00,520
the state of the
art in page loading

75
00:03:00,520 --> 00:03:03,310
has always been of intense
interest to us at Google,

76
00:03:03,310 --> 00:03:04,480
and for Google Search.

77
00:03:04,480 --> 00:03:07,060
We point users to a
whole lot of web pages.

78
00:03:07,060 --> 00:03:09,460
And thinking about the
totality of the experience

79
00:03:09,460 --> 00:03:11,140
that the user gets,
we really want

80
00:03:11,140 --> 00:03:13,720
it to feel as fast and
as seamless as possible,

81
00:03:13,720 --> 00:03:16,030
even as the user
goes off of Search

82
00:03:16,030 --> 00:03:17,950
and into the whole
great world of content

83
00:03:17,950 --> 00:03:19,927
that they're looking to explore.

84
00:03:19,927 --> 00:03:21,760
When we started AMP,
we were intent on using

85
00:03:21,760 --> 00:03:24,400
the full power of the web
platform that was available.

86
00:03:24,400 --> 00:03:26,650
But where we wanted
to get was here.

87
00:03:26,650 --> 00:03:28,270
And we felt that
what we could achieve

88
00:03:28,270 --> 00:03:33,336
in a scalable way on the web
kind of just got us up to here.

89
00:03:33,336 --> 00:03:34,710
So we gave it a
bunch of thought,

90
00:03:34,710 --> 00:03:37,320
and came up with an
architecture for instant loading

91
00:03:37,320 --> 00:03:39,030
that could work on today's web.

92
00:03:39,030 --> 00:03:40,740
It's still what we use today.

93
00:03:40,740 --> 00:03:43,140
First, there's the AMP
JavaScript library.

94
00:03:43,140 --> 00:03:46,590
It helps to ensure that the
experience is fast by default.

95
00:03:46,590 --> 00:03:48,870
And this is enforced by
a validation step, which

96
00:03:48,870 --> 00:03:50,460
helps keep the
experience fast, even

97
00:03:50,460 --> 00:03:52,710
as the site is getting updated.

98
00:03:52,710 --> 00:03:56,070
The next layer was thinking
about how server response

99
00:03:56,070 --> 00:03:57,930
times can vary a lot globally.

100
00:03:57,930 --> 00:04:01,290
And not every site is situated
on great infrastructure.

101
00:04:01,290 --> 00:04:03,900
Also, as we've seen earlier,
sticking huge images

102
00:04:03,900 --> 00:04:06,977
into pages intended for mobile
viewing is still pretty common.

103
00:04:06,977 --> 00:04:09,060
And so for these reasons
we added the second layer

104
00:04:09,060 --> 00:04:12,150
of caching, where we can
ensure that the content is

105
00:04:12,150 --> 00:04:15,000
pushed to the edges of the
network for faster delivery.

106
00:04:15,000 --> 00:04:17,730
And we can do common
sense optimizations.

107
00:04:17,730 --> 00:04:19,879
And last, truly
the best thing we

108
00:04:19,879 --> 00:04:21,420
can do to get load
times down to zero

109
00:04:21,420 --> 00:04:24,050
milliseconds is to
prerender the content,

110
00:04:24,050 --> 00:04:26,010
use our psychic powers.

111
00:04:26,010 --> 00:04:29,340
As we just discussed, this
was attempted in Search before

112
00:04:29,340 --> 00:04:30,190
with Instant Search.

113
00:04:30,190 --> 00:04:32,370
However, you need
to think really

114
00:04:32,370 --> 00:04:35,520
carefully about the privacy
implications of such a design.

115
00:04:35,520 --> 00:04:37,980
And we had trouble scaling it.

116
00:04:37,980 --> 00:04:40,770
The cache will actually help
us complement this prerendering

117
00:04:40,770 --> 00:04:41,670
very well.

118
00:04:41,670 --> 00:04:45,650
And Kinuko will explain
more about that in a moment.

119
00:04:45,650 --> 00:04:46,990
So we got all of this stood up.

120
00:04:46,990 --> 00:04:49,312
And this is where we ended up.

121
00:04:49,312 --> 00:04:50,770
Most of what you're
looking at here

122
00:04:50,770 --> 00:04:52,210
is what we call the AMP viewer.

123
00:04:52,210 --> 00:04:54,470
That's the page you're visiting.

124
00:04:54,470 --> 00:04:56,850
It's responsible for
displaying the content served

125
00:04:56,850 --> 00:04:59,764
through the AMP cache for
speed and privacy reasons.

126
00:04:59,764 --> 00:05:01,930
However, you'll notice by
looking at the address bar

127
00:05:01,930 --> 00:05:05,110
that the URL is still
saying google.com in it.

128
00:05:05,110 --> 00:05:07,060
To help the user
understand where

129
00:05:07,060 --> 00:05:08,830
the content they're
viewing came from,

130
00:05:08,830 --> 00:05:10,650
we had to add an
extra piece of UX

131
00:05:10,650 --> 00:05:13,480
to the top of the
content area of the page.

132
00:05:13,480 --> 00:05:15,490
The idea of the instant
loading was achieved.

133
00:05:15,490 --> 00:05:17,530
But the design
constraints that we faced

134
00:05:17,530 --> 00:05:20,500
and the work arounds that we
had to build for them ended up

135
00:05:20,500 --> 00:05:23,530
being put on full display
in the product experience,

136
00:05:23,530 --> 00:05:25,390
and that wasn't great.

137
00:05:25,390 --> 00:05:27,940
So we hear a bunch of
feedback on this, maybe even

138
00:05:27,940 --> 00:05:29,320
from some of you.

139
00:05:29,320 --> 00:05:30,820
So earlier this
year we started down

140
00:05:30,820 --> 00:05:34,580
this path to make the
URLs for AMP pages better.

141
00:05:34,580 --> 00:05:37,180
And after having AMP in
the wild for two years,

142
00:05:37,180 --> 00:05:39,767
we decided it was time to
take all that we had learned

143
00:05:39,767 --> 00:05:42,100
and develop the necessary
primitives in the web platform

144
00:05:42,100 --> 00:05:43,040
directly.

145
00:05:43,040 --> 00:05:45,670
So we could make all the
content across the web

146
00:05:45,670 --> 00:05:48,947
be able to benefit from
this kind of technology.

147
00:05:48,947 --> 00:05:50,530
So this means that
for the cases where

148
00:05:50,530 --> 00:05:52,720
you click on a link in
Search and it's just

149
00:05:52,720 --> 00:05:55,414
a simple navigation, then
we want the publisher's URL

150
00:05:55,414 --> 00:05:57,580
to be the one that shows
up in the browser's address

151
00:05:57,580 --> 00:06:00,580
bar, while still having the
instant, or nearly instant,

152
00:06:00,580 --> 00:06:01,560
loading experience.

153
00:06:01,560 --> 00:06:04,315


154
00:06:04,315 --> 00:06:06,190
KINUKO YASUDA: So Rudy
talked a lot about the

155
00:06:06,190 --> 00:06:08,830
how AMP has been pushing
with the goal of highly

156
00:06:08,830 --> 00:06:11,470
optimized user experience.

157
00:06:11,470 --> 00:06:14,130
There was a lot of special
handling required because

158
00:06:14,130 --> 00:06:16,720
of a gap in the web platform.

159
00:06:16,720 --> 00:06:19,420
We are now taking inspiration
from past efforts,

160
00:06:19,420 --> 00:06:21,790
like AMP and the Instant
Search, and trying

161
00:06:21,790 --> 00:06:26,330
to eliminate this gap by
extending the web platform.

162
00:06:26,330 --> 00:06:30,100
And by doing so, we also want to
enable this zero friction user

163
00:06:30,100 --> 00:06:35,050
experience across all
content on the web.

164
00:06:35,050 --> 00:06:38,380
We are working on multiple
proposals to achieve this goal.

165
00:06:38,380 --> 00:06:41,370
But in this talk, we'll
introduce two new [INAUDIBLE],,

166
00:06:41,370 --> 00:06:43,880
web packaging and portals.

167
00:06:43,880 --> 00:06:46,560
So let me start
with web packaging.

168
00:06:46,560 --> 00:06:49,570
As the name implies,
it's meant for packaging

169
00:06:49,570 --> 00:06:51,220
a piece of web content.

170
00:06:51,220 --> 00:06:54,280
We think it will enable
various interesting use cases.

171
00:06:54,280 --> 00:06:57,250
But let me start
first explaining

172
00:06:57,250 --> 00:07:00,310
how it can help instant
navigation both for AMP

173
00:07:00,310 --> 00:07:03,130
and non-AMP content.

174
00:07:03,130 --> 00:07:07,440
So stepping back, [INAUDIBLE]
wanted to make web content

175
00:07:07,440 --> 00:07:10,500
load instantly and reliably.

176
00:07:10,500 --> 00:07:12,240
Here's why it's hard.

177
00:07:12,240 --> 00:07:14,970
When you publish
something on the web,

178
00:07:14,970 --> 00:07:17,760
in the simplest setting,
you'd have a server.

179
00:07:17,760 --> 00:07:20,280
And your content would
be a project there.

180
00:07:20,280 --> 00:07:22,680
Then someone browses
your content.

181
00:07:22,680 --> 00:07:25,310
But the server
might be overloaded.

182
00:07:25,310 --> 00:07:28,520
And your content
will load slowly.

183
00:07:28,520 --> 00:07:30,730
Then the experience not good.

184
00:07:30,730 --> 00:07:32,880
So what could we
do to improve this?

185
00:07:32,880 --> 00:07:35,880
One way would be to
prefetch your content.

186
00:07:35,880 --> 00:07:38,880
Suppose that your content's
linked from a popular traffic

187
00:07:38,880 --> 00:07:40,080
source site.

188
00:07:40,080 --> 00:07:43,090
When a user visits the site,
it can trigger a prefetch

189
00:07:43,090 --> 00:07:47,120
when it thinks that the user
is about to visit your content.

190
00:07:47,120 --> 00:07:50,790
Then because the content is
already in the user's cache,

191
00:07:50,790 --> 00:07:54,530
the navigations
happen very fast.

192
00:07:54,530 --> 00:07:56,610
Unfortunately, the
prefetched websites

193
00:07:56,610 --> 00:07:59,700
can learn about the
user's interest,

194
00:07:59,700 --> 00:08:04,260
even if they don't
visit the website.

195
00:08:04,260 --> 00:08:07,680
One way to fix this would
be for the referral site

196
00:08:07,680 --> 00:08:10,160
to add a cache here.

197
00:08:10,160 --> 00:08:13,170
Then the referral site could
bootstrap the [INAUDIBLE]

198
00:08:13,170 --> 00:08:16,100
in a privacy-preserving
manner, because it

199
00:08:16,100 --> 00:08:20,640
could let the browser prefetch
your content from this cache.

200
00:08:20,640 --> 00:08:23,840
This fixed the privacy
concern and the content loads

201
00:08:23,840 --> 00:08:24,750
instantly.

202
00:08:24,750 --> 00:08:29,190
So is this the holy grail?

203
00:08:29,190 --> 00:08:30,390
No, not yet.

204
00:08:30,390 --> 00:08:32,309
As already explained,
this design

205
00:08:32,309 --> 00:08:35,730
ends up in full
display in the product.

206
00:08:35,730 --> 00:08:37,620
The browser's address
bar shows the URL

207
00:08:37,620 --> 00:08:41,669
of the referral site instead
of the UI's because this

208
00:08:41,669 --> 00:08:45,040
is where the browser thinks
the content is coming from.

209
00:08:45,040 --> 00:08:48,450
This is confusing to the users.

210
00:08:48,450 --> 00:08:50,460
The issue is that
the web platform

211
00:08:50,460 --> 00:08:54,480
doesn't provide a proper way to
let others bootstrap your page

212
00:08:54,480 --> 00:08:55,470
loads.

213
00:08:55,470 --> 00:08:58,020
But what if your render
critical resources

214
00:08:58,020 --> 00:09:01,530
could be shared with
popular traffic sources,

215
00:09:01,530 --> 00:09:04,390
and [INAUDIBLE] on your behalf.

216
00:09:04,390 --> 00:09:06,990
This would let traffic
source bootstrap [INAUDIBLE]..

217
00:09:06,990 --> 00:09:08,770
And when the user
navigates, it's

218
00:09:08,770 --> 00:09:14,290
just a regular page load from
your servers, only much faster.

219
00:09:14,290 --> 00:09:16,440
So how can we achieve this?

220
00:09:16,440 --> 00:09:19,080
The browser needs
a way to verify

221
00:09:19,080 --> 00:09:20,900
the true origin
of resources that

222
00:09:20,900 --> 00:09:23,130
are served by a fast cache.

223
00:09:23,130 --> 00:09:26,610
This can be done by
adding a proof of origin

224
00:09:26,610 --> 00:09:29,100
on these resources,
which is exactly

225
00:09:29,100 --> 00:09:31,120
what web packaging provides.

226
00:09:31,120 --> 00:09:34,380
So let's see the actual
standard proposals.

227
00:09:34,380 --> 00:09:37,710
Web packaging is not the
name of a single proposal,

228
00:09:37,710 --> 00:09:41,370
but an umbrella concept for
multiple spec proposals.

229
00:09:41,370 --> 00:09:43,860
The most important one
is Signed Exchange.

230
00:09:43,860 --> 00:09:47,040
It's basically a format that
represents a single HTTP

231
00:09:47,040 --> 00:09:50,760
exchange, or a pair with
HTTP request/response.

232
00:09:50,760 --> 00:09:53,430
Very simple, except
that it's digitally

233
00:09:53,430 --> 00:09:58,140
signed so that the browser can
verify the origin of resource.

234
00:09:58,140 --> 00:09:59,760
There's another
proposal building

235
00:09:59,760 --> 00:10:02,910
on top of Signed Exchange
called the Bundled Exchange.

236
00:10:02,910 --> 00:10:04,860
This is a bundle of exchanges.

237
00:10:04,860 --> 00:10:07,470
Therefore it can represent
multiple resources

238
00:10:07,470 --> 00:10:10,380
in one package, like
a whole web page.

239
00:10:10,380 --> 00:10:12,030
We think that the
Bundled Exchange

240
00:10:12,030 --> 00:10:14,930
will enable other
interesting use cases,

241
00:10:14,930 --> 00:10:17,070
while we start to do
the Signed Exchange,

242
00:10:17,070 --> 00:10:19,440
since that's the
key building block.

243
00:10:19,440 --> 00:10:23,490
And after a year of work,
we are pleased to announce

244
00:10:23,490 --> 00:10:25,480
that we are starting
an on-prem experiment

245
00:10:25,480 --> 00:10:29,730
of the feature on Chrome
71, which is in beta now.

246
00:10:29,730 --> 00:10:32,820
You can play locally with
it by enabling a flag,

247
00:10:32,820 --> 00:10:36,630
or can join the experiment
to enable it on your site.

248
00:10:36,630 --> 00:10:43,110
Please visit bit.ly/try-sxg
to find out how.

249
00:10:43,110 --> 00:10:45,300
We'd love to get your
feedback on this.

250
00:10:45,300 --> 00:10:50,070
That will help us improve
this feature more quickly.

251
00:10:50,070 --> 00:10:53,380
So in order to create
published Signed Exchanges

252
00:10:53,380 --> 00:10:56,200
for your resources, you
need to first acquire

253
00:10:56,200 --> 00:11:00,460
a certificate that can
sign exchanges and host it

254
00:11:00,460 --> 00:11:01,780
at a public URL.

255
00:11:01,780 --> 00:11:05,440
Such a certificate can be
created at DigiCert today.

256
00:11:05,440 --> 00:11:07,060
Once you do that,
you can generate

257
00:11:07,060 --> 00:11:09,370
Signed Exchanges
for your resources

258
00:11:09,370 --> 00:11:11,470
by using an open-source tool.

259
00:11:11,470 --> 00:11:13,600
This process is very manual.

260
00:11:13,600 --> 00:11:17,189
But we'll talk about the
options later in this talk.

261
00:11:17,189 --> 00:11:21,226


262
00:11:21,226 --> 00:11:22,850
RUDY GALFI: So the
origin trial process

263
00:11:22,850 --> 00:11:24,599
is needed for sites
that are going to link

264
00:11:24,599 --> 00:11:26,454
to Signed Exchange content.

265
00:11:26,454 --> 00:11:27,620
That could be your own site.

266
00:11:27,620 --> 00:11:29,939
But it also includes
platforms like google.com.

267
00:11:29,939 --> 00:11:31,730
So we've gone ahead
and enrolled google.com

268
00:11:31,730 --> 00:11:33,380
in the Signed
Exchange origin trial.

269
00:11:33,380 --> 00:11:34,940
And we'd now like
to show you a demo

270
00:11:34,940 --> 00:11:36,890
of using Signed
Exchanges for delivering

271
00:11:36,890 --> 00:11:38,990
AMP content from Google Search.

272
00:11:38,990 --> 00:11:40,670
To walk you through
it please join me

273
00:11:40,670 --> 00:11:43,760
in welcoming to the stage
Sumo from 1-800-Flowers,

274
00:11:43,760 --> 00:11:44,900
and Rustam from Cloudflare.

275
00:11:44,900 --> 00:11:48,868
[MUSIC PLAYING]

276
00:11:48,868 --> 00:11:55,519


277
00:11:55,519 --> 00:11:56,310
SUMANTRO DAS: Cool.

278
00:11:56,310 --> 00:11:57,159
Hey.

279
00:11:57,159 --> 00:11:57,700
Thanks, Rudy.

280
00:11:57,700 --> 00:11:59,860
AMP has provided a
prominent pathway

281
00:11:59,860 --> 00:12:02,329
for user discovery of
results and brands.

282
00:12:02,329 --> 00:12:04,370
You could use it to close
a gap between discovery

283
00:12:04,370 --> 00:12:06,453
and speed to engage, thanks
to an active developer

284
00:12:06,453 --> 00:12:10,372
community and thanks to a roll
out of new web components.

285
00:12:10,372 --> 00:12:12,205
Web packaging further
deepens the experience

286
00:12:12,205 --> 00:12:14,860
of providing native UI,
while serving the benefits

287
00:12:14,860 --> 00:12:16,390
from the AMP cache.

288
00:12:16,390 --> 00:12:20,500
Today we're excited to demo an
example of web packaging live.

289
00:12:20,500 --> 00:12:22,659
Are you ready?

290
00:12:22,659 --> 00:12:23,200
Check it out.

291
00:12:23,200 --> 00:12:31,820


292
00:12:31,820 --> 00:12:33,530
Let's search Christmas greens.

293
00:12:33,530 --> 00:12:46,710


294
00:12:46,710 --> 00:12:48,340
Here we are.

295
00:12:48,340 --> 00:12:52,230
So notice in the search
result the AMP badge.

296
00:12:52,230 --> 00:12:53,580
It's prominently featured.

297
00:12:53,580 --> 00:12:57,105
So you know instantly this
is an AMP search unit.

298
00:12:57,105 --> 00:12:59,370
I click on it or tap on it.

299
00:12:59,370 --> 00:13:01,860
And instantly, as
Rudy was mentioning,

300
00:13:01,860 --> 00:13:06,501
you see that there's no
Google in the URL head, which

301
00:13:06,501 --> 00:13:07,500
is pretty key over here.

302
00:13:07,500 --> 00:13:09,750
Because now you instantly
feel that you're

303
00:13:09,750 --> 00:13:14,650
natively on the website versus
being on a separate cache.

304
00:13:14,650 --> 00:13:18,330
Boldly enough you also see
that there's no viewer header.

305
00:13:18,330 --> 00:13:21,030
So that adds further to
the prominence that you are

306
00:13:21,030 --> 00:13:26,130
actually on, in this
case, 1-800-Flowers.com.

307
00:13:26,130 --> 00:13:31,170
Furthermore, having
attribution so seamless just

308
00:13:31,170 --> 00:13:35,040
adds to a much more
confident realization

309
00:13:35,040 --> 00:13:37,200
for a lot of brands,
that now there

310
00:13:37,200 --> 00:13:40,920
will be absolutely 100%
attribution going from the SERP

311
00:13:40,920 --> 00:13:44,820
to the native site.

312
00:13:44,820 --> 00:13:48,450
And a big shout out
really to the AMP team

313
00:13:48,450 --> 00:13:52,530
and to the Google Mobile
consultants team, who've really

314
00:13:52,530 --> 00:13:55,160
been pushing the boundaries
of UI/UX enhancement,

315
00:13:55,160 --> 00:13:57,240
and really making
sure that the web is

316
00:13:57,240 --> 00:14:00,779
taking all the strides possible
to go to the next level.

317
00:14:00,779 --> 00:14:02,820
Rustam, do you want to go
through how this works?

318
00:14:02,820 --> 00:14:03,270
RUSTAM LALKAKA: Sure.

319
00:14:03,270 --> 00:14:03,870
Thanks, Sumo.

320
00:14:03,870 --> 00:14:05,404
SUMANTRO DAS: Cheers.

321
00:14:05,404 --> 00:14:07,320
RUSTAM LALKAKA: So let's
look under the covers

322
00:14:07,320 --> 00:14:09,569
and talk about how you would
actually deploy something

323
00:14:09,569 --> 00:14:11,370
to support Signed Exchange.

324
00:14:11,370 --> 00:14:14,940
So at the top here in green
we have the request flow

325
00:14:14,940 --> 00:14:16,890
from your origin
through a front end

326
00:14:16,890 --> 00:14:19,790
proxy to your user's device.

327
00:14:19,790 --> 00:14:21,570
On the bottom, you
have the request flow

328
00:14:21,570 --> 00:14:24,090
into the AMP cache.

329
00:14:24,090 --> 00:14:26,730
And in between you
have an AMP packager.

330
00:14:26,730 --> 00:14:29,130
This prepares the
documents for the cache

331
00:14:29,130 --> 00:14:32,400
and signs them to
support Signed Exchange.

332
00:14:32,400 --> 00:14:34,830
Now at Cloudflare, we
sat down and thought

333
00:14:34,830 --> 00:14:37,410
about how to use our
global programmable network

334
00:14:37,410 --> 00:14:39,300
to make this all simpler.

335
00:14:39,300 --> 00:14:41,040
And this is what
we ended up with.

336
00:14:41,040 --> 00:14:43,830
We took all the logic necessary
to support Signed Exchange

337
00:14:43,830 --> 00:14:45,840
and built it into a
Cloudflare worker.

338
00:14:45,840 --> 00:14:47,730
This sits at our
edge and supports

339
00:14:47,730 --> 00:14:50,010
both the cryptographic
operations, the packaging

340
00:14:50,010 --> 00:14:53,100
operations, and the logic
necessary to arbitrate

341
00:14:53,100 --> 00:14:56,500
between the user and
AMP cache request flows.

342
00:14:56,500 --> 00:14:58,830
So you might be asking,
what's a worker?

343
00:14:58,830 --> 00:15:02,566
And simply put, it's
V8 running on the edge.

344
00:15:02,566 --> 00:15:04,440
This allows you to write
JavaScript targeting

345
00:15:04,440 --> 00:15:07,110
the service workers API,
deploy it to our edge,

346
00:15:07,110 --> 00:15:11,040
and have it running
instantly in 155 locations.

347
00:15:11,040 --> 00:15:13,440
Supporting Signed Exchange
and this packaging experience

348
00:15:13,440 --> 00:15:16,500
is a great example of what
Workers is capable of.

349
00:15:16,500 --> 00:15:18,535
So in addition to
releasing the code that

350
00:15:18,535 --> 00:15:20,160
supports this demo,
so that you can all

351
00:15:20,160 --> 00:15:23,820
build your own Workers
to try Signed Exchange,

352
00:15:23,820 --> 00:15:26,610
we also plan on building a
full fledged Cloudflare feature

353
00:15:26,610 --> 00:15:28,511
to support it at launch.

354
00:15:28,511 --> 00:15:29,010
Cool.

355
00:15:29,010 --> 00:15:30,518
Back to Rudy.

356
00:15:30,518 --> 00:15:32,015
Thank you.

357
00:15:32,015 --> 00:15:36,506
[APPLAUSE]

358
00:15:36,506 --> 00:15:39,540
RUDY GALFI: All right,
thank you, Sumo and Rustam.

359
00:15:39,540 --> 00:15:41,070
So if you're
publishing AMP content,

360
00:15:41,070 --> 00:15:43,320
we'd like to invite you to
try out a developer preview

361
00:15:43,320 --> 00:15:46,955
of Signed Exchange AMP
content in Search using

362
00:15:46,955 --> 00:15:48,830
the instructions at the
link up on the slide,

363
00:15:48,830 --> 00:15:51,030
g.co/webpackagepreview.

364
00:15:51,030 --> 00:15:53,490
You can learn more about
creating packages and building

365
00:15:53,490 --> 00:15:55,239
an end-to-end flow,
like you just saw,

366
00:15:55,239 --> 00:15:56,280
for your own AMP content.

367
00:15:56,280 --> 00:15:59,820


368
00:15:59,820 --> 00:16:02,240
KINUKO YASUDA: [INAUDIBLE]
will we be seeing the benefits

369
00:16:02,240 --> 00:16:05,300
that Signed Exchanges
bring to AMP publishers.

370
00:16:05,300 --> 00:16:09,020
But it's important not to forget
that this will also benefit

371
00:16:09,020 --> 00:16:11,330
all pages on the web too.

372
00:16:11,330 --> 00:16:13,460
Now, I want to show
an additional example

373
00:16:13,460 --> 00:16:15,260
of regular cross navigation.

374
00:16:15,260 --> 00:16:18,320
On a slow network, the
content will load slowly.

375
00:16:18,320 --> 00:16:20,670
On the other hand,
the right side

376
00:16:20,670 --> 00:16:24,110
shows how it can be done with
a prefetch with web packaging.

377
00:16:24,110 --> 00:16:26,560
You can see that the
user is navigated

378
00:16:26,560 --> 00:16:29,650
to a page on a different
site instantly.

379
00:16:29,650 --> 00:16:32,690
The prefetch is down from the
cache of the referral site.

380
00:16:32,690 --> 00:16:36,860
So they are [INAUDIBLE] in
a privacy-preserving manner.

381
00:16:36,860 --> 00:16:38,790
So [INAUDIBLE]
how to use the web

382
00:16:38,790 --> 00:16:41,660
packaging to realize
privacy-preserving instant

383
00:16:41,660 --> 00:16:43,646
navigations.

384
00:16:43,646 --> 00:16:47,020
But you know, we're still
doing navigation, right?

385
00:16:47,020 --> 00:16:49,340
So it still feels
like we're progressing

386
00:16:49,340 --> 00:16:52,720
through pages at a
disjoined experience,

387
00:16:52,720 --> 00:16:55,780
not a nice, seamless experience.

388
00:16:55,780 --> 00:16:57,970
And we've been wondering
how we could improve this

389
00:16:57,970 --> 00:16:59,770
even further.

390
00:16:59,770 --> 00:17:04,250
And let me introduce our
latest proposal, portals.

391
00:17:04,250 --> 00:17:07,869
So let's see what we mean by
navigation versus transition.

392
00:17:07,869 --> 00:17:09,730
Maybe it's not too surprising.

393
00:17:09,730 --> 00:17:11,980
Again, this shows
regular navigation.

394
00:17:11,980 --> 00:17:14,319
This loads slowly,
depending on connectivity.

395
00:17:14,319 --> 00:17:16,450
And it breaks users flow.

396
00:17:16,450 --> 00:17:20,020
And the right side shows
an example of a transition.

397
00:17:20,020 --> 00:17:22,829
As you can see, when the
user taps on the article,

398
00:17:22,829 --> 00:17:25,540
a nice and seamless
animation is triggered,

399
00:17:25,540 --> 00:17:28,050
creating a sense of continuity.

400
00:17:28,050 --> 00:17:30,490
The navigation just
happened without being

401
00:17:30,490 --> 00:17:34,840
felt. The navigation
[INAUDIBLE] that it's worth

402
00:17:34,840 --> 00:17:39,400
taking a closer look and can
be seen from the address bar.

403
00:17:39,400 --> 00:17:43,540
So user starts their journey
from a page on feed.glitch.me.

404
00:17:43,540 --> 00:17:45,730
And when the animations
are finished,

405
00:17:45,730 --> 00:17:49,610
the user ends on another
website, news.horo.jp.

406
00:17:49,610 --> 00:17:51,880
So it's a cross-site transition.

407
00:17:51,880 --> 00:17:54,100
Combining portals and
the Signed Exchanges

408
00:17:54,100 --> 00:17:57,640
enables these types
of user experience,

409
00:17:57,640 --> 00:18:01,400
while preserving
the user's privacy.

410
00:18:01,400 --> 00:18:03,170
It might not be interesting yet.

411
00:18:03,170 --> 00:18:06,380
But portals are not limited
to cross-website navigations.

412
00:18:06,380 --> 00:18:08,780
Let's take a look at how
it can improve the user

413
00:18:08,780 --> 00:18:12,680
experience of a single website
built with multiple page

414
00:18:12,680 --> 00:18:13,880
architecture.

415
00:18:13,880 --> 00:18:16,265
I'd like to thank
Hatena at Yeung Jump Web

416
00:18:16,265 --> 00:18:18,305
Comics, our partners
in Japan, who

417
00:18:18,305 --> 00:18:21,830
we worked with to create
this early exploration

418
00:18:21,830 --> 00:18:24,360
for their reading
manga on the go website

419
00:18:24,360 --> 00:18:27,558
called the [INAUDIBLE].

420
00:18:27,558 --> 00:18:31,520
So let's see the user
experience without portals.

421
00:18:31,520 --> 00:18:33,770
When you reach the
end of a chapter,

422
00:18:33,770 --> 00:18:35,750
you see an instance
to [INAUDIBLE]..

423
00:18:35,750 --> 00:18:40,940
As you can see, it takes time
to load the next chapter.

424
00:18:40,940 --> 00:18:43,610
That's because the website
is using multiple page

425
00:18:43,610 --> 00:18:44,450
architecture.

426
00:18:44,450 --> 00:18:49,180
And it needs to load a
new page for each chapter.

427
00:18:49,180 --> 00:18:52,510
Now, let's see how that
could look like with portals.

428
00:18:52,510 --> 00:18:55,480
At the end of a chapter, we
can prelaunch the next chapter.

429
00:18:55,480 --> 00:18:58,600
It makes the
transition seamless.

430
00:18:58,600 --> 00:19:02,730
Pretty cool, right?

431
00:19:02,730 --> 00:19:05,910
The beauty of this is that
you can have this smooth user

432
00:19:05,910 --> 00:19:09,360
experience without
having to re-architect

433
00:19:09,360 --> 00:19:12,000
your website into single
page app, which is,

434
00:19:12,000 --> 00:19:15,450
as you know, a non-trivial
amount of work.

435
00:19:15,450 --> 00:19:17,310
So what are portals?

436
00:19:17,310 --> 00:19:19,440
Portals are like iframes.

437
00:19:19,440 --> 00:19:21,570
You can create one
as an embed element

438
00:19:21,570 --> 00:19:23,850
of a page using a portal tag.

439
00:19:23,850 --> 00:19:27,390
At this point, it looks pretty
much the same as an iframe,

440
00:19:27,390 --> 00:19:32,190
and then navigate to an element
by calling an activate API.

441
00:19:32,190 --> 00:19:34,620
When that API is
called, the element

442
00:19:34,620 --> 00:19:39,000
is detached from the page and
becomes the new top-level page.

443
00:19:39,000 --> 00:19:44,670
You can also add an animation
to smooth out the transition.

444
00:19:44,670 --> 00:19:47,570
So what are the differences
between portals and iframes?

445
00:19:47,570 --> 00:19:52,830
The biggest difference is that
portals can be navigated into.

446
00:19:52,830 --> 00:19:54,620
And as I understand
the differences,

447
00:19:54,620 --> 00:19:58,224
the portals are always created
as top-level browsing context,

448
00:19:58,224 --> 00:19:59,682
whereas as it can
still be embedded

449
00:19:59,682 --> 00:20:02,300
in a page like iframes.

450
00:20:02,300 --> 00:20:03,620
Let's recap the benefits.

451
00:20:03,620 --> 00:20:06,530
Portals enable seamless
page transitions,

452
00:20:06,530 --> 00:20:08,930
like what you get
with single page apps,

453
00:20:08,930 --> 00:20:11,630
but without having to
re-architect your site,

454
00:20:11,630 --> 00:20:14,640
and even across
different origins.

455
00:20:14,640 --> 00:20:17,420
So you can just build you
website using multiple pages,

456
00:20:17,420 --> 00:20:20,860
and can connect
them with portals.

457
00:20:20,860 --> 00:20:23,810
So here's the example of
code snippet of portals.

458
00:20:23,810 --> 00:20:27,080
You can create a portal
as an HTML element,

459
00:20:27,080 --> 00:20:30,500
and then can append it to
the page to help it embed.

460
00:20:30,500 --> 00:20:33,320
Then when the user touches
the embedded portal,

461
00:20:33,320 --> 00:20:35,480
you can show a nice animation.

462
00:20:35,480 --> 00:20:39,730
And the calls activate the API
to make the actual transition.

463
00:20:39,730 --> 00:20:42,290
That's it.

464
00:20:42,290 --> 00:20:43,490
Exciting, isn't it?

465
00:20:43,490 --> 00:20:46,500


466
00:20:46,500 --> 00:20:48,960
And you probably want to
know the current status.

467
00:20:48,960 --> 00:20:50,770
We have an explainer on GitHub.

468
00:20:50,770 --> 00:20:55,310
Visit bit.ly/portals-spec
to learn more.

469
00:20:55,310 --> 00:20:57,590
Chrome implementation
is in progress.

470
00:20:57,590 --> 00:20:59,930
We are aiming for an
origin trial next year,

471
00:20:59,930 --> 00:21:02,900
and are eagerly awaiting
your feedback that will

472
00:21:02,900 --> 00:21:05,960
help us refine this proposal.

473
00:21:05,960 --> 00:21:08,540
So that's basically all
from us about low friction

474
00:21:08,540 --> 00:21:09,380
to zero friction.

475
00:21:09,380 --> 00:21:12,940
But I have one more
topic, Bundled Exchanges.

476
00:21:12,940 --> 00:21:17,020
So remember that we hinted
at Bundled Exchanges earlier?

477
00:21:17,020 --> 00:21:20,870
They allow multiple resources
to be bundled in one package.

478
00:21:20,870 --> 00:21:24,050
And you might be
wondering about the kind

479
00:21:24,050 --> 00:21:26,260
of status of the development.

480
00:21:26,260 --> 00:21:30,080
So while the Chrome team has
started building a prototype

481
00:21:30,080 --> 00:21:32,880
to explore the
possibilities, we think

482
00:21:32,880 --> 00:21:35,480
this could enable
interesting use case

483
00:21:35,480 --> 00:21:39,530
scenarios, like offering PWA
installation, and much more.

484
00:21:39,530 --> 00:21:42,740
Here's an example up
at News-Reader PWA.

485
00:21:42,740 --> 00:21:45,050
This is based on
[INAUDIBLE] read up

486
00:21:45,050 --> 00:21:48,180
built by one of our
awesome [INAUDIBLE] folks,

487
00:21:48,180 --> 00:21:51,870
and now runs on a custom Chrome
build to use Bundled Exchanges.

488
00:21:51,870 --> 00:21:56,790
The app allows the user to read
a news site in a reliable way

489
00:21:56,790 --> 00:21:58,720
by letting [INAUDIBLE]
circle download

490
00:21:58,720 --> 00:22:01,490
and save the
articles as bundles,

491
00:22:01,490 --> 00:22:04,820
if the news site provides them,
so that the user can later

492
00:22:04,820 --> 00:22:07,730
read the saved articles
from multiple sites,

493
00:22:07,730 --> 00:22:09,620
even while offline.

494
00:22:09,620 --> 00:22:11,120
Notice that the
articles are still

495
00:22:11,120 --> 00:22:13,580
shown as coming from
the original news sites.

496
00:22:13,580 --> 00:22:17,280
And the sites keep maintaining
the control over them.

497
00:22:17,280 --> 00:22:19,130
Here's another example.

498
00:22:19,130 --> 00:22:23,090
As you may know, loading a large
number of resources is costly.

499
00:22:23,090 --> 00:22:25,710
In the bundling of them,
in one big JavaScript file

500
00:22:25,710 --> 00:22:29,930
using bundles like webpack
is a very popular technique.

501
00:22:29,930 --> 00:22:33,050
We did an experiment to see
if Bundled Exchanges can

502
00:22:33,050 --> 00:22:36,080
be used there, which
could allow the browser

503
00:22:36,080 --> 00:22:39,170
to process in the cache
individual resources

504
00:22:39,170 --> 00:22:42,830
in the bundle, without
executing the JavaScript.

505
00:22:42,830 --> 00:22:45,290
And one of our results
looked like this.

506
00:22:45,290 --> 00:22:48,880
While still preliminary, it
looks promising, we think.

507
00:22:48,880 --> 00:22:50,782
So we think there's
some potential

508
00:22:50,782 --> 00:22:52,115
and want to know what you think.

509
00:22:52,115 --> 00:22:54,234


510
00:22:54,234 --> 00:22:56,650
RUDY GALFI: All right, so let's
go back to the main topic,

511
00:22:56,650 --> 00:22:58,570
and wrap up this talk.

512
00:22:58,570 --> 00:23:01,330
So we talked about two new
proposals for zero friction

513
00:23:01,330 --> 00:23:02,890
user experiences.

514
00:23:02,890 --> 00:23:05,800
First, web packaging enables
privacy-preserving instant

515
00:23:05,800 --> 00:23:07,060
navigations.

516
00:23:07,060 --> 00:23:09,910
And second, portals enable
seamless transitions

517
00:23:09,910 --> 00:23:11,750
between pages or sites.

518
00:23:11,750 --> 00:23:16,090
Combined together to enable
zero friction page transitions

519
00:23:16,090 --> 00:23:20,560
on top of any web pages,
even across origins.

520
00:23:20,560 --> 00:23:22,560
KINUKO YASUDA: And here's
a look at the roadmap.

521
00:23:22,560 --> 00:23:25,290
Our plan is to ship
Signed Exchanges on stable

522
00:23:25,290 --> 00:23:28,180
by the middle of 2019,
and also, to start

523
00:23:28,180 --> 00:23:32,269
on origin trial for portals
sometime around then, as well.

524
00:23:32,269 --> 00:23:33,810
RUDY GALFI: And so
for Google Search,

525
00:23:33,810 --> 00:23:36,810
we're really excited about both
Signed Exchanges and portals

526
00:23:36,810 --> 00:23:39,570
as a path to building more
zero friction user experiences

527
00:23:39,570 --> 00:23:41,070
across the whole web.

528
00:23:41,070 --> 00:23:42,570
Following the
footsteps of the demo

529
00:23:42,570 --> 00:23:44,460
you just saw
earlier in AMP, we'd

530
00:23:44,460 --> 00:23:47,640
like to launch support for AMP
Signed Exchanges next year.

531
00:23:47,640 --> 00:23:50,700
We're also actively working
on how non-AMP pages can

532
00:23:50,700 --> 00:23:53,340
adopt these same technologies
for highly optimized user

533
00:23:53,340 --> 00:23:55,045
experiences.

534
00:23:55,045 --> 00:23:57,420
KINUKO YASUDA: We believe that
there will eventually just

535
00:23:57,420 --> 00:23:59,730
have highly optimized
content on the web,

536
00:23:59,730 --> 00:24:02,370
regardless for whether
it's AMP or not

537
00:24:02,370 --> 00:24:05,310
with all the standard
work we are doing today.

538
00:24:05,310 --> 00:24:08,450
And we've been engaging
various partners as well

539
00:24:08,450 --> 00:24:10,290
as other browser
vendors, because we

540
00:24:10,290 --> 00:24:13,500
want to refine what we have, and
want to make sure that it will

541
00:24:13,500 --> 00:24:18,540
help them and developers like
you achieve highly optimized

542
00:24:18,540 --> 00:24:19,710
user experiences.

543
00:24:19,710 --> 00:24:22,290
For instance, such teams
at Bing, [INAUDIBLE]

544
00:24:22,290 --> 00:24:26,010
Japan, Bai [INAUDIBLE],, content
publishers and web developers

545
00:24:26,010 --> 00:24:30,000
at 1-800-Flowers, Hatena,
Yeung Jump Web Comics,

546
00:24:30,000 --> 00:24:33,300
CDNs and certificate
authorities, such as DigiCert

547
00:24:33,300 --> 00:24:36,200
and Cloudflare, as
well as folks working

548
00:24:36,200 --> 00:24:40,087
on the decentralized
web at Protocol Labs.

549
00:24:40,087 --> 00:24:41,920
RUDY GALFI: We hugely
rely on your feedback,

550
00:24:41,920 --> 00:24:44,152
and are eagerly awaiting
to hear what you think.

551
00:24:44,152 --> 00:24:46,110
Here are the important
links that we referenced

552
00:24:46,110 --> 00:24:48,193
and that you can check out
to learn more and share

553
00:24:48,193 --> 00:24:49,870
your opinion, and give us input.

554
00:24:49,870 --> 00:24:52,960
You can also come to the Ask
Chrome area in the next break.

555
00:24:52,960 --> 00:24:55,270
And we'll be there to
answer your questions.

556
00:24:55,270 --> 00:24:57,320
We're really excited about
the future of the web

557
00:24:57,320 --> 00:24:58,900
and enabling the
kinds of experiences

558
00:24:58,900 --> 00:25:01,060
that we showed today,
and will appreciate

559
00:25:01,060 --> 00:25:04,210
your help in joining us to move
these technologies forward.

560
00:25:04,210 --> 00:25:04,990
Thank you.

561
00:25:04,990 --> 00:25:08,940
[MUSIC PLAYING]

562
00:25:08,940 --> 00:25:15,333
