1
00:00:00,000 --> 00:00:03,856
[MUSIC PLAYING]

2
00:00:03,856 --> 00:00:06,007


3
00:00:06,007 --> 00:00:08,340
NICOLE SULLIVAN: Hi, and
welcome to the day two keynote.

4
00:00:08,340 --> 00:00:09,300
My name is Nicole.

5
00:00:09,300 --> 00:00:11,807
I'm a PM on the Chrome
Web Platform team.

6
00:00:11,807 --> 00:00:13,140
MALTE UBL: Hi, my name is Malte.

7
00:00:13,140 --> 00:00:16,120
I work on AMP and JavaScript
infrastructure at Google.

8
00:00:16,120 --> 00:00:18,630
So actually, this is a little
bit awkward today because,

9
00:00:18,630 --> 00:00:19,706
for the second keynote--

10
00:00:19,706 --> 00:00:22,080
and Ben and [? Dion ?] already
talked about, effectively,

11
00:00:22,080 --> 00:00:23,770
everything yesterday--

12
00:00:23,770 --> 00:00:27,010
so we thought we'd do
something slightly different.

13
00:00:27,010 --> 00:00:29,820
So normally, at a Chrome
Dev Summit keynote,

14
00:00:29,820 --> 00:00:31,830
we'd walk through all
the new, exciting APIs

15
00:00:31,830 --> 00:00:34,210
that the [INAUDIBLE] platform
makes available for you.

16
00:00:34,210 --> 00:00:36,280
And so we actually
are going to do that.

17
00:00:36,280 --> 00:00:39,340
But first, we want to talk about
something slightly different.

18
00:00:39,340 --> 00:00:42,109
We want to talk
about web frameworks.

19
00:00:42,109 --> 00:00:44,400
NICOLE SULLIVAN: Developers
who build for the web often

20
00:00:44,400 --> 00:00:46,290
choose to use a framework.

21
00:00:46,290 --> 00:00:48,090
In the past, changes
to the web platform,

22
00:00:48,090 --> 00:00:51,000
didn't necessarily take the
frameworks into account,

23
00:00:51,000 --> 00:00:52,890
and changes to frameworks
didn't necessarily

24
00:00:52,890 --> 00:00:54,690
take the web platform
into account.

25
00:00:54,690 --> 00:00:58,050
We think both the web platform
and frameworks benefit

26
00:00:58,050 --> 00:00:59,880
from a close
collaboration, and so we're

27
00:00:59,880 --> 00:01:03,251
out to make that happen.

28
00:01:03,251 --> 00:01:05,209
Obviously, if you're
building something simple,

29
00:01:05,209 --> 00:01:07,810
it makes sense to choose
simple technologies.

30
00:01:07,810 --> 00:01:10,300
But as soon as an app
is sufficiently complex,

31
00:01:10,300 --> 00:01:13,900
in most cases, developers
choose to use a framework.

32
00:01:13,900 --> 00:01:18,520
A few months ago, I put out
a very, very methodologically

33
00:01:18,520 --> 00:01:21,820
correct Twitter
poll, asking people

34
00:01:21,820 --> 00:01:23,530
why they choose
to use frameworks,

35
00:01:23,530 --> 00:01:25,360
and got back a whole
bunch of answers.

36
00:01:25,360 --> 00:01:27,250
And this one, in
particular, sort of

37
00:01:27,250 --> 00:01:29,860
resonated with a lot of people.

38
00:01:29,860 --> 00:01:31,690
"You can't not use a framework.

39
00:01:31,690 --> 00:01:33,310
Your only real choice
is to either use

40
00:01:33,310 --> 00:01:36,340
one that's open source,
documented, tested, supported,

41
00:01:36,340 --> 00:01:37,810
maintained, mature and proven"--

42
00:01:37,810 --> 00:01:40,600
and I think we'd all throw,
you can stack overflow stuff

43
00:01:40,600 --> 00:01:42,340
about it into that one.

44
00:01:42,340 --> 00:01:45,670
Or the option B is you
cobble together some garbage,

45
00:01:45,670 --> 00:01:47,410
unmaintainable stuff yourself.

46
00:01:47,410 --> 00:01:48,790
MALTE UBL: I've made a
few of those, actually.

47
00:01:48,790 --> 00:01:49,150
NICOLE SULLIVAN:
Yeah, I might have

48
00:01:49,150 --> 00:01:51,610
made one or to have
those in my day before.

49
00:01:51,610 --> 00:01:53,260
MALTE UBL: And
given that, we just

50
00:01:53,260 --> 00:01:55,270
want to start by
recognizing that frameworks

51
00:01:55,270 --> 00:01:56,350
are part of the web.

52
00:01:56,350 --> 00:01:58,540
And if you're using
a framework, you

53
00:01:58,540 --> 00:02:01,430
are in fact using the platform.

54
00:02:01,430 --> 00:02:04,150
So let's go from there
and kind of extrapolate

55
00:02:04,150 --> 00:02:09,130
to the further web stack that
is based on that insight.

56
00:02:09,130 --> 00:02:11,750
So on the bottom, obviously,
you have the web primitives.

57
00:02:11,750 --> 00:02:15,190
So that would be the Dom, the
Fetch API, service workers,

58
00:02:15,190 --> 00:02:17,432
stuff like that.

59
00:02:17,432 --> 00:02:19,890
NICOLE SULLIVAN: Then above
that, we have built-in modules.

60
00:02:19,890 --> 00:02:21,557
Built-in modules
are pretty exciting.

61
00:02:21,557 --> 00:02:22,390
They're a new thing.

62
00:02:22,390 --> 00:02:26,860
It's the idea that we can build
in a layered way for the web.

63
00:02:26,860 --> 00:02:29,940
They're high-level APIs
that solve something

64
00:02:29,940 --> 00:02:32,070
like virtual scrolling
or carousels.

65
00:02:32,070 --> 00:02:33,804
I think we all love
to hate the carousel.

66
00:02:33,804 --> 00:02:35,220
But if we're truly
honest, they're

67
00:02:35,220 --> 00:02:38,140
on almost every site
in the known universe.

68
00:02:38,140 --> 00:02:40,140
So we can build something
like a high-level API,

69
00:02:40,140 --> 00:02:42,480
like a virtual
scroller, and then that

70
00:02:42,480 --> 00:02:44,640
drives out the
low-level APIs that we

71
00:02:44,640 --> 00:02:48,120
need to make those experiences
accessible, searchable, truly

72
00:02:48,120 --> 00:02:49,410
fast.

73
00:02:49,410 --> 00:02:52,860
Those low-level APIs can then
be used by the entire ecosystem

74
00:02:52,860 --> 00:02:54,360
of virtual scrollers.

75
00:02:54,360 --> 00:02:56,610
That makes a big difference
because it allows everyone

76
00:02:56,610 --> 00:02:58,072
to level up together.

77
00:02:58,072 --> 00:02:58,780
MALTE UBL: Right.

78
00:02:58,780 --> 00:03:00,630
Then one level up, we've
got the frameworks.

79
00:03:00,630 --> 00:03:03,660
So that would be like
React, Angular, Polymer,

80
00:03:03,660 --> 00:03:07,830
or higher-level stuff, like
Next.js and Sapper that kind of

81
00:03:07,830 --> 00:03:10,500
treat you to everything that you
need to build an application.

82
00:03:10,500 --> 00:03:12,500
So obviously, these
aren't standardized.

83
00:03:12,500 --> 00:03:14,790
They're not web standards,
but most applications

84
00:03:14,790 --> 00:03:15,640
use one of these.

85
00:03:15,640 --> 00:03:18,969
And so we think of them
as part of the platform.

86
00:03:18,969 --> 00:03:21,010
NICOLE SULLIVAN: The next
part is web components.

87
00:03:21,010 --> 00:03:22,030
And you're probably
thinking, wait,

88
00:03:22,030 --> 00:03:23,196
that doesn't make any sense.

89
00:03:23,196 --> 00:03:25,900
Web components are a web
primitive or a web standard.

90
00:03:25,900 --> 00:03:28,450
I'm not talking about the web
components, the standards,

91
00:03:28,450 --> 00:03:30,910
I'm talking about your web
components-- your date picker

92
00:03:30,910 --> 00:03:32,450
or, I don't know, tabs.

93
00:03:32,450 --> 00:03:33,700
MALTE UBL: Maybe the carousel.

94
00:03:33,700 --> 00:03:35,241
NICOLE SULLIVAN:
Maybe your carousel.

95
00:03:35,241 --> 00:03:36,290
Sorry.

96
00:03:36,290 --> 00:03:36,790
Yeah.

97
00:03:36,790 --> 00:03:38,680
These are the web
components that

98
00:03:38,680 --> 00:03:40,420
layer on top of your stack.

99
00:03:40,420 --> 00:03:41,920
Why it's important
to put them there

100
00:03:41,920 --> 00:03:44,378
is because they're an important
measure of interoperability

101
00:03:44,378 --> 00:03:46,672
between different
parts of your system.

102
00:03:46,672 --> 00:03:47,380
MALTE UBL: Right.

103
00:03:47,380 --> 00:03:49,420
To kind of make a point,
let's do a quick poll here.

104
00:03:49,420 --> 00:03:50,544
NICOLE SULLIVAN: Ooh, yeah.

105
00:03:50,544 --> 00:03:53,241
MALTE UBL: Who here in this room
has built a React application?

106
00:03:53,241 --> 00:03:53,740
All right.

107
00:03:53,740 --> 00:03:54,920
That's most hands.

108
00:03:54,920 --> 00:03:55,430
So if you--

109
00:03:55,430 --> 00:03:56,090
NICOLE SULLIVAN:
Oh, keep them up.

110
00:03:56,090 --> 00:03:56,270
MALTE UBL: No, no.

111
00:03:56,270 --> 00:03:56,540
Keep it up.

112
00:03:56,540 --> 00:03:56,620
NICOLE SULLIVAN: Keep them up.

113
00:03:56,620 --> 00:03:57,536
MALTE UBL: Keep it up.

114
00:03:57,536 --> 00:03:58,100
Keep it up.

115
00:03:58,100 --> 00:04:01,430
If anywhere in your company
you also have an Angular,

116
00:04:01,430 --> 00:04:06,974
jQuery, Backbone, Polymer,
anything like it, both hands.

117
00:04:06,974 --> 00:04:07,890
NICOLE SULLIVAN: Yeah.

118
00:04:07,890 --> 00:04:08,636
MALTE UBL: All right.

119
00:04:08,636 --> 00:04:09,670
So if that's the case--

120
00:04:09,670 --> 00:04:11,297
NICOLE SULLIVAN: I
love your honesty.

121
00:04:11,297 --> 00:04:13,630
MALTE UBL: Wouldn't it be
nice if you could use the date

122
00:04:13,630 --> 00:04:14,837
picker in both of those?

123
00:04:14,837 --> 00:04:16,420
If you could have a
design system that

124
00:04:16,420 --> 00:04:18,610
spans your entire
applications suite,

125
00:04:18,610 --> 00:04:20,050
no other framework
gets built in.

126
00:04:20,050 --> 00:04:22,630
So that's where we think
the leaf components, web

127
00:04:22,630 --> 00:04:25,909
components, are really the
right technology to build that.

128
00:04:25,909 --> 00:04:27,950
NICOLE SULLIVAN: There's,
however, a real problem

129
00:04:27,950 --> 00:04:29,540
with web development today.

130
00:04:29,540 --> 00:04:31,190
We're struggling to
make stuff that's

131
00:04:31,190 --> 00:04:33,765
really fast and responsive and
has buttery-smooth animations.

132
00:04:33,765 --> 00:04:36,140
And I think we're struggling
because, in a bunch of ways,

133
00:04:36,140 --> 00:04:37,890
it's actually really hard.

134
00:04:37,890 --> 00:04:39,140
Not everybody struggles.

135
00:04:39,140 --> 00:04:41,420
There are examples of
sites that achieve this.

136
00:04:41,420 --> 00:04:44,750
But at scale, what we observe
is that our performance goals

137
00:04:44,750 --> 00:04:46,352
aren't being met.

138
00:04:46,352 --> 00:04:47,060
MALTE UBL: Right.

139
00:04:47,060 --> 00:04:50,665
And so what we're observing
is that, in web dev today,

140
00:04:50,665 --> 00:04:52,790
we often have to make that
choice between developer

141
00:04:52,790 --> 00:04:53,930
experience--

142
00:04:53,930 --> 00:04:55,640
how we feel as
developers-- and user

143
00:04:55,640 --> 00:04:57,410
experience-- how users feel.

144
00:04:57,410 --> 00:04:59,970
And that shouldn't
really be how things are.

145
00:04:59,970 --> 00:05:03,080
In the vast majority of
cases, developer experience

146
00:05:03,080 --> 00:05:06,110
combined to accumulate a
great user experience-- that's

147
00:05:06,110 --> 00:05:07,680
just not how it works today.

148
00:05:07,680 --> 00:05:10,310
But if we can achieve those
things coming together,

149
00:05:10,310 --> 00:05:12,624
the web will be
better for everyone.

150
00:05:12,624 --> 00:05:14,040
NICOLE SULLIVAN:
This is why we're

151
00:05:14,040 --> 00:05:15,780
so excited about frameworks.

152
00:05:15,780 --> 00:05:18,210
Yes, frameworks sometimes
make web apps slower.

153
00:05:18,210 --> 00:05:19,830
That's a reality.

154
00:05:19,830 --> 00:05:22,590
But they're also our best
hope to make them faster.

155
00:05:22,590 --> 00:05:23,730
MALTE UBL: Right.

156
00:05:23,730 --> 00:05:24,730
That's a bold statement.

157
00:05:24,730 --> 00:05:25,560
NICOLE SULLIVAN: It
is a bold statement.

158
00:05:25,560 --> 00:05:26,330
MALTE UBL: Right?

159
00:05:26,330 --> 00:05:28,480
To prove that this is
actually happening,

160
00:05:28,480 --> 00:05:30,810
we thought, wouldn't it
be nice if we celebrated

161
00:05:30,810 --> 00:05:33,360
all the great improvements
that framework

162
00:05:33,360 --> 00:05:35,170
has made through this year?

163
00:05:35,170 --> 00:05:36,690
Let's start with React.

164
00:05:36,690 --> 00:05:38,670
They have done a bunch
of foundational work.

165
00:05:38,670 --> 00:05:41,370
For example, they're working
towards making code splitting

166
00:05:41,370 --> 00:05:43,410
something that's
first class supported

167
00:05:43,410 --> 00:05:45,250
in the framework,
which is really nice.

168
00:05:45,250 --> 00:05:46,708
And then they've
done a lot of work

169
00:05:46,708 --> 00:05:49,020
to break up the rendering
of huge dump trees

170
00:05:49,020 --> 00:05:49,890
into tiny chunks.

171
00:05:49,890 --> 00:05:51,720
So that if you
have a big update,

172
00:05:51,720 --> 00:05:54,030
it doesn't lock down your
browser for many seconds.

173
00:05:54,030 --> 00:05:56,035
Everything's kind of
done in small bricks.

174
00:05:56,035 --> 00:05:57,660
NICOLE SULLIVAN: This
is a theme you're

175
00:05:57,660 --> 00:05:59,451
going to hear us talking
about a few times.

176
00:05:59,451 --> 00:06:00,191
MALTE UBL: Yeah.

177
00:06:00,191 --> 00:06:02,190
NICOLE SULLIVAN: Angular
made improvements, too.

178
00:06:02,190 --> 00:06:04,637
The Angular CLI enabled
performance budgets.

179
00:06:04,637 --> 00:06:05,220
This is great.

180
00:06:05,220 --> 00:06:08,220
Because how often do you not
realize that you actually

181
00:06:08,220 --> 00:06:11,130
alienated a bunch of users by
adding that one more library,

182
00:06:11,130 --> 00:06:12,800
or NPM installing
something, then it

183
00:06:12,800 --> 00:06:15,300
installed a whole
bunch of other things?

184
00:06:15,300 --> 00:06:18,950
Angular also did a bunch of work
to remove unnecessary polyfils,

185
00:06:18,950 --> 00:06:19,890
and that's fantastic.

186
00:06:19,890 --> 00:06:22,057
We don't want polyfils for
the most modern browsers.

187
00:06:22,057 --> 00:06:22,765
MALTE UBL: Right.

188
00:06:22,765 --> 00:06:25,110
Speaking of which, Vue
basically did the same thing

189
00:06:25,110 --> 00:06:26,700
with a thing called modern mode.

190
00:06:26,700 --> 00:06:29,158
So you only ship the modern
code to modern browsers, right?

191
00:06:29,158 --> 00:06:31,300
And that's effectively
the same idea.

192
00:06:31,300 --> 00:06:33,300
And that's why we're so
excited about frameworks

193
00:06:33,300 --> 00:06:36,210
bringing this best
practice to all the users.

194
00:06:36,210 --> 00:06:37,986
Similarly, with another
one, just making--

195
00:06:37,986 --> 00:06:39,360
preloading,
prefetching something

196
00:06:39,360 --> 00:06:41,552
the framework does by default.

197
00:06:41,552 --> 00:06:44,010
NICOLE SULLIVAN: Polymer did
some good work this year, too.

198
00:06:44,010 --> 00:06:45,540
They're transitioning
to lit-element

199
00:06:45,540 --> 00:06:47,790
for super small components.

200
00:06:47,790 --> 00:06:50,162
And they also got faster
because, yay, Firefox shipped

201
00:06:50,162 --> 00:06:51,370
native web component support.

202
00:06:51,370 --> 00:06:52,700
MALTE UBL: Woo!

203
00:06:52,700 --> 00:06:53,200
Cool.

204
00:06:53,200 --> 00:06:54,240
Let's talk about Svelte.

205
00:06:54,240 --> 00:06:56,460
They get a bullet point for
already being super fast.

206
00:06:56,460 --> 00:06:58,210
NICOLE SULLIVAN: Yeah,
it's kind of hard--

207
00:06:58,210 --> 00:07:00,270
with Svelte, it was like,
well, they're so fast,

208
00:07:00,270 --> 00:07:01,480
what do we even say about this?

209
00:07:01,480 --> 00:07:01,800
MALTE UBL: Right.

210
00:07:01,800 --> 00:07:03,270
But I think this
was a great example.

211
00:07:03,270 --> 00:07:05,270
So they built a Hacker
News app, and they did it

212
00:07:05,270 --> 00:07:07,037
in an idiomatic
way, so not using--

213
00:07:07,037 --> 00:07:09,120
NICOLE SULLIVAN: It wasn't
super highly optimized.

214
00:07:09,120 --> 00:07:09,900
MALTE UBL: --super
ridiculous hacks, right?

215
00:07:09,900 --> 00:07:11,550
So everything in that app--

216
00:07:11,550 --> 00:07:14,880
HTML, CSS, JavaScript--
together is under 20 kilobytes,

217
00:07:14,880 --> 00:07:17,000
which is just amazing.

218
00:07:17,000 --> 00:07:18,500
NICOLE SULLIVAN:
AMP did some good--

219
00:07:18,500 --> 00:07:20,540
Malte did some good stuff, too.

220
00:07:20,540 --> 00:07:22,234
So this, apparently,
is the only feature

221
00:07:22,234 --> 00:07:24,275
he shipped this year,
because now he's a manager.

222
00:07:24,275 --> 00:07:25,730
MALTE UBL: Yeah, I'm sorry.

223
00:07:25,730 --> 00:07:27,980
NICOLE SULLIVAN: So he
ships feature policies

224
00:07:27,980 --> 00:07:29,601
against synchronous
XHR for all ads.

225
00:07:29,601 --> 00:07:31,100
If you're going to
ship one feature,

226
00:07:31,100 --> 00:07:32,210
this is a pretty darn good one.

227
00:07:32,210 --> 00:07:32,360
MALTE UBL: Right.

228
00:07:32,360 --> 00:07:34,651
If you're [INAUDIBLE],, you
get to put your own feature

229
00:07:34,651 --> 00:07:35,585
on the slide.

230
00:07:35,585 --> 00:07:36,932
NICOLE SULLIVAN: Nice.

231
00:07:36,932 --> 00:07:38,890
He also reduced-- or
sorry, they also reduced--

232
00:07:38,890 --> 00:07:40,414
MALTE UBL: No,
definitely not me.

233
00:07:40,414 --> 00:07:42,830
NICOLE SULLIVAN: --reduced the
JS size on the wire by 20%,

234
00:07:42,830 --> 00:07:45,374
by enabling Brotli
compression algorithm.

235
00:07:45,374 --> 00:07:46,790
We love this kind
of thing, right?

236
00:07:46,790 --> 00:07:48,989
Because how great is it
that all you have to do

237
00:07:48,989 --> 00:07:50,780
is turn on a different
kind of compression,

238
00:07:50,780 --> 00:07:53,930
and you get 20% reduction
in size on the wire?

239
00:07:53,930 --> 00:07:55,130
MALTE UBL: Right.

240
00:07:55,130 --> 00:07:58,647
Moving on to Ember, which
removed jQuery from the default

241
00:07:58,647 --> 00:07:59,480
bundle, by the way--

242
00:07:59,480 --> 00:08:01,492
I have a jQuery t-shirt.

243
00:08:01,492 --> 00:08:04,610
Just leaving that out there--
making their bundle size 20%

244
00:08:04,610 --> 00:08:05,990
smaller, which is great.

245
00:08:05,990 --> 00:08:08,114
And they did it in a way
that's backward compatible

246
00:08:08,114 --> 00:08:09,980
so that people can
slowly migrate to this.

247
00:08:09,980 --> 00:08:10,830
NICOLE SULLIVAN: Yeah,
it's pretty neat.

248
00:08:10,830 --> 00:08:12,830
They actually, as far
as I understand, made it

249
00:08:12,830 --> 00:08:15,212
so that anyone can turn
on and off old code--

250
00:08:15,212 --> 00:08:15,920
MALTE UBL: Right.

251
00:08:15,920 --> 00:08:16,925
NICOLE SULLIVAN: --using
the same functionality.

252
00:08:16,925 --> 00:08:18,170
So that's pretty great.

253
00:08:18,170 --> 00:08:20,150
MALTE UBL: And then
another theme here,

254
00:08:20,150 --> 00:08:22,280
implementing the incremental
progressive rendering

255
00:08:22,280 --> 00:08:25,760
with batched rehydration,
which again, comes down

256
00:08:25,760 --> 00:08:29,150
to that "chunking of work"
theme, which we're seeing here

257
00:08:29,150 --> 00:08:31,340
all the time.

258
00:08:31,340 --> 00:08:31,840
Great.

259
00:08:31,840 --> 00:08:34,789
So to summarize this, we
really want to get to a state

260
00:08:34,789 --> 00:08:38,270
where not only the super experts
can make great web experiences,

261
00:08:38,270 --> 00:08:39,844
everyone should
be able to do it.

262
00:08:39,844 --> 00:08:42,260
And frameworks are an integral
part of making that happen.

263
00:08:42,260 --> 00:08:44,120
Today, we feel that we--

264
00:08:44,120 --> 00:08:46,760
and by we, I mean browsers,
framework and tools--

265
00:08:46,760 --> 00:08:48,554
have under-invested
in tools that

266
00:08:48,554 --> 00:08:49,970
focus on combining
great developer

267
00:08:49,970 --> 00:08:51,900
experience with a focus
on user experience.

268
00:08:51,900 --> 00:08:53,820
Well, we can make this
happen as a community.

269
00:08:53,820 --> 00:08:56,120
By integrating the best
practices for performance

270
00:08:56,120 --> 00:08:58,760
into frameworks, all
users of those frameworks

271
00:08:58,760 --> 00:09:00,580
automatically get
all the benefits.

272
00:09:00,580 --> 00:09:02,163
And that's how we
think we can achieve

273
00:09:02,163 --> 00:09:06,240
great outcomes for users
at the scale of the web.

274
00:09:06,240 --> 00:09:07,179
All right.

275
00:09:07,179 --> 00:09:08,720
NICOLE SULLIVAN: To
make this happen,

276
00:09:08,720 --> 00:09:11,730
we're announcing
three things today.

277
00:09:11,730 --> 00:09:13,850
The first one is,
we are including

278
00:09:13,850 --> 00:09:17,317
frameworks in the Chrome
Intent to Implement process.

279
00:09:17,317 --> 00:09:19,400
How many folks know about
our intent to implement,

280
00:09:19,400 --> 00:09:21,170
intent to ship stuff?

281
00:09:21,170 --> 00:09:21,710
A few.

282
00:09:21,710 --> 00:09:21,980
Great.

283
00:09:21,980 --> 00:09:22,730
That's awesome.

284
00:09:22,730 --> 00:09:25,070
So we have, basically, two
important check points--

285
00:09:25,070 --> 00:09:26,600
we have more than
that, but two very

286
00:09:26,600 --> 00:09:27,800
important check
points-- when we're

287
00:09:27,800 --> 00:09:29,180
going to ship a new feature.

288
00:09:29,180 --> 00:09:31,400
One is our intent to
implement and the other

289
00:09:31,400 --> 00:09:33,230
is our intent to ship.

290
00:09:33,230 --> 00:09:35,686
At both points, when we are
about to build something

291
00:09:35,686 --> 00:09:37,310
and when we're about
to ship something,

292
00:09:37,310 --> 00:09:38,790
we want to get a
lot of feedback.

293
00:09:38,790 --> 00:09:41,270
And so we go through
this intent process

294
00:09:41,270 --> 00:09:44,450
in order to intentionally go
in and draw in that feedback.

295
00:09:44,450 --> 00:09:48,410
Previously, we had listed
web developers as folks

296
00:09:48,410 --> 00:09:50,240
that we wanted to
get feedback from.

297
00:09:50,240 --> 00:09:52,070
But now, we're actually
explicitly adding

298
00:09:52,070 --> 00:09:55,860
frameworks to that intent
to implement process.

299
00:09:55,860 --> 00:09:56,730
MALTE UBL: Right.

300
00:09:56,730 --> 00:09:59,670
And secondly, we want to put
real dollars behind this.

301
00:09:59,670 --> 00:10:01,760
So we're starting with
a budget of $200,000

302
00:10:01,760 --> 00:10:04,370
to kickstart developing of
performance-related features

303
00:10:04,370 --> 00:10:05,720
in frameworks.

304
00:10:05,720 --> 00:10:07,970
In particular, we make
available a list of performance

305
00:10:07,970 --> 00:10:10,640
features that we'd love
all frameworks to provide

306
00:10:10,640 --> 00:10:14,130
to the users by default. Folks
who are working on a framework

307
00:10:14,130 --> 00:10:16,570
can ask for funding
to do the actual work.

308
00:10:16,570 --> 00:10:18,500
We're still working
out the exact details.

309
00:10:18,500 --> 00:10:21,290
But if you're interested,
check out this bit.ly link

310
00:10:21,290 --> 00:10:22,652
for more information.

311
00:10:22,652 --> 00:10:24,775


312
00:10:24,775 --> 00:10:26,900
NICOLE SULLIVAN: The third
thing that we want to do

313
00:10:26,900 --> 00:10:29,890
is increase collaboration
between frameworks

314
00:10:29,890 --> 00:10:31,500
and the Chrome team.

315
00:10:31,500 --> 00:10:33,020
It's funny to
announce this today,

316
00:10:33,020 --> 00:10:35,190
because it's actually something
that we started in the summer.

317
00:10:35,190 --> 00:10:37,340
And we've been working
with a bunch of frameworks

318
00:10:37,340 --> 00:10:40,430
for the past several
months, but we

319
00:10:40,430 --> 00:10:42,470
are excited today
to talk through some

320
00:10:42,470 --> 00:10:44,792
of what we've started already.

321
00:10:44,792 --> 00:10:45,500
MALTE UBL: Right.

322
00:10:45,500 --> 00:10:47,940
That brings us to
our next section.

323
00:10:47,940 --> 00:10:49,830
It's very much
under construction.

324
00:10:49,830 --> 00:10:51,700
You heard that in
the intro today.

325
00:10:51,700 --> 00:10:53,330
What you're hearing
about here-- these

326
00:10:53,330 --> 00:10:54,740
aren't things that
are shipping tomorrow.

327
00:10:54,740 --> 00:10:56,720
Some of them you can
try out a little bit.

328
00:10:56,720 --> 00:10:58,170
Some of them are really just--

329
00:10:58,170 --> 00:10:58,790
NICOLE SULLIVAN:
Some behind a flag.

330
00:10:58,790 --> 00:10:59,120
MALTE UBL: Yeah.

331
00:10:59,120 --> 00:11:01,020
We're really just
thinking about them.

332
00:11:01,020 --> 00:11:04,160
So it's still very much time to
give us your feedback, your use

333
00:11:04,160 --> 00:11:07,784
cases, your examples, to work
out how they really work.

334
00:11:07,784 --> 00:11:09,950
NICOLE SULLIVAN: The first
one we want to talk about

335
00:11:09,950 --> 00:11:11,600
is Display Locking.

336
00:11:11,600 --> 00:11:14,040
We basically don't want to
update the DOM inadvertently,

337
00:11:14,040 --> 00:11:16,160
and so this gives
us a way to lock it.

338
00:11:16,160 --> 00:11:19,370
Before I joined Google,
there-- well, many times,

339
00:11:19,370 --> 00:11:22,060
I think this is one of the
most requested features.

340
00:11:22,060 --> 00:11:26,510
But before I joined Google, the
Polymer team and the Paint team

341
00:11:26,510 --> 00:11:28,970
had a bunch of conversations
about a new primitive

342
00:11:28,970 --> 00:11:30,512
called Display Locking.

343
00:11:30,512 --> 00:11:32,720
The idea of Display Locking
is that you can basically

344
00:11:32,720 --> 00:11:35,090
lock down a section
of your DOM, and we

345
00:11:35,090 --> 00:11:37,790
won't trigger render and other
things on that bit of DOM

346
00:11:37,790 --> 00:11:41,030
until you unlock it and
say, OK, it's ready to go.

347
00:11:41,030 --> 00:11:41,799
It's super subtle.

348
00:11:41,799 --> 00:11:44,090
And it may not be something
you interact with directly,

349
00:11:44,090 --> 00:11:46,548
but it's definitely something
that frameworks need in order

350
00:11:46,548 --> 00:11:49,097
to eliminate unnecessary
browser work.

351
00:11:49,097 --> 00:11:50,930
Now, we're collaborating
with the React team

352
00:11:50,930 --> 00:11:52,220
to nail down the API.

353
00:11:52,220 --> 00:11:54,080
And we had an Intent
to Implement out

354
00:11:54,080 --> 00:11:55,020
about a month ago.

355
00:11:55,020 --> 00:11:57,120
So if you have comments,
we'd love to hear them.

356
00:11:57,120 --> 00:11:57,740
MALTE UBL: I have
a question, though.

357
00:11:57,740 --> 00:11:59,140
Is it related to that bocolor?

358
00:11:59,140 --> 00:12:00,415
NICOLE SULLIVAN: [LAUGHS]

359
00:12:00,415 --> 00:12:02,060
MALTE UBL: Because
I'm using every day.

360
00:12:02,060 --> 00:12:03,730
NICOLE SULLIVAN:
Yeah, absolutely.

361
00:12:03,730 --> 00:12:04,467
MALTE UBL: Nice.

362
00:12:04,467 --> 00:12:10,720
NICOLE SULLIVAN: [LAUGHS]
Well, this is kind of awkward.

363
00:12:10,720 --> 00:12:11,970
Is it working?

364
00:12:11,970 --> 00:12:13,040
MALTE UBL: I don't know.

365
00:12:13,040 --> 00:12:14,873
NICOLE SULLIVAN: It's
kind of strange to see

366
00:12:14,873 --> 00:12:17,660
a blank white screen in the
middle of a presentation.

367
00:12:17,660 --> 00:12:20,290
Why do we think that's OK
when web pages are loading?

368
00:12:20,290 --> 00:12:22,232
It's sort of-- ah,
what's going on?

369
00:12:22,232 --> 00:12:22,940
MALTE UBL: Right.

370
00:12:22,940 --> 00:12:25,700
Every time-- every single
time you load a new web page,

371
00:12:25,700 --> 00:12:28,190
the browser says, hm,
what's the good idea to do?

372
00:12:28,190 --> 00:12:30,490
Oh, yeah, I'm going
to paint white.

373
00:12:30,490 --> 00:12:32,695
And then it's going to
take a while, right?

374
00:12:32,695 --> 00:12:33,570
Why is that the case?

375
00:12:33,570 --> 00:12:34,730
So it shouldn't be the case.

376
00:12:34,730 --> 00:12:35,330
NICOLE SULLIVAN:
We should tell you

377
00:12:35,330 --> 00:12:37,550
that we totally scared
the tech check people

378
00:12:37,550 --> 00:12:40,485
when we had a blank white
screen during our tech check.

379
00:12:40,485 --> 00:12:41,360
MALTE UBL: All right.

380
00:12:41,360 --> 00:12:44,162
We really need page
transitions on the web.

381
00:12:44,162 --> 00:12:45,620
You're probably
familiar with stuff

382
00:12:45,620 --> 00:12:48,442
like this from the material
design specification

383
00:12:48,442 --> 00:12:49,900
where one page
morphs to the other.

384
00:12:49,900 --> 00:12:51,737
And there's other
ideas how to do this.

385
00:12:51,737 --> 00:12:54,320
Now, this is something you would
see in your application going

386
00:12:54,320 --> 00:12:57,650
from one state to
another, but we also

387
00:12:57,650 --> 00:13:00,020
want this for normal
navigations, right?

388
00:13:00,020 --> 00:13:01,080
Here's a great example.

389
00:13:01,080 --> 00:13:03,950
So this is something the
image search team at Google

390
00:13:03,950 --> 00:13:04,534
is working on.

391
00:13:04,534 --> 00:13:06,783
NICOLE SULLIVAN: It's kind
of subtle, so look closely.

392
00:13:06,783 --> 00:13:08,830
MALTE UBL: Yeah, well,
we'll walk you through it.

393
00:13:08,830 --> 00:13:10,580
So this is their image
search result page.

394
00:13:10,580 --> 00:13:12,890
And when you click
one of the images,

395
00:13:12,890 --> 00:13:16,800
you go into this box to see the
larger version of the image.

396
00:13:16,800 --> 00:13:19,010
So their goal was that
more people click through

397
00:13:19,010 --> 00:13:20,730
to the underlying web page.

398
00:13:20,730 --> 00:13:23,360
And so they wanted
to make that really

399
00:13:23,360 --> 00:13:25,790
easy by just literally
putting that web

400
00:13:25,790 --> 00:13:29,120
page at the bottom
of the page, right?

401
00:13:29,120 --> 00:13:33,500
So that, as a user, all you have
to do is put your finger on it

402
00:13:33,500 --> 00:13:37,490
and draw it up.

403
00:13:37,490 --> 00:13:40,630
We're hoping that
this greatly increases

404
00:13:40,630 --> 00:13:43,220
the number of navigations
actually happening.

405
00:13:43,220 --> 00:13:45,110
But this is something
that you really just

406
00:13:45,110 --> 00:13:46,319
can't build on the web today.

407
00:13:46,319 --> 00:13:47,901
NICOLE SULLIVAN: And
we'd love for you

408
00:13:47,901 --> 00:13:49,340
to be thinking,
if you didn't have

409
00:13:49,340 --> 00:13:51,650
to have that blank white
screen, what would you build?

410
00:13:51,650 --> 00:13:52,580
What would you design?

411
00:13:52,580 --> 00:13:55,070
Because I think it's actually
a pretty exciting space.

412
00:13:55,070 --> 00:13:55,310
MALTE UBL: Right.

413
00:13:55,310 --> 00:13:56,976
Today, you really
have to choose between

414
00:13:56,976 --> 00:14:00,200
either a fancy transition
or doing a real navigation

415
00:14:00,200 --> 00:14:01,850
where the browser
loads on your page.

416
00:14:01,850 --> 00:14:03,290
And there isn't
really a solution

417
00:14:03,290 --> 00:14:05,540
for the cross-origin
case where you navigate

418
00:14:05,540 --> 00:14:08,050
to different domain at all.

419
00:14:08,050 --> 00:14:10,250
And so that's why we're
so excited about portals.

420
00:14:10,250 --> 00:14:13,070
What portals give you
are advanced transitions

421
00:14:13,070 --> 00:14:15,860
between websites that
are real navigations.

422
00:14:15,860 --> 00:14:20,030
SPAs, single-page apps,
that's the way to do it today.

423
00:14:20,030 --> 00:14:24,560
But here, you can-- and this is
what this example GIF shows--

424
00:14:24,560 --> 00:14:27,780
this is a navigation from
one web page to another.

425
00:14:27,780 --> 00:14:30,740
And you can morph between
them any way you like,

426
00:14:30,740 --> 00:14:33,429
which seems like something
we should have in 2018.

427
00:14:33,429 --> 00:14:34,970
NICOLE SULLIVAN: It
does, doesn't it?

428
00:14:34,970 --> 00:14:35,479
Yeah.

429
00:14:35,479 --> 00:14:37,520
I think sometimes people
choose a single-page app

430
00:14:37,520 --> 00:14:39,350
with all of its complexity,
when actually what they

431
00:14:39,350 --> 00:14:40,450
wanted was fancy transitions.

432
00:14:40,450 --> 00:14:40,830
So we hope that this [INAUDIBLE]

433
00:14:40,830 --> 00:14:41,538
MALTE UBL: Right.

434
00:14:41,538 --> 00:14:43,920
It can be really hard
to do a single-page app.

435
00:14:43,920 --> 00:14:46,290
Cool.

436
00:14:46,290 --> 00:14:48,090
NICOLE SULLIVAN: So I
got a sporty new car.

437
00:14:48,090 --> 00:14:51,000
And within a month,
I got a ticket.

438
00:14:51,000 --> 00:14:52,710
I was driving too fast.

439
00:14:52,710 --> 00:14:54,450
MALTE UBL:
[INAUDIBLE],, hopefully.

440
00:14:54,450 --> 00:14:55,640
NICOLE SULLIVAN: No.

441
00:14:55,640 --> 00:14:57,000
On the San Mateo bridge.

442
00:14:57,000 --> 00:14:58,590
Whoops.

443
00:14:58,590 --> 00:15:00,870
I won't tell you how
fast I was going,

444
00:15:00,870 --> 00:15:04,560
but I found out that my car
has this really cool feature.

445
00:15:04,560 --> 00:15:06,630
I can turn something on
so that it beeps anytime

446
00:15:06,630 --> 00:15:09,090
I go over 80 miles per hour.

447
00:15:09,090 --> 00:15:12,355
That seems really good,
because there should be limits.

448
00:15:12,355 --> 00:15:14,730
And this car does not feel
like it's going fast when it's

449
00:15:14,730 --> 00:15:17,617
going actually pretty fast.

450
00:15:17,617 --> 00:15:19,200
There's also something
you can turn on

451
00:15:19,200 --> 00:15:21,630
for a motor or a car, which
is called a governor, which

452
00:15:21,630 --> 00:15:26,250
actually will not allow the
car to go over a certain speed.

453
00:15:26,250 --> 00:15:28,470
Feature policies are
sort of like that.

454
00:15:28,470 --> 00:15:30,130
You have a couple of options.

455
00:15:30,130 --> 00:15:32,820
You have Enforce mode and
you have Report-Only mode.

456
00:15:32,820 --> 00:15:35,040
You can turn a feature
policy on for something

457
00:15:35,040 --> 00:15:37,816
like synchronous XHR,
and you can say, no,

458
00:15:37,816 --> 00:15:38,940
I don't want to allow that.

459
00:15:38,940 --> 00:15:41,520
And it simply will not
allow that to happen

460
00:15:41,520 --> 00:15:43,710
on your site at all anymore.

461
00:15:43,710 --> 00:15:46,750
Or you can turn on Report-Only
mode, and you get that beep.

462
00:15:46,750 --> 00:15:47,860
Hey, something's wrong.

463
00:15:47,860 --> 00:15:49,449
You should check it out.

464
00:15:49,449 --> 00:15:51,240
We're pretty excited
about feature policies

465
00:15:51,240 --> 00:15:52,307
because they run in CI.

466
00:15:52,307 --> 00:15:53,640
You can run them in development.

467
00:15:53,640 --> 00:15:55,770
You can run a different
set of feature policies

468
00:15:55,770 --> 00:15:57,690
on your third-party
content, your ad content,

469
00:15:57,690 --> 00:15:59,544
than you do on
your regular page.

470
00:15:59,544 --> 00:16:00,960
So you've got a
lot of flexibility

471
00:16:00,960 --> 00:16:02,918
around how you use it,
and we're excited to see

472
00:16:02,918 --> 00:16:04,410
what you want to do with it.

473
00:16:04,410 --> 00:16:07,944
What you can use today is a
synchronous XHR feature policy.

474
00:16:07,944 --> 00:16:09,360
We collaborated
with the AMP team,

475
00:16:09,360 --> 00:16:12,330
and they've got it turned
on for all ads in AMP, which

476
00:16:12,330 --> 00:16:13,122
is pretty exciting.

477
00:16:13,122 --> 00:16:15,288
MALTE UBL: This is, basically,
by the way, the worst

478
00:16:15,288 --> 00:16:16,410
feature of the web.

479
00:16:16,410 --> 00:16:17,970
You want to turn this off
for your website, right?

480
00:16:17,970 --> 00:16:19,710
There's no good reason
to have Sync XHR.

481
00:16:19,710 --> 00:16:20,220
NICOLE SULLIVAN:
There's basically

482
00:16:20,220 --> 00:16:21,990
no conversation in
which Malte does not

483
00:16:21,990 --> 00:16:23,920
bring up that you should
turn off Synchronous XHR.

484
00:16:23,920 --> 00:16:25,211
MALTE UBL: I'm so mad about it.

485
00:16:25,211 --> 00:16:29,040
NICOLE SULLIVAN: [LAUGHS]
Even at your barbecues.

486
00:16:29,040 --> 00:16:31,300
There are other policies
that are available, as well.

487
00:16:31,300 --> 00:16:34,315
So there are some exciting
ones, but they're behind a flag.

488
00:16:34,315 --> 00:16:36,690
So you have to go and turn it
on behind the flag in order

489
00:16:36,690 --> 00:16:37,290
to check it out.

490
00:16:37,290 --> 00:16:38,956
There are three I'd
love for you to look

491
00:16:38,956 --> 00:16:41,310
at-- unoptimized images,
oversized images,

492
00:16:41,310 --> 00:16:43,050
and unsized media.

493
00:16:43,050 --> 00:16:45,290
Go see how they improve
your performance.

494
00:16:45,290 --> 00:16:47,370
See whether you like it
with Enforce mode on,

495
00:16:47,370 --> 00:16:49,024
or Report-Only mode.

496
00:16:49,024 --> 00:16:50,190
We would love more feedback.

497
00:16:50,190 --> 00:16:50,324
MALTE UBL: Right.

498
00:16:50,324 --> 00:16:52,765
And don't upload pictures from
a DSLR directly to the web,

499
00:16:52,765 --> 00:16:53,265
please.

500
00:16:53,265 --> 00:16:54,140
NICOLE SULLIVAN: Yes.

501
00:16:54,140 --> 00:16:56,460
And you'll hear Jason
talk more about this

502
00:16:56,460 --> 00:16:57,660
a little later today.

503
00:16:57,660 --> 00:16:59,560
MALTE UBL: Right.

504
00:16:59,560 --> 00:17:00,060
All right.

505
00:17:00,060 --> 00:17:01,893
Next, we want to talk
about instant loading,

506
00:17:01,893 --> 00:17:05,790
so how we get from super
fast to 0 milliseconds.

507
00:17:05,790 --> 00:17:09,260
To show you what exactly we
mean by that-- because instant

508
00:17:09,260 --> 00:17:10,589
is an overloaded word, right?

509
00:17:10,589 --> 00:17:14,200
There's instant apps, which
don't do instant stuff.

510
00:17:14,200 --> 00:17:16,660
So let's talk about this.

511
00:17:16,660 --> 00:17:19,069
Here's a film strip you might
be familiar with from how

512
00:17:19,069 --> 00:17:19,859
a web page loads.

513
00:17:19,859 --> 00:17:21,089
This one loads in
eight seconds, right?

514
00:17:21,089 --> 00:17:23,099
And obviously, you
could make that faster.

515
00:17:23,099 --> 00:17:23,250
But--

516
00:17:23,250 --> 00:17:25,291
NICOLE SULLIVAN: I mean,
we've spent years trying

517
00:17:25,291 --> 00:17:28,410
to eek out every little second
that we can out of the film

518
00:17:28,410 --> 00:17:29,190
strip, right?

519
00:17:29,190 --> 00:17:29,898
MALTE UBL: Right.

520
00:17:29,898 --> 00:17:30,630
But we want this.

521
00:17:30,630 --> 00:17:32,550
We want, basically,
everything to go away,

522
00:17:32,550 --> 00:17:35,530
and only that last frame
to render right away.

523
00:17:35,530 --> 00:17:38,180
So we have a solution
for that, which

524
00:17:38,180 --> 00:17:39,990
is actually relatively obvious.

525
00:17:39,990 --> 00:17:43,200
You have to load that web
page before the user clicks.

526
00:17:43,200 --> 00:17:45,660
But now you might wonder
why I put a bathroom

527
00:17:45,660 --> 00:17:47,060
stall on the screen, right?

528
00:17:47,060 --> 00:17:48,440
It's a US bathroom stall.

529
00:17:48,440 --> 00:17:50,610
It has this little
gap, which, like this--

530
00:17:50,610 --> 00:17:52,280
[LAUGHTER]

531
00:17:52,280 --> 00:17:54,236
--introduces a privacy
problem, right?

532
00:17:54,236 --> 00:17:56,466
[LAUGHTER]

533
00:17:56,466 --> 00:17:57,237


534
00:17:57,237 --> 00:17:58,820
Does anyone know why
this is the case?

535
00:17:58,820 --> 00:17:59,320
Anyway--

536
00:17:59,320 --> 00:18:00,540
[LAUGHTER]

537
00:18:00,540 --> 00:18:04,177
So when you load some other
web page before the user said

538
00:18:04,177 --> 00:18:05,760
they wanted to go
there, that web page

539
00:18:05,760 --> 00:18:08,340
might be able to
read your cookies,

540
00:18:08,340 --> 00:18:09,860
set cookies, stuff like that.

541
00:18:09,860 --> 00:18:11,940
And that's not something
the user expects, right?

542
00:18:11,940 --> 00:18:14,290
So we need a solution for that.

543
00:18:14,290 --> 00:18:17,310
And the solution that has been
under development for a while

544
00:18:17,310 --> 00:18:19,110
is called web packaging.

545
00:18:19,110 --> 00:18:21,690
What it provides, as
one of its features,

546
00:18:21,690 --> 00:18:24,310
is privacy-preserving
instant loading for the web.

547
00:18:24,310 --> 00:18:26,502
I want to explain really
quick how that works,

548
00:18:26,502 --> 00:18:27,960
but we'll have a
talk, later today,

549
00:18:27,960 --> 00:18:29,294
that goes into actual detail.

550
00:18:29,294 --> 00:18:30,210
NICOLE SULLIVAN: Yeah.

551
00:18:30,210 --> 00:18:32,751
MALTE UBL: From people who are
working on it, which is great.

552
00:18:32,751 --> 00:18:34,320
So the way web
packaging works is

553
00:18:34,320 --> 00:18:37,920
that you're a document author,
and you have a TLS certificate

554
00:18:37,920 --> 00:18:40,560
that we're using for
HTTPS, something like that.

555
00:18:40,560 --> 00:18:44,400
And you sign that content
to be created by you.

556
00:18:44,400 --> 00:18:46,630
And then anyone can
deliver it on your behalf,

557
00:18:46,630 --> 00:18:48,930
but the browser says,
OK, this was originally

558
00:18:48,930 --> 00:18:50,520
signed with that
TLS key, so I can

559
00:18:50,520 --> 00:18:52,770
say it came from
example.com, because that

560
00:18:52,770 --> 00:18:54,330
was the original party.

561
00:18:54,330 --> 00:18:56,280
And I want to
drill down on this.

562
00:18:56,280 --> 00:18:57,300
Anyone can deliver it.

563
00:18:57,300 --> 00:19:00,030
So you could have
a different CDN,

564
00:19:00,030 --> 00:19:02,250
but you can deliver it
over BitTorrent or IPFS.

565
00:19:02,250 --> 00:19:03,670
It doesn't really matter.

566
00:19:03,670 --> 00:19:06,360
You can do basically HTTP over
anything, which is really cool.

567
00:19:06,360 --> 00:19:09,659


568
00:19:09,659 --> 00:19:10,700
Oh, my god, look at this.

569
00:19:10,700 --> 00:19:12,860
NICOLE SULLIVAN: So we
collaborated with the AMP team

570
00:19:12,860 --> 00:19:14,330
on this, because they're
one of the frameworks

571
00:19:14,330 --> 00:19:15,630
that we're working with.

572
00:19:15,630 --> 00:19:18,950
And we're pretty excited
about the instant loading

573
00:19:18,950 --> 00:19:21,950
and how fast we're going to be
able to bring content to users.

574
00:19:21,950 --> 00:19:23,242
But Malte, what about the URLs?

575
00:19:23,242 --> 00:19:25,283
MALTE UBL: Yeah, AMP
doesn't have very good URLs.

576
00:19:25,283 --> 00:19:26,990
So there's [INAUDIBLE] AMP.

577
00:19:26,990 --> 00:19:28,580
And with web
packaging, that problem

578
00:19:28,580 --> 00:19:30,339
goes away, which is really cool.

579
00:19:30,339 --> 00:19:31,880
So that's why we're
excited about it.

580
00:19:31,880 --> 00:19:33,620
But-- and this is
the important part--

581
00:19:33,620 --> 00:19:34,880
it's a web standard, right?

582
00:19:34,880 --> 00:19:37,850
And so with web packaging,
we can bring Instant Loading

583
00:19:37,850 --> 00:19:38,960
to all these frameworks.

584
00:19:38,960 --> 00:19:40,710
And this is not an
exhaustive list, right?

585
00:19:40,710 --> 00:19:41,780
It doesn't really matter.

586
00:19:41,780 --> 00:19:45,051
This technology is
completely technology--

587
00:19:45,051 --> 00:19:46,550
it doesn't care
about technology.

588
00:19:46,550 --> 00:19:47,940
So really, really cool.

589
00:19:47,940 --> 00:19:52,620
We can't wait for this
to land on browsers.

590
00:19:52,620 --> 00:19:55,070
Web packaging also
addresses one more problem

591
00:19:55,070 --> 00:19:57,470
that I think is really subtle.

592
00:19:57,470 --> 00:19:59,990
Eric Meyer tweeted this and
wrote this blog post, which

593
00:19:59,990 --> 00:20:02,900
is really cool, a while ago.

594
00:20:02,900 --> 00:20:07,370
Traveling to Africa and
noticing that HTTPS,

595
00:20:07,370 --> 00:20:10,160
which is the greatest thing that
happened to the web in a while,

596
00:20:10,160 --> 00:20:12,080
among many other
greatest things--

597
00:20:12,080 --> 00:20:13,940
actually introduced
a few problems.

598
00:20:13,940 --> 00:20:18,050
So let's imagine
you're a cell tower.

599
00:20:18,050 --> 00:20:21,140
And you're not actually
connected well to the internet,

600
00:20:21,140 --> 00:20:23,700
but you have LTE to
everyone connected to you.

601
00:20:23,700 --> 00:20:24,200
Right?

602
00:20:24,200 --> 00:20:26,922
It's great if you have an
edge cache at that cell tower.

603
00:20:26,922 --> 00:20:28,880
Now, with HTTP, that's
something you can build.

604
00:20:28,880 --> 00:20:31,530
With HTTPS, it's
something you can't build.

605
00:20:31,530 --> 00:20:34,160
So you always have to go to
the origin, to someone actually

606
00:20:34,160 --> 00:20:36,275
able to serve on
that TLS certificate.

607
00:20:36,275 --> 00:20:38,090
Right?

608
00:20:38,090 --> 00:20:40,100
And the great thing
about web packaging

609
00:20:40,100 --> 00:20:42,770
is that it can bring
back that feature.

610
00:20:42,770 --> 00:20:47,090
Because it's untangling
delivery from TLS security,

611
00:20:47,090 --> 00:20:52,430
you can get all great benefit
of having edge caching for HTTP,

612
00:20:52,430 --> 00:20:57,690
but have it together with
the security benefits of TLS.

613
00:20:57,690 --> 00:20:59,670
I also want to just
really quickly say

614
00:20:59,670 --> 00:21:02,430
that web packaging is
not related to Webpack.

615
00:21:02,430 --> 00:21:03,120
However--

616
00:21:03,120 --> 00:21:05,010
[LAUGHTER]

617
00:21:05,010 --> 00:21:08,580
--however, there's a
bundling spec coming up.

618
00:21:08,580 --> 00:21:11,160
And so web packaging
is actually going

619
00:21:11,160 --> 00:21:14,370
to bring bundling as a
first-class feature to the web

620
00:21:14,370 --> 00:21:17,140
platform, which I think
is also way overdue.

621
00:21:17,140 --> 00:21:19,650
And so bundlers, like
Webpack, can eventually

622
00:21:19,650 --> 00:21:23,250
use Web Packaging as
the output format.

623
00:21:23,250 --> 00:21:24,880
You can actually try this today.

624
00:21:24,880 --> 00:21:26,910
There's a subspec,
called Signed Exchange,

625
00:21:26,910 --> 00:21:28,920
which is available
in Origin Trial.

626
00:21:28,920 --> 00:21:32,797
You can go to this
URL and try it out.

627
00:21:32,797 --> 00:21:34,630
NICOLE SULLIVAN: Let
us know what you think.

628
00:21:34,630 --> 00:21:36,752
MALTE UBL: Yeah.

629
00:21:36,752 --> 00:21:39,210
NICOLE SULLIVAN: Later today,
you'll hear [INAUDIBLE] and--

630
00:21:39,210 --> 00:21:39,970
who else is speaking about it?

631
00:21:39,970 --> 00:21:40,886
MALTE UBL: [INAUDIBLE]

632
00:21:40,886 --> 00:21:43,180
NICOLE SULLIVAN: Yes.

633
00:21:43,180 --> 00:21:45,670
So the next bit that we'd
like to talk to you about

634
00:21:45,670 --> 00:21:46,630
is scheduling.

635
00:21:46,630 --> 00:21:49,729
So any time developers build
something sufficiently complex,

636
00:21:49,729 --> 00:21:51,520
they end up needing to
manage a task queue,

637
00:21:51,520 --> 00:21:53,353
prioritize work, and
be sure that everything

638
00:21:53,353 --> 00:21:54,361
is getting done on time.

639
00:21:54,361 --> 00:21:56,485
MALTE UBL: So we don't run
out of time on our talk.

640
00:21:56,485 --> 00:21:57,910
NICOLE SULLIVAN: That, too.

641
00:21:57,910 --> 00:21:59,650
A typical app has
competing deadlines,

642
00:21:59,650 --> 00:22:02,560
so keeping the user
input responsive,

643
00:22:02,560 --> 00:22:05,950
while rendering smoothly
at 60 frames per second,

644
00:22:05,950 --> 00:22:08,500
and doing the actual work
of fetching, preparing,

645
00:22:08,500 --> 00:22:11,620
and rendering the UI.

646
00:22:11,620 --> 00:22:14,090
In talking to the React
team a few months ago,

647
00:22:14,090 --> 00:22:16,270
we realized that a
framework-based scheduler

648
00:22:16,270 --> 00:22:18,400
has serious downsides.

649
00:22:18,400 --> 00:22:20,980
It can't schedule
third-party code.

650
00:22:20,980 --> 00:22:23,230
It has a lot of
difficulty interleaving

651
00:22:23,230 --> 00:22:25,690
tasks with browser functions,
like rendering and garbage

652
00:22:25,690 --> 00:22:26,950
collection.

653
00:22:26,950 --> 00:22:32,180
In short, it has to fight
other systems for resources.

654
00:22:32,180 --> 00:22:35,646
With help from React, Google
Maps, AMP, Polymer, and Ember,

655
00:22:35,646 --> 00:22:37,270
as well as the web
standards community,

656
00:22:37,270 --> 00:22:39,080
[? Shuby ?] and Jason-- who
you're going to hear from later

657
00:22:39,080 --> 00:22:40,100
today--

658
00:22:40,100 --> 00:22:42,980
are designing a scheduler
that will run in the browser.

659
00:22:42,980 --> 00:22:45,530
It's meant to have high and
low-level APIs, like Grand

660
00:22:45,530 --> 00:22:49,160
Central Dispatch, so
borrowing some ideas there,

661
00:22:49,160 --> 00:22:52,030
and be able to interleave code
from all different sources.

662
00:22:52,030 --> 00:22:53,780
They're working on
things like, how do you

663
00:22:53,780 --> 00:22:58,490
interleave garbage collection
or code that's in a promise?

664
00:22:58,490 --> 00:23:00,240
What's exciting about
this, in particular,

665
00:23:00,240 --> 00:23:04,096
is that when you break
things down into small tasks,

666
00:23:04,096 --> 00:23:05,970
it's much more useful
if you have a great way

667
00:23:05,970 --> 00:23:06,900
to schedule them.

668
00:23:06,900 --> 00:23:08,441
When you can schedule
things, they're

669
00:23:08,441 --> 00:23:10,590
much more valuable if
you've broken things down

670
00:23:10,590 --> 00:23:11,940
into small tasks.

671
00:23:11,940 --> 00:23:14,700
This is where frameworks
and the browser

672
00:23:14,700 --> 00:23:17,610
can work well together to
provide a much better user

673
00:23:17,610 --> 00:23:20,920
experience than we're
capable of providing today.

674
00:23:20,920 --> 00:23:23,490
This is one of the things I'm
most excited to PM right now,

675
00:23:23,490 --> 00:23:25,080
and I'm really excited
for you to hear

676
00:23:25,080 --> 00:23:26,570
from [? Shuby ?]
and Jason later.

677
00:23:26,570 --> 00:23:26,880
MALTE UBL: Right.

678
00:23:26,880 --> 00:23:29,005
It's really a good example
for how frameworks help.

679
00:23:29,005 --> 00:23:31,315
Because actually
taking your code

680
00:23:31,315 --> 00:23:32,940
and breaking it down
into small chunks,

681
00:23:32,940 --> 00:23:36,930
that's really, really difficult.
But as a framework layer,

682
00:23:36,930 --> 00:23:39,660
this is something
that people can just

683
00:23:39,660 --> 00:23:42,030
take a long time doing, but
then having it for everyone.

684
00:23:42,030 --> 00:23:43,738
NICOLE SULLIVAN: I
mean, I think you saw,

685
00:23:43,738 --> 00:23:45,450
in the framework
awards section earlier,

686
00:23:45,450 --> 00:23:47,280
that three frameworks,
at least, are

687
00:23:47,280 --> 00:23:49,710
working on breaking things
down into really tiny rendering

688
00:23:49,710 --> 00:23:50,209
chunks.

689
00:23:50,209 --> 00:23:51,510
So this is pretty exciting.

690
00:23:51,510 --> 00:23:52,230
MALTE UBL: Right.

691
00:23:52,230 --> 00:23:54,940
Next, we're talking about
Animation Worklet and Jank-Free

692
00:23:54,940 --> 00:23:55,440
Parallax.

693
00:23:55,440 --> 00:23:59,520
By the way, ironically, in
front of a janky animated GIF.

694
00:23:59,520 --> 00:24:02,280
So Animation Worklet--
first, we need

695
00:24:02,280 --> 00:24:05,160
to talk about other animation
APIs because there are a few.

696
00:24:05,160 --> 00:24:07,214
There's the Web Animation
API, which is great.

697
00:24:07,214 --> 00:24:08,130
And you should use it.

698
00:24:08,130 --> 00:24:11,430
And also more importantly, it
just landed in Safari Preview.

699
00:24:11,430 --> 00:24:14,680
So relatively soon, we should
have it in most browsers.

700
00:24:14,680 --> 00:24:17,720
CSS animations are also
awesome, and they're basically

701
00:24:17,720 --> 00:24:18,220
everywhere.

702
00:24:18,220 --> 00:24:19,410
So you can use them.

703
00:24:19,410 --> 00:24:20,900
And you should use these APIs.

704
00:24:20,900 --> 00:24:23,820
And Animation Worklet doesn't
provide additional value,

705
00:24:23,820 --> 00:24:26,970
except in some very
important circumstances.

706
00:24:26,970 --> 00:24:30,180
Because these APIs are
inherently time-based,

707
00:24:30,180 --> 00:24:33,390
which makes sense, animations
go from A to B over time.

708
00:24:33,390 --> 00:24:35,260
That's kind of what they do.

709
00:24:35,260 --> 00:24:36,900
However, there are
some animations

710
00:24:36,900 --> 00:24:38,550
that aren't time-based.

711
00:24:38,550 --> 00:24:41,220
For example, this one,
which animates Pac-Man

712
00:24:41,220 --> 00:24:43,350
based on scrolling
left and right.

713
00:24:43,350 --> 00:24:45,390
And this is something
that's really difficult

714
00:24:45,390 --> 00:24:47,940
to do on the web today
in a jank-free fashion.

715
00:24:47,940 --> 00:24:50,710


716
00:24:50,710 --> 00:24:53,050
So the reason for this is
that, with Animation Worklet,

717
00:24:53,050 --> 00:24:54,841
on the other hand,
where you don't get jank

718
00:24:54,841 --> 00:24:57,550
is because that actual
worklet runs super close

719
00:24:57,550 --> 00:25:00,160
to the actual software
that does the scrolling.

720
00:25:00,160 --> 00:25:03,940
And so you can do it, even when
the main thread does anything

721
00:25:03,940 --> 00:25:06,130
busy, which is really cool.

722
00:25:06,130 --> 00:25:08,020
My team actually
has been working

723
00:25:08,020 --> 00:25:11,500
on getting this into our-- what
we call-- scrollbot animations.

724
00:25:11,500 --> 00:25:13,640
And it was just a
drop-in replacement.

725
00:25:13,640 --> 00:25:16,445
And it makes everything
so much smoother.

726
00:25:16,445 --> 00:25:18,320
[? Surma ?] is talking
about this later today

727
00:25:18,320 --> 00:25:19,519
in the talk about Houdini.

728
00:25:19,519 --> 00:25:21,810
NICOLE SULLIVAN: And he'll
have some really cool demos.

729
00:25:21,810 --> 00:25:23,870
MALTE UBL: Yeah.

730
00:25:23,870 --> 00:25:25,870
NICOLE SULLIVAN: Almost
every web app eventually

731
00:25:25,870 --> 00:25:28,570
needs something like
an infinite list.

732
00:25:28,570 --> 00:25:31,150
It just happens, right?

733
00:25:31,150 --> 00:25:33,550
On other systems--
on Android, on iOS--

734
00:25:33,550 --> 00:25:35,560
there are things
like UI table view.

735
00:25:35,560 --> 00:25:39,460
On the web, you're left
to figure it out yourself.

736
00:25:39,460 --> 00:25:42,670
Now, many frameworks have
really good implementations

737
00:25:42,670 --> 00:25:46,630
of a virtual list in an infinite
scroller kind of situation.

738
00:25:46,630 --> 00:25:49,150
But the web platform primitives
make certain behaviors

739
00:25:49,150 --> 00:25:50,410
impossible.

740
00:25:50,410 --> 00:25:52,750
For example, have you tried
to use findInPage if you're

741
00:25:52,750 --> 00:25:53,950
using an infinite list?

742
00:25:53,950 --> 00:25:56,440
I often find myself going
back to search for a tweet

743
00:25:56,440 --> 00:25:58,580
that I made, or someone
else made some time ago.

744
00:25:58,580 --> 00:26:00,580
You can't search for
things that aren't actually

745
00:26:00,580 --> 00:26:01,960
in the DOM right then.

746
00:26:01,960 --> 00:26:05,620
This is obviously going to have
accessibility implications,

747
00:26:05,620 --> 00:26:06,970
as well.

748
00:26:06,970 --> 00:26:09,610
With new low-level APIs that
we're putting into place,

749
00:26:09,610 --> 00:26:11,565
like searchable and
visible DOM, all

750
00:26:11,565 --> 00:26:13,690
of the sudden, these things
become solvable and get

751
00:26:13,690 --> 00:26:14,890
addressed.

752
00:26:14,890 --> 00:26:16,780
You'll hear more about
our collaborations

753
00:26:16,780 --> 00:26:20,110
with React, Virtualized,
Angular, and Twitter

754
00:26:20,110 --> 00:26:22,905
in Gray's talk a
little later today.

755
00:26:22,905 --> 00:26:23,780
MALTE UBL: All right.

756
00:26:23,780 --> 00:26:25,790
So that brings us to
the end of our talk.

757
00:26:25,790 --> 00:26:28,790
Just summarizing--
we have been talking

758
00:26:28,790 --> 00:26:31,250
about our vision for a
framework-inclusive web

759
00:26:31,250 --> 00:26:33,542
platform future.

760
00:26:33,542 --> 00:26:35,750
NICOLE SULLIVAN: Instant
loading and page transitions

761
00:26:35,750 --> 00:26:36,840
are coming to the web.

762
00:26:36,840 --> 00:26:38,130
Especially if you're
a designer, get

763
00:26:38,130 --> 00:26:40,160
thinking about what you're
going to build with that

764
00:26:40,160 --> 00:26:41,610
because it's going
to be kind of cool.

765
00:26:41,610 --> 00:26:42,318
MALTE UBL: Right.

766
00:26:42,318 --> 00:26:44,840
And then we talked about a
set of new low-level APIs

767
00:26:44,840 --> 00:26:47,510
making it easier to build
reliably fast web apps.

768
00:26:47,510 --> 00:26:49,430
And that's especially
true if frameworks

769
00:26:49,430 --> 00:26:52,755
help web developers take
advantage of them by default.

770
00:26:52,755 --> 00:26:53,630
Thank you, very much.

771
00:26:53,630 --> 00:26:54,755
NICOLE SULLIVAN: Thank you.

772
00:26:54,755 --> 00:26:59,080
[MUSIC PLAYING]

773
00:26:59,080 --> 00:27:04,676