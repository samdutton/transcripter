WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.940
[MUSIC PLAYING]

00:00:05.238 --> 00:00:06.530
EIJI KITAMURA: My name is Eiji.

00:00:06.530 --> 00:00:09.230
I'm a developer advocate
working on identity

00:00:09.230 --> 00:00:12.280
on the web at Google.

00:00:12.280 --> 00:00:14.200
So do you have a phone today?

00:00:14.200 --> 00:00:14.890
Right?

00:00:14.890 --> 00:00:18.400
Everyone of you here
should have a phone.

00:00:18.400 --> 00:00:27.480
So owning a phone
means that each of you

00:00:27.480 --> 00:00:31.290
have your own
personal phone number.

00:00:31.290 --> 00:00:35.460
Interesting thing is that
even if you own a phone, maybe

00:00:35.460 --> 00:00:38.760
you're not making a phone
call every day, right?

00:00:38.760 --> 00:00:40.770
You still call it a phone.

00:00:40.770 --> 00:00:45.870
And the phone numbers are still
playing a very important role

00:00:45.870 --> 00:00:48.710
in your daily life.

00:00:48.710 --> 00:00:52.350
For example, phone
numbers can be

00:00:52.350 --> 00:00:58.090
used as a digital identifier
and a personal communication

00:00:58.090 --> 00:01:00.430
channel.

00:01:00.430 --> 00:01:03.160
Some web services
use phone numbers

00:01:03.160 --> 00:01:09.440
to create online accounts
or to build a social graph.

00:01:09.440 --> 00:01:12.020
As a personal communication
channel, of course,

00:01:12.020 --> 00:01:13.740
you make phone calls.

00:01:13.740 --> 00:01:15.735
And you can send text messages.

00:01:18.650 --> 00:01:21.730
And there are a lot
of online services

00:01:21.730 --> 00:01:24.590
that heavily rely
on phone numbers,

00:01:24.590 --> 00:01:29.030
especially as a way to
send SMS text messages.

00:01:29.030 --> 00:01:35.230
These services are using
SMS to let users sign up,

00:01:35.230 --> 00:01:38.860
help users recover
their accounts,

00:01:38.860 --> 00:01:43.690
increase user security
with two-step verification,

00:01:43.690 --> 00:01:46.880
or confirm payments.

00:01:46.880 --> 00:01:50.250
This kind of SMS
usage is very popular,

00:01:50.250 --> 00:01:56.840
especially in countries like
India, but also worldwide.

00:01:56.840 --> 00:01:59.870
In a typical user
experience, an SMS

00:01:59.870 --> 00:02:05.910
is used to deliver a
one-time password, OTP.

00:02:05.910 --> 00:02:09.720
The user verifies ownership
of their phone number

00:02:09.720 --> 00:02:12.495
by passing the OTP
back to the service.

00:02:15.100 --> 00:02:19.510
But the challenge is this
can introduce some friction

00:02:19.510 --> 00:02:22.000
to their user experience.

00:02:22.000 --> 00:02:28.900
To enter an OTP, the user has to
open the SMS up, then remember

00:02:28.900 --> 00:02:32.110
or copy the OTP
from the message,

00:02:32.110 --> 00:02:37.280
go back to the website, and
enter that into the form.

00:02:37.280 --> 00:02:40.130
It's so easy to make mistakes.

00:02:40.130 --> 00:02:44.670
And sometimes you have
to request a resend.

00:02:44.670 --> 00:02:49.740
That's why we are proposing
a new API called SMS Receiver

00:02:49.740 --> 00:02:51.530
API.

00:02:51.530 --> 00:02:54.450
Web developers can
use the SMS Receiver

00:02:54.450 --> 00:02:58.800
API to let the browser
receive the SMS message,

00:02:58.800 --> 00:03:05.430
extract the OTP, and enter
the OTP on behalf of the user.

00:03:05.430 --> 00:03:10.590
For end users, entering the OTP
can be as simple as one tap.

00:03:13.430 --> 00:03:17.950
And we have a few websites that
are experimenting with this API

00:03:17.950 --> 00:03:20.280
already.

00:03:20.280 --> 00:03:24.840
Swiggy, India's largest
on-demand food delivery

00:03:24.840 --> 00:03:30.990
platform, achieved a
sign-in success rate of 88%.

00:03:30.990 --> 00:03:36.870
This number is on par with
that of their native app.

00:03:36.870 --> 00:03:40.360
Myntra, a fashion
e-commerce player in India,

00:03:40.360 --> 00:03:45.930
decreased the drop-off rate
while signing in by 38%.

00:03:49.140 --> 00:03:53.580
Oyo, a hotel booking service,
succeeded in reducing time

00:03:53.580 --> 00:03:57.500
to log-in by 42%.

00:03:57.500 --> 00:03:59.960
These are all
impressive numbers.

00:03:59.960 --> 00:04:04.670
And there are more companies
trying out this API.

00:04:04.670 --> 00:04:06.670
Now, let me talk about the code.

00:04:09.440 --> 00:04:12.830
Before the website
can receive an SMS,

00:04:12.830 --> 00:04:15.680
you have to know that
user's phone number

00:04:15.680 --> 00:04:19.680
so that you can send a message.

00:04:19.680 --> 00:04:24.120
If you are using an input
tag, my recommendation

00:04:24.120 --> 00:04:27.660
is to use auto-complete
equal tel.

00:04:27.660 --> 00:04:30.640
That way, the browser can help
the user auto fill their phone

00:04:30.640 --> 00:04:31.140
number.

00:04:33.770 --> 00:04:37.130
Giving your website the
ability to send an SMS

00:04:37.130 --> 00:04:40.160
might seem a bit scary at first.

00:04:40.160 --> 00:04:47.360
What if someone builds a
bot and spam random numbers?

00:04:47.360 --> 00:04:52.610
To mitigate such abuse, you can
use a service like reCAPTCHA.

00:04:52.610 --> 00:04:56.450
Especially with
reCAPTCHA V3, that

00:04:56.450 --> 00:05:00.710
lets you identify bots
without requiring the user

00:05:00.710 --> 00:05:04.430
to check a box or
solve a puzzle,

00:05:04.430 --> 00:05:08.090
like picking traffic
light images.

00:05:08.090 --> 00:05:11.600
To send SMS messages,
you can use your existing

00:05:11.600 --> 00:05:16.100
infrastructure or just rely
on a third-party service

00:05:16.100 --> 00:05:21.410
like Twilio, Nexmo, Telesign,
or another SMS gateway.

00:05:24.110 --> 00:05:26.840
Using the SMS
Receiver API itself

00:05:26.840 --> 00:05:31.620
is as simple as
one line of code.

00:05:31.620 --> 00:05:34.320
When you call
navigator SMS receive,

00:05:34.320 --> 00:05:37.440
the browser waits for an SMS.

00:05:37.440 --> 00:05:43.710
Behind the scenes, we are using
Android's Native SMS Retriever

00:05:43.710 --> 00:05:48.020
API to access the
incoming message.

00:05:48.020 --> 00:05:51.530
Chrome is one of the
consumers of the API.

00:05:51.530 --> 00:05:54.830
And the message will not
be delivered to the website

00:05:54.830 --> 00:05:59.710
unless it meets
certain conditions.

00:05:59.710 --> 00:06:02.350
The text message
needs to include

00:06:02.350 --> 00:06:07.330
the URL of the origin to
which the SMS is sent,

00:06:07.330 --> 00:06:12.020
Chrome's application
hash and the OTP.

00:06:12.020 --> 00:06:16.490
However, as we are experimenting
with this feature and the API

00:06:16.490 --> 00:06:18.890
design it's subject to change.

00:06:18.890 --> 00:06:24.600
I won't go into detail
about how to format the SMS.

00:06:24.600 --> 00:06:28.623
You can check the latest
format in the article

00:06:28.623 --> 00:06:29.540
I will show you later.

00:06:33.050 --> 00:06:37.430
When an SMS is received and
meets all the conditions,

00:06:37.430 --> 00:06:39.420
a button sheet appears
in the browser.

00:06:43.190 --> 00:06:45.730
And the user can grant
the browser permission

00:06:45.730 --> 00:06:48.760
to access the text message.

00:06:48.760 --> 00:06:54.070
This permission is required for
every receipt of a new message.

00:06:54.070 --> 00:06:56.460
This means the browser
won't be able to read

00:06:56.460 --> 00:07:01.510
SMS messages without the
use of explicit permission.

00:07:01.510 --> 00:07:05.020
In the current API design, you
will obtain the entire text

00:07:05.020 --> 00:07:06.530
message.

00:07:06.530 --> 00:07:10.190
So you can use a regular
expression to extract the OTP.

00:07:13.560 --> 00:07:16.350
After extracting the
OTP, you can either

00:07:16.350 --> 00:07:19.380
enter it in the
form for the user

00:07:19.380 --> 00:07:22.860
to submit or possibly
directly to the server side

00:07:22.860 --> 00:07:23.978
verification.

00:07:26.670 --> 00:07:30.270
To learn more about the
SMS Receiver API, please

00:07:30.270 --> 00:07:34.020
go to google/smsreceiverapi.

00:07:34.020 --> 00:07:37.230
The article has details
about former conventions

00:07:37.230 --> 00:07:41.220
and how to implement the API.

00:07:41.220 --> 00:07:44.860
The SMS Receiver API
is still experimental.

00:07:44.860 --> 00:07:47.200
You can use it under
origin trial, which

00:07:47.200 --> 00:07:50.440
means you need to submit
a request to whitelist

00:07:50.440 --> 00:07:56.890
your domain, accepting that the
API may change in the future.

00:07:56.890 --> 00:07:58.690
The article has
information about how

00:07:58.690 --> 00:08:01.300
to sign up to the origin trial.

00:08:01.300 --> 00:08:04.690
I bet you have tons of
questions about this API.

00:08:04.690 --> 00:08:08.380
And I hope we have successfully
addressed most of them

00:08:08.380 --> 00:08:10.690
in this article.

00:08:10.690 --> 00:08:16.480
But let me highlight one
outstanding question.

00:08:16.480 --> 00:08:20.830
Is it safe to use SMS as a
way to authenticate our user?

00:08:20.830 --> 00:08:23.750
It's a great question.

00:08:23.750 --> 00:08:26.110
The short answer is be careful.

00:08:29.080 --> 00:08:31.930
Browsers enabling
this API doesn't

00:08:31.930 --> 00:08:37.630
mean that we recommend you
to stop using the existing

00:08:37.630 --> 00:08:39.909
way of authentication.

00:08:39.909 --> 00:08:42.549
The reality is that
many websites already

00:08:42.549 --> 00:08:46.290
use SMS as a way for
their authentication

00:08:46.290 --> 00:08:48.500
with their users.

00:08:48.500 --> 00:08:52.180
However, phone numbers
are known to be hijackable

00:08:52.180 --> 00:08:55.510
and to be recycled
by phone carriers.

00:08:55.510 --> 00:08:59.230
In some cases, users
have been the victims

00:08:59.230 --> 00:09:02.330
of SMS phishing attacks.

00:09:02.330 --> 00:09:07.850
We recommend using SMS as an
additional factor for something

00:09:07.850 --> 00:09:14.150
else, for example, a
password for authentication.

00:09:14.150 --> 00:09:19.340
But in a world where you
can expect many users

00:09:19.340 --> 00:09:23.810
to have a biometric
sensor on their device,

00:09:23.810 --> 00:09:28.510
we suggest something
even better,

00:09:28.510 --> 00:09:30.970
which is Web Authentication API.

00:09:30.970 --> 00:09:34.800
In other words, WebAuthn.

00:09:34.800 --> 00:09:39.600
We covered WebAuthn at Google
I/O this year and last year,

00:09:39.600 --> 00:09:42.780
but I would like to recap
a little bit about it

00:09:42.780 --> 00:09:45.240
in case there are people
not familiar with it.

00:09:48.550 --> 00:09:51.220
WebAuthn is a
standard browser API

00:09:51.220 --> 00:09:57.750
that enables strong
authentication on the web.

00:09:57.750 --> 00:10:01.565
It's supported by all major
browsers, at least partially.

00:10:04.180 --> 00:10:06.730
By using a piece
of hardware, which

00:10:06.730 --> 00:10:10.450
we call the
authenticator, end users

00:10:10.450 --> 00:10:14.140
can really search for and
authenticate with a service

00:10:14.140 --> 00:10:15.775
much more safely than before.

00:10:19.190 --> 00:10:23.780
WebAuthn is based on a
public key cryptography.

00:10:23.780 --> 00:10:27.350
A user can register an
authenticator with a website

00:10:27.350 --> 00:10:31.050
by generating a
key pair, keeping

00:10:31.050 --> 00:10:33.810
the private key in
the authenticator

00:10:33.810 --> 00:10:36.390
and handing the public
key to the website.

00:10:39.240 --> 00:10:41.790
Upon signing in,
the authenticator

00:10:41.790 --> 00:10:45.120
can generate a
unique signature so

00:10:45.120 --> 00:10:48.570
that the user can
prove to the website

00:10:48.570 --> 00:10:50.340
that authenticator is present.

00:10:54.060 --> 00:10:56.580
In the previous session,
Emily showed you

00:10:56.580 --> 00:11:01.710
how Chrome tries to ensure the
user is on the genuine site.

00:11:01.710 --> 00:11:06.030
WebAuthn allows you to provide
an extra layer of safety

00:11:06.030 --> 00:11:09.170
for users.

00:11:09.170 --> 00:11:14.140
Because the keeper is bound
to the website's origin,

00:11:14.140 --> 00:11:17.930
even if a user ends up
on the phishing website,

00:11:17.930 --> 00:11:19.610
that phishing
website will not be

00:11:19.610 --> 00:11:23.840
able to make the user generate
a valid signature, which

00:11:23.840 --> 00:11:25.290
saves their users.

00:11:28.090 --> 00:11:31.730
Now, I would like to talk
about two primary user

00:11:31.730 --> 00:11:34.510
experiences using WebAuthn.

00:11:34.510 --> 00:11:37.000
They are two-factor
authentication

00:11:37.000 --> 00:11:41.010
and re-authentication.

00:11:41.010 --> 00:11:44.390
Let me start with
two-factor authentication.

00:11:44.390 --> 00:11:48.500
Because an authenticator
can prove your presence

00:11:48.500 --> 00:11:52.940
by combining it
with a password, you

00:11:52.940 --> 00:11:56.700
can perform two-factor
authentication for users.

00:11:56.700 --> 00:11:58.850
That's the basic idea.

00:11:58.850 --> 00:12:00.755
Let's have a look at
a real world example.

00:12:03.680 --> 00:12:08.280
GitHub offers two-factor
authentication as an option.

00:12:08.280 --> 00:12:12.670
You start by entering your
username and a password.

00:12:12.670 --> 00:12:15.672
When you see this screen,
get your security key.

00:12:15.672 --> 00:12:19.820
A security key is one form
factor of authenticators

00:12:19.820 --> 00:12:22.110
I mentioned earlier.

00:12:22.110 --> 00:12:26.700
Click the button, and you'll
see a browser's native dialog.

00:12:26.700 --> 00:12:32.310
Use your security key and
perform a gesture on it.

00:12:32.310 --> 00:12:35.720
The gesture depends on the
authenticator you are using.

00:12:35.720 --> 00:12:41.310
But for typical security
keys, simply touch it.

00:12:41.310 --> 00:12:44.700
If the security key is already
registered to the service,

00:12:44.700 --> 00:12:46.920
you are signed in.

00:12:46.920 --> 00:12:50.370
Imagine how it compares to
entering an OTP manually.

00:12:50.370 --> 00:12:51.090
It's much easier.

00:12:53.610 --> 00:12:56.640
So how do I register
a security key?

00:12:56.640 --> 00:13:02.310
To register one on GitHub,
go to the security page.

00:13:02.310 --> 00:13:05.860
You'll be asked to name the
security key you are adding.

00:13:05.860 --> 00:13:09.440
Name it and press Add.

00:13:09.440 --> 00:13:14.170
Then you can register your
security key by touching it.

00:13:14.170 --> 00:13:16.810
Now, your security
is registered.

00:13:16.810 --> 00:13:21.130
You may add multiple
security keys as backups.

00:13:21.130 --> 00:13:24.460
So naming it helps you
find the right one.

00:13:24.460 --> 00:13:28.630
Imagine if you lose your
security key or break it

00:13:28.630 --> 00:13:31.300
or even lost.

00:13:31.300 --> 00:13:38.810
You can revoke the key from
here and invalidate it.

00:13:38.810 --> 00:13:41.870
So how effective
are second factors?

00:13:41.870 --> 00:13:44.210
Here's a comparison
between SMS OTP

00:13:44.210 --> 00:13:47.770
as a second factor and security
key as a second factor.

00:13:47.770 --> 00:13:51.310
As you can see, SMS
OTP is not perfect

00:13:51.310 --> 00:13:56.470
against targeted attacks, while
security key protect users

00:13:56.470 --> 00:13:58.360
completely.

00:13:58.360 --> 00:14:02.710
Targeted attacks are a
specially crafted phishing email

00:14:02.710 --> 00:14:07.430
aiming at a certain company or
an organization, for example.

00:14:07.430 --> 00:14:09.910
So two-factor authentication
with a security key

00:14:09.910 --> 00:14:10.950
works quite well.

00:14:13.560 --> 00:14:17.610
Now, how do we implement
two-factor authentication using

00:14:17.610 --> 00:14:19.680
WebAuthn?

00:14:19.680 --> 00:14:23.070
The first thing you should do
is to check whether WebAuthn

00:14:23.070 --> 00:14:26.040
is available on the browser.

00:14:26.040 --> 00:14:29.310
You can do so by checking
if PublicKeyCredential

00:14:29.310 --> 00:14:30.588
is available.

00:14:33.220 --> 00:14:35.380
To register a new
credential call

00:14:35.380 --> 00:14:38.770
navigator.credentials.create.

00:14:38.770 --> 00:14:40.870
This will cause the
browser to start

00:14:40.870 --> 00:14:46.160
waiting for a user's gesture
on the connected authenticator.

00:14:46.160 --> 00:14:48.110
Upon the authenticator's
response,

00:14:48.110 --> 00:14:50.570
you will receive a
credential, which

00:14:50.570 --> 00:14:56.370
includes a public key and
an ID for the credential.

00:14:56.370 --> 00:14:59.750
Send a credential to
the server and store it

00:14:59.750 --> 00:15:03.270
for future authentication.

00:15:03.270 --> 00:15:07.430
Now that you have your user's
authenticator successfully

00:15:07.430 --> 00:15:11.900
registered, how does
the authentication work?

00:15:11.900 --> 00:15:15.510
After the user enters their
username and their password,

00:15:15.510 --> 00:15:17.960
you will ask for
a second factor.

00:15:17.960 --> 00:15:23.780
Use navigator.credentials.get
for authentication.

00:15:23.780 --> 00:15:26.750
For this call, you
must retrieve all

00:15:26.750 --> 00:15:30.470
of the user's registered
credential IDs from the server

00:15:30.470 --> 00:15:34.700
and provide them to the
browser in allowCredentials.

00:15:34.700 --> 00:15:39.840
That way, the browser can detect
which authenticator to use.

00:15:39.840 --> 00:15:44.130
Again, the user performs a
gesture on the authenticator.

00:15:44.130 --> 00:15:46.500
Then you will
receive a credential

00:15:46.500 --> 00:15:50.120
that contains a signature.

00:15:50.120 --> 00:15:52.850
The most important
part of WebAuthn

00:15:52.850 --> 00:15:57.030
is to verify the signature
on the server side.

00:15:57.030 --> 00:16:00.260
You should use a FIDO
server to do this validation

00:16:00.260 --> 00:16:02.420
on the back-end.

00:16:02.420 --> 00:16:06.740
I would recommend that you use
a trusted third-party service

00:16:06.740 --> 00:16:10.190
or a FIDO server.

00:16:10.190 --> 00:16:12.590
I will come back to this
topic later in this session.

00:16:16.160 --> 00:16:19.220
I have mentioned authenticators
many times in this session

00:16:19.220 --> 00:16:20.310
so far.

00:16:20.310 --> 00:16:23.630
But what exactly
are authenticators?

00:16:23.630 --> 00:16:25.580
And what kind of
authenticators do you

00:16:25.580 --> 00:16:28.520
need to have on hand
for development?

00:16:28.520 --> 00:16:33.010
Or assume users might be using.

00:16:33.010 --> 00:16:35.530
For two-factor
authentication, users

00:16:35.530 --> 00:16:41.430
can use authenticators that
are marked as U2F or FIDO2.

00:16:41.430 --> 00:16:45.580
As I said, security keys are
the most typical form factor

00:16:45.580 --> 00:16:48.500
for two-factor authentication.

00:16:48.500 --> 00:16:52.930
They are also known as
roaming authenticators.

00:16:52.930 --> 00:16:56.200
Roaming authenticators can
be hooked into your computer

00:16:56.200 --> 00:17:00.265
or smartphone using
USB, BLE, or NFC.

00:17:03.170 --> 00:17:07.099
One caveat about security
keys is that many of them

00:17:07.099 --> 00:17:10.310
come with a metal plate on it.

00:17:10.310 --> 00:17:13.720
Some people might think that
this plate is a fingerprint

00:17:13.720 --> 00:17:14.740
sensor.

00:17:14.740 --> 00:17:18.250
But in many cases, it is not.

00:17:18.250 --> 00:17:19.790
When you are buying
a security key,

00:17:19.790 --> 00:17:23.160
please be careful about that.

00:17:23.160 --> 00:17:30.290
By the way, how many of you
here have a security key?

00:17:30.290 --> 00:17:31.190
A lot of you.

00:17:31.190 --> 00:17:35.570
But I see some of you don't.

00:17:35.570 --> 00:17:37.730
You learned about
WebAuthn today,

00:17:37.730 --> 00:17:41.000
and you're excited
to try it, right?

00:17:41.000 --> 00:17:43.220
But you don't have
a security key.

00:17:43.220 --> 00:17:47.580
You need one, don't you?

00:17:47.580 --> 00:17:55.380
So good news is that we have
this security key to give away.

00:17:55.380 --> 00:17:58.440
Please visit the
developer sandbox.

00:17:58.440 --> 00:18:01.890
There is an identity, security,
and privacy developer sandbox.

00:18:01.890 --> 00:18:03.960
So you can go there
to pick yours.

00:18:07.453 --> 00:18:09.948
[APPLAUSE]

00:18:09.948 --> 00:18:10.946
Thank you.

00:18:14.940 --> 00:18:19.470
And there is another kind of
authenticator built directly

00:18:19.470 --> 00:18:25.850
into your computer or smartphone
called platform authenticator.

00:18:25.850 --> 00:18:28.790
Platform authenticators
are more consumer

00:18:28.790 --> 00:18:32.150
friendly than roaming
authenticator or security

00:18:32.150 --> 00:18:36.930
keys because you don't have
to purchase a separate device.

00:18:36.930 --> 00:18:40.130
You don't have to worry
about carrying it around.

00:18:40.130 --> 00:18:45.610
And they are a part of the
device you use every day.

00:18:45.610 --> 00:18:48.880
And many platform authenticators
come with a biometric sensor,

00:18:48.880 --> 00:18:53.700
such as a fingerprint sensor
or a facial recognition sensor.

00:18:53.700 --> 00:18:57.570
Users can also use the
platform's screen log feature

00:18:57.570 --> 00:19:00.520
to verify their identity.

00:19:00.520 --> 00:19:02.790
Some people may
worry that this mean

00:19:02.790 --> 00:19:06.990
that their fingerprint
is sent to that website

00:19:06.990 --> 00:19:09.810
and may somehow be stolen.

00:19:09.810 --> 00:19:10.470
Right?

00:19:10.470 --> 00:19:12.680
But don't worry.

00:19:12.680 --> 00:19:17.075
Important secret, such as
biometric data or screen log

00:19:17.075 --> 00:19:21.120
patterns are stored
only locally,

00:19:21.120 --> 00:19:27.050
which means user verification
is done entirely on the device.

00:19:27.050 --> 00:19:30.680
We call this local
user verification.

00:19:30.680 --> 00:19:34.550
This also means that every new
device that the user signs in

00:19:34.550 --> 00:19:39.200
on must be registered.

00:19:39.200 --> 00:19:42.050
Platform authenticators
that have the local user

00:19:42.050 --> 00:19:46.250
verification ability, or
I'll just say most of them,

00:19:46.250 --> 00:19:49.040
are specifically
called user verifying

00:19:49.040 --> 00:19:52.500
platform authenticators.

00:19:52.500 --> 00:19:59.240
So the second use case of
WebAuthn is re-authentication.

00:19:59.240 --> 00:20:01.880
Re-authentication
is a user experience

00:20:01.880 --> 00:20:04.520
where a user is
already signed in,

00:20:04.520 --> 00:20:07.830
but gets a request
to authenticate again

00:20:07.830 --> 00:20:09.470
when they come
back to the website

00:20:09.470 --> 00:20:12.980
after the session
is expired or when

00:20:12.980 --> 00:20:16.370
a sensitive operation,
such as changing a password

00:20:16.370 --> 00:20:21.020
or making a payment,
is being performed.

00:20:21.020 --> 00:20:26.340
A common way to perform re-auth
is to ask the user's password

00:20:26.340 --> 00:20:27.120
again.

00:20:27.120 --> 00:20:30.470
But with WebAuthn
and user verifying

00:20:30.470 --> 00:20:33.080
platform authenticator,
the user experience

00:20:33.080 --> 00:20:35.630
can be really snappy.

00:20:35.630 --> 00:20:36.860
Let's see how Yahoo!

00:20:36.860 --> 00:20:41.990
Japan integrated
re-auth user experience.

00:20:41.990 --> 00:20:46.650
When you are signing in,
you start with a username.

00:20:46.650 --> 00:20:50.010
After you submit your username,
the browser's native dialog

00:20:50.010 --> 00:20:51.500
pops up.

00:20:51.500 --> 00:20:53.970
The user can verify
their identity locally

00:20:53.970 --> 00:20:58.180
with a fingerprint
sensor, for example.

00:20:58.180 --> 00:20:59.980
Once verified, you
are already signed in.

00:21:03.540 --> 00:21:08.940
This fancy UX is also
preceded by a registration.

00:21:08.940 --> 00:21:09.570
Because Yahoo!

00:21:09.570 --> 00:21:14.820
Japan is already passwordless,
I'm signing into their service

00:21:14.820 --> 00:21:18.420
using SMS OTP
without a password.

00:21:21.150 --> 00:21:25.860
After successfully signing in
with your username and an OTP,

00:21:25.860 --> 00:21:28.005
will be prompted to
register the device.

00:21:31.320 --> 00:21:35.930
Again, perform local
user verification.

00:21:35.930 --> 00:21:38.660
Just like we did for the
two-factor authentication

00:21:38.660 --> 00:21:40.670
with GitHub, the
service asks you

00:21:40.670 --> 00:21:44.330
to name the device so that
you can identify it if you

00:21:44.330 --> 00:21:48.095
need to remove it later on.

00:21:48.095 --> 00:21:51.140
And your device is registered.

00:21:51.140 --> 00:21:54.740
Moving forward, you can use
this device to log-in to Yahoo!

00:21:54.740 --> 00:21:57.754
Japan using local
user verification.

00:22:00.600 --> 00:22:04.800
By the way, have
you got a Pixel 4?

00:22:04.800 --> 00:22:06.490
Some of you, right?

00:22:06.490 --> 00:22:10.980
Pixel 4 has a new shiny
facial recognition capability.

00:22:10.980 --> 00:22:17.050
And some of you might have tried
it with WebAuthn with Pixel 4.

00:22:17.050 --> 00:22:20.770
And so that it doesn't work yet.

00:22:20.770 --> 00:22:22.630
But the good news
is that starting

00:22:22.630 --> 00:22:27.100
from Chrome 79 and that update
to the Google Play services,

00:22:27.100 --> 00:22:29.270
it will be possible.

00:22:29.270 --> 00:22:32.860
And I'm going to demo
it for you right now.

00:22:42.740 --> 00:22:46.730
OK, so what I'm
going to show you

00:22:46.730 --> 00:22:52.810
is a re-auth user experience
at passwords.google.com.

00:22:52.810 --> 00:22:55.760
Passwords.google.com
is a page where

00:22:55.760 --> 00:22:58.820
you can view the
password you stored

00:22:58.820 --> 00:23:02.360
to Chrome, if there are
synchronized with your Google

00:23:02.360 --> 00:23:04.670
account.

00:23:04.670 --> 00:23:07.050
As you open an individual
password entry,

00:23:07.050 --> 00:23:10.700
you'll be asked to do a re-auth.

00:23:10.700 --> 00:23:13.100
And if you are using a
user verifying platform

00:23:13.100 --> 00:23:16.970
authenticator,
like Pixel phones,

00:23:16.970 --> 00:23:19.670
you will do a local
user verification.

00:23:19.670 --> 00:23:25.170
So let me try one of the
passwords here by pressing it.

00:23:25.170 --> 00:23:30.180
Intentionally, I'm not going to
show my face at first, right?

00:23:30.180 --> 00:23:33.450
So by pressing, it's asking
to verify my identity.

00:23:33.450 --> 00:23:41.340
By pressing it, it shows
a fancy UI with a face.

00:23:41.340 --> 00:23:47.050
But because I was away and not
showing my face, it failed.

00:23:47.050 --> 00:23:53.900
But let me try again with my
face revealed to the phone.

00:23:53.900 --> 00:23:56.790
See that guy winked?

00:23:56.790 --> 00:23:59.150
It's cute.

00:23:59.150 --> 00:24:05.910
And I'm confirmed
and successfully

00:24:05.910 --> 00:24:08.040
able to view my password.

00:24:08.040 --> 00:24:09.940
OK, go back to the
slides, please.

00:24:12.916 --> 00:24:14.900
Yeah?

00:24:14.900 --> 00:24:17.410
So it's a very user experience.

00:24:17.410 --> 00:24:18.940
You don't have to
type much, right?

00:24:18.940 --> 00:24:21.450
You don't have to
type your password.

00:24:21.450 --> 00:24:23.650
And with local
user verification,

00:24:23.650 --> 00:24:27.250
we have seen about 63%
improvement in time

00:24:27.250 --> 00:24:30.670
to log in comparing to
that re-authentication

00:24:30.670 --> 00:24:32.810
with a password.

00:24:32.810 --> 00:24:35.140
It has significant
user experience benefit

00:24:35.140 --> 00:24:36.100
for end users.

00:24:38.640 --> 00:24:43.460
And here's how to implement
this feature on your website.

00:24:43.460 --> 00:24:45.950
After a feature
detection, check if a user

00:24:45.950 --> 00:24:50.840
has a user verifying platform
authenticator using a function

00:24:50.840 --> 00:24:55.040
called isUserVerifyingP
latformAuthenticatorAvailable.

00:24:55.040 --> 00:24:58.580
That is very long function name.

00:24:58.580 --> 00:25:01.070
I believe this is
one of the longest--

00:25:01.070 --> 00:25:04.810
not one-- the longest
function name in browser API.

00:25:04.810 --> 00:25:08.690
But anyway, with this
check, you ensure

00:25:08.690 --> 00:25:12.590
that the user's environment
is capable of the re-auth user

00:25:12.590 --> 00:25:14.090
experience you are
about to perform.

00:25:17.020 --> 00:25:19.270
Call navigator
credentials.create

00:25:19.270 --> 00:25:23.320
to register that user verifying
platform authenticator.

00:25:23.320 --> 00:25:26.260
This is the same function
you called to register

00:25:26.260 --> 00:25:27.950
two-factor authentication.

00:25:27.950 --> 00:25:33.260
But you need to specify a
couple of specific options.

00:25:33.260 --> 00:25:38.330
Set authenticatorAttachment
to platform.

00:25:38.330 --> 00:25:42.950
This restricts registration
to platform authenticators.

00:25:42.950 --> 00:25:47.860
Roaming authenticators
won't be registered.

00:25:47.860 --> 00:25:52.580
Set userVerification
to required.

00:25:52.580 --> 00:25:57.140
This ensures that the
authenticator being registered

00:25:57.140 --> 00:26:02.100
is capable of local
user verification.

00:26:02.100 --> 00:26:04.530
As soon as the
function is called,

00:26:04.530 --> 00:26:07.920
the browser starts to wait
for a gesture on the platform

00:26:07.920 --> 00:26:11.960
authenticator, in this case,
local user verification.

00:26:11.960 --> 00:26:14.690
When you get the
returned credential,

00:26:14.690 --> 00:26:18.710
send it to the server
and store the credential,

00:26:18.710 --> 00:26:21.727
just like you've done for
two-factor authentication.

00:26:24.530 --> 00:26:27.290
To allow the user
to re-authenticate,

00:26:27.290 --> 00:26:29.990
you also need to store
the credential ID

00:26:29.990 --> 00:26:32.130
on the client side.

00:26:32.130 --> 00:26:37.280
You can do this with using
a cookie or local storage.

00:26:37.280 --> 00:26:38.900
And the registration is done.

00:26:41.550 --> 00:26:44.880
When the user comes back, run
the same feature detection

00:26:44.880 --> 00:26:49.150
as you did during registration,
however, in this case,

00:26:49.150 --> 00:26:51.300
make sure that the
user can fall back

00:26:51.300 --> 00:26:54.420
to use other means
of user verification,

00:26:54.420 --> 00:26:56.270
for example, using a password.

00:26:59.340 --> 00:27:03.420
To authenticate the user, call
navigator.credentials.get.

00:27:06.080 --> 00:27:08.900
For this call, fit the
option, use the verification

00:27:08.900 --> 00:27:11.570
to be true.

00:27:11.570 --> 00:27:14.750
And in allowCredentials,
include the credential

00:27:14.750 --> 00:27:20.590
ID you stored locally
during your registration.

00:27:20.590 --> 00:27:22.960
As soon as you
receive a credential,

00:27:22.960 --> 00:27:26.770
make sure to verify
it on the server side.

00:27:26.770 --> 00:27:31.590
Once verified, the user
is successfully signed in.

00:27:31.590 --> 00:27:34.440
This is how you implement
a re-authentication user

00:27:34.440 --> 00:27:36.360
experience using WebAuthn.

00:27:39.560 --> 00:27:42.110
You can start learning
about web authentication

00:27:42.110 --> 00:27:45.490
from google/fido.

00:27:45.490 --> 00:27:49.420
If you're interested in more
nitty-gritty about implementing

00:27:49.420 --> 00:27:52.480
WebAuthn, there are some
awesome documentation

00:27:52.480 --> 00:27:58.660
written by folks at Duo
Security at webauthn.guide.

00:27:58.660 --> 00:28:02.050
If you're interested in
implementing the re-auth user

00:28:02.050 --> 00:28:06.280
experience, go to
Google/WebAuthn Re-auth Code

00:28:06.280 --> 00:28:10.760
Lab, which I hope it will
help you ramp-up with learning

00:28:10.760 --> 00:28:11.260
WebAuthn.

00:28:14.050 --> 00:28:17.770
Regarding the FIDO server,
there are quite a few solutions

00:28:17.770 --> 00:28:20.290
available in the wild.

00:28:20.290 --> 00:28:23.470
You can check FIDO
Alliance Certified Servers

00:28:23.470 --> 00:28:26.400
on their official website.

00:28:26.400 --> 00:28:29.370
Also, there's a list
of open source servers

00:28:29.370 --> 00:28:30.850
and other resources as well.

00:28:34.240 --> 00:28:38.290
We'd like to also collect
your interest in a cloud

00:28:38.290 --> 00:28:41.110
solution for FIDO servers.

00:28:41.110 --> 00:28:44.740
Please drop a line
on SSL at google.com

00:28:44.740 --> 00:28:48.650
or just visit the developer
sandbox and let us know.

00:28:52.330 --> 00:28:54.290
Let me recap.

00:28:54.290 --> 00:28:58.440
In this session, you have
learned two technologies.

00:28:58.440 --> 00:29:04.980
SMS Receiver API eliminates the
friction of entering SMS OTP.

00:29:04.980 --> 00:29:06.990
It's under origin trial.

00:29:06.990 --> 00:29:11.520
We are looking for your
feedback on the API.

00:29:11.520 --> 00:29:16.320
We recommend two user
experience flow using WebAuthn.

00:29:16.320 --> 00:29:18.280
One is two-factor
authentication,

00:29:18.280 --> 00:29:24.390
which works best with security
keys or roaming authenticators.

00:29:24.390 --> 00:29:26.790
The other is
re-authentication, which

00:29:26.790 --> 00:29:30.075
works best with user verifying
platform authenticators.

00:29:33.190 --> 00:29:36.110
I and a bunch of
experts on this area

00:29:36.110 --> 00:29:39.410
will be waiting for you
at the developer sandbox.

00:29:39.410 --> 00:29:42.470
Please come and
say hi, and please

00:29:42.470 --> 00:29:46.550
give us feedback about our APIs
and ask questions, not just

00:29:46.550 --> 00:29:49.040
to pick up the security key.

00:29:49.040 --> 00:29:51.800
I hope you'll enjoy the
rest of Chrome Dev Summit.

00:29:51.800 --> 00:29:52.310
Thank you.

00:29:52.310 --> 00:29:52.810
[APPLAUSE]

00:29:52.810 --> 00:29:55.660
[MUSIC PLAYING]

