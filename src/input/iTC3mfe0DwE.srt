1
00:00:00,000 --> 00:00:02,385
[MUSIC PLAYING]

2
00:00:02,385 --> 00:00:06,690


3
00:00:06,690 --> 00:00:08,189
FRANCOIS BEAUFORT:
You are tired.

4
00:00:08,189 --> 00:00:10,780
I can feel it, so I
will cut to the chase.

5
00:00:10,780 --> 00:00:12,660
Media on the web matters.

6
00:00:12,660 --> 00:00:14,490
And I'm not just saying
it because I deeply

7
00:00:14,490 --> 00:00:16,230
believe in this.

8
00:00:16,230 --> 00:00:18,750
Let me share some
numbers with you.

9
00:00:18,750 --> 00:00:24,800
Almost 40,000 years of video
are watched every day in Chrome.

10
00:00:24,800 --> 00:00:26,800
You may want to take
some time to digest this.

11
00:00:26,800 --> 00:00:29,980


12
00:00:29,980 --> 00:00:32,810
30% of all time on
Chrome for Android

13
00:00:32,810 --> 00:00:36,570
is spent watching video,
and it is about 15%

14
00:00:36,570 --> 00:00:39,120
of all time on
Chrome for Android.

15
00:00:39,120 --> 00:00:41,640
It is huge.

16
00:00:41,640 --> 00:00:44,160
And I'm not the only
one to have noticed it.

17
00:00:44,160 --> 00:00:48,270
Media PWAs across the world
have seen business impact.

18
00:00:48,270 --> 00:00:51,570
Spotify globally
and Ghana in India

19
00:00:51,570 --> 00:00:53,580
are both in great success.

20
00:00:53,580 --> 00:00:56,810
And it's just the beginning.

21
00:00:56,810 --> 00:00:59,060
In the next 20 minutes
or so, Angie and I

22
00:00:59,060 --> 00:01:00,590
will watch you [INAUDIBLE].

23
00:01:00,590 --> 00:01:03,470
We think will help you
build great and modern media

24
00:01:03,470 --> 00:01:04,800
experiences.

25
00:01:04,800 --> 00:01:08,510
We'll cover multitasking with
picture-in-picture, bandwidth

26
00:01:08,510 --> 00:01:12,860
saving with the 81 video codec,
a brand new way of switching

27
00:01:12,860 --> 00:01:17,690
codec seamlessly, and finally,
playback quality predictability

28
00:01:17,690 --> 00:01:19,340
with the media capabilities API.

29
00:01:19,340 --> 00:01:22,290


30
00:01:22,290 --> 00:01:24,390
Let me tell you a little
bit about myself first

31
00:01:24,390 --> 00:01:26,250
and how I work.

32
00:01:26,250 --> 00:01:28,560
I love to multitask
on my computers

33
00:01:28,560 --> 00:01:30,630
doing many thing
at the same time--

34
00:01:30,630 --> 00:01:33,600
browsing, obviously,
writing some code,

35
00:01:33,600 --> 00:01:36,120
sharing news on social
media platforms,

36
00:01:36,120 --> 00:01:38,620
watching educational
videos, and so on.

37
00:01:38,620 --> 00:01:40,770
This is what I do
on a daily basis.

38
00:01:40,770 --> 00:01:43,500
And I'm quite sure I'm not
the only one to do that.

39
00:01:43,500 --> 00:01:46,620
But you may wonder,
Francois, this looks cool,

40
00:01:46,620 --> 00:01:48,510
but are you good at it?

41
00:01:48,510 --> 00:01:51,420
Does that make you
more productive?

42
00:01:51,420 --> 00:01:53,860
This does not matter.

43
00:01:53,860 --> 00:01:56,440
I love to do that, and I
want to be efficient at it.

44
00:01:56,440 --> 00:01:58,590
But it is not always easy.

45
00:01:58,590 --> 00:02:02,770
For instance, watching a
video while I'm coding,

46
00:02:02,770 --> 00:02:04,120
how's that work?

47
00:02:04,120 --> 00:02:07,110
First, I have to open a
separate YouTube window,

48
00:02:07,110 --> 00:02:09,100
move it to a corner
of my screen,

49
00:02:09,100 --> 00:02:11,440
and making sure other
windows are not covering it.

50
00:02:11,440 --> 00:02:14,240
And only then I
can start to enjoy.

51
00:02:14,240 --> 00:02:16,090
But can you imagine
my frustration

52
00:02:16,090 --> 00:02:18,580
when window position
are not remembered,

53
00:02:18,580 --> 00:02:23,600
or when some new window open in
the middle of my little video?

54
00:02:23,600 --> 00:02:24,820
But that's OK.

55
00:02:24,820 --> 00:02:27,040
That's OK, because today,
a brand new web API

56
00:02:27,040 --> 00:02:31,680
called picture-in-picture solved
that very specific use case.

57
00:02:31,680 --> 00:02:33,960
Picture-in-picture,
also known as PIP,

58
00:02:33,960 --> 00:02:36,210
is a common feature
in television

59
00:02:36,210 --> 00:02:39,930
that allows users to watch
video in a floating window

60
00:02:39,930 --> 00:02:42,554
always on top of other
window, so that they

61
00:02:42,554 --> 00:02:44,970
can keep an eye on what they're
watching while interacting

62
00:02:44,970 --> 00:02:47,580
with other sites' obligations.

63
00:02:47,580 --> 00:02:50,790
The BBC website actually
picture-in-picture a month ago.

64
00:02:50,790 --> 00:02:53,990
And they're quite happy with
the early result they got.

65
00:02:53,990 --> 00:02:56,110
Now, like I said earlier,
I like to write code.

66
00:02:56,110 --> 00:02:59,019
So let me show some code.

67
00:02:59,019 --> 00:03:01,060
To enter picture-in-picture
on the video element,

68
00:03:01,060 --> 00:03:03,700
you simply have to call
request picture-in-picture

69
00:03:03,700 --> 00:03:05,110
on a video element.

70
00:03:05,110 --> 00:03:07,180
And because this
call is asynchronous,

71
00:03:07,180 --> 00:03:10,640
it will return a promise that
can either resolve or reject.

72
00:03:10,640 --> 00:03:13,150
And I'll explain why
it can reject in a bit.

73
00:03:13,150 --> 00:03:14,800
The important thing
to notice here

74
00:03:14,800 --> 00:03:17,470
is that the user has to
interact with the page first

75
00:03:17,470 --> 00:03:20,020
to be able to enter
picture-in-picture.

76
00:03:20,020 --> 00:03:21,610
In this example,
I use the button.

77
00:03:21,610 --> 00:03:24,620


78
00:03:24,620 --> 00:03:27,960
Making this button
a toggle button

79
00:03:27,960 --> 00:03:29,930
is quite straightforward.

80
00:03:29,930 --> 00:03:31,850
By checking if the
video element is not

81
00:03:31,850 --> 00:03:34,190
the document that
picture-in-picture element,

82
00:03:34,190 --> 00:03:36,320
in other words, already
in picture-in-picture,

83
00:03:36,320 --> 00:03:38,120
I'll proceed as before.

84
00:03:38,120 --> 00:03:42,490
If it is, let's call document
dot exit picture-in-picture.

85
00:03:42,490 --> 00:03:46,820
Requesting picture-in-picture
may reject for several reasons.

86
00:03:46,820 --> 00:03:49,330
The most common ones being
the video metadata not

87
00:03:49,330 --> 00:03:53,260
loaded yet, picture-in-picture
not supported by the platform,

88
00:03:53,260 --> 00:03:55,820
or simply not
allowed by the user.

89
00:03:55,820 --> 00:04:00,480
The full list of reasons is
available in the documentation.

90
00:04:00,480 --> 00:04:02,790
Updating your website
when the video

91
00:04:02,790 --> 00:04:06,070
is playing in [INAUDIBLE]
picture-in-picture is crucial.

92
00:04:06,070 --> 00:04:08,040
And you may think that
waiting for the request

93
00:04:08,040 --> 00:04:10,440
picture-in-picture promise
to wait is good enough,

94
00:04:10,440 --> 00:04:12,750
but it is not.

95
00:04:12,750 --> 00:04:15,060
What if the video enters
picture-in-picture from

96
00:04:15,060 --> 00:04:16,839
another path, for instance?

97
00:04:16,839 --> 00:04:19,170
What if the user clicked
the browser context menu,

98
00:04:19,170 --> 00:04:22,200
for instance, or the browser
triggered picture-in-picture

99
00:04:22,200 --> 00:04:24,990
automatically, like Chrome
does on full-screen video

100
00:04:24,990 --> 00:04:26,460
on Android?

101
00:04:26,460 --> 00:04:30,000
This is why I strongly
recommend you update your layout

102
00:04:30,000 --> 00:04:32,070
and enter and leave
picture-in-picture event

103
00:04:32,070 --> 00:04:34,900
listeners.

104
00:04:34,900 --> 00:04:38,740
Now, having a 4K video
playing in a small window

105
00:04:38,740 --> 00:04:39,930
may not be what you want.

106
00:04:39,930 --> 00:04:44,470
So to adjust the
quality of the video

107
00:04:44,470 --> 00:04:46,390
based on the
picture-in-picture window size,

108
00:04:46,390 --> 00:04:48,160
you can simply check
the width and height

109
00:04:48,160 --> 00:04:50,350
attribute of the
picture-in-picture window

110
00:04:50,350 --> 00:04:53,500
available in the enter
picture-in-picture event.

111
00:04:53,500 --> 00:04:55,000
Too many
picture-in-picture, I know.

112
00:04:55,000 --> 00:04:57,630


113
00:04:57,630 --> 00:04:59,479
Adding a resize
amount to this object

114
00:04:59,479 --> 00:05:01,270
would also let you know
when to user resize

115
00:05:01,270 --> 00:05:03,520
the picture-in-picture
window so that you

116
00:05:03,520 --> 00:05:05,110
can update the video quality.

117
00:05:05,110 --> 00:05:07,870
By the way, Angie
will work you later

118
00:05:07,870 --> 00:05:10,180
on how to change seamlessly
the video quality

119
00:05:10,180 --> 00:05:14,620
and the codec container
to help with that.

120
00:05:14,620 --> 00:05:17,550
And finally, defining the
availability of your custom

121
00:05:17,550 --> 00:05:19,290
picture-in-picture
button should be

122
00:05:19,290 --> 00:05:22,350
as easy as taking the
Boolean value of document dot

123
00:05:22,350 --> 00:05:24,810
picture-in-picture
enable, but it is not.

124
00:05:24,810 --> 00:05:27,640
Because you want your
website to be perfect.

125
00:05:27,640 --> 00:05:30,730
So you also have to check
if the HTML video attribute

126
00:05:30,730 --> 00:05:33,730
desirable picture-in-picture
is present.

127
00:05:33,730 --> 00:05:35,700
And finally, for
real this time, you

128
00:05:35,700 --> 00:05:38,450
have to check if the video
is actually ready to play.

129
00:05:38,450 --> 00:05:41,010
And only then, you'll get
a perfect implementation

130
00:05:41,010 --> 00:05:43,200
for your custom
picture-in-picture button

131
00:05:43,200 --> 00:05:45,970
in your media player.

132
00:05:45,970 --> 00:05:48,550
I'm glad to say that we have
shaped picture-in-picture API

133
00:05:48,550 --> 00:05:52,480
last month Chrome 70 in
Linux, Mac and Windows.

134
00:05:52,480 --> 00:05:54,437
Chrome OS and Android
are coming soon.

135
00:05:54,437 --> 00:05:56,770
And we're looking forward to
see all the browser vendors

136
00:05:56,770 --> 00:05:59,530
implement this API as well.

137
00:05:59,530 --> 00:06:04,920
You'll find all documentation
and sample units at this URL.

138
00:06:04,920 --> 00:06:09,210
Now, what if I tell you this
is just the tip of the iceberg?

139
00:06:09,210 --> 00:06:14,070
In Chrome 71, currently, beta
will support media stream video

140
00:06:14,070 --> 00:06:17,930
in picture-in-picture.

141
00:06:17,930 --> 00:06:19,910
These two little
lines up java script

142
00:06:19,910 --> 00:06:21,890
do what you think it does.

143
00:06:21,890 --> 00:06:24,010
Your web cam video stream
in a picture-in-picture

144
00:06:24,010 --> 00:06:25,370
in picture window.

145
00:06:25,370 --> 00:06:27,920
And this already makes me happy.

146
00:06:27,920 --> 00:06:34,420
And in case you're wondering,
those are real fake glasses.

147
00:06:34,420 --> 00:06:35,839
[LAUGHTER]

148
00:06:35,839 --> 00:06:40,570


149
00:06:40,570 --> 00:06:42,370
But wait, there's more.

150
00:06:42,370 --> 00:06:44,890
Soon, a brand new web API,
called screen capture,

151
00:06:44,890 --> 00:06:48,280
will allow a website in Chrome
to capture a screen to a media

152
00:06:48,280 --> 00:06:51,730
stream for recording or
sharing over the network.

153
00:06:51,730 --> 00:06:54,350
This API will enable a
number of web applications,

154
00:06:54,350 --> 00:06:56,620
including screen sharing.

155
00:06:56,620 --> 00:07:00,430
Imagine now if you combine these
APIs with picture-in-picture.

156
00:07:00,430 --> 00:07:02,380
Let's have a look at this code.

157
00:07:02,380 --> 00:07:05,710
After getting the
screen, we display media.

158
00:07:05,710 --> 00:07:08,920
And the voice audio stream
will get user media.

159
00:07:08,920 --> 00:07:11,860
I create from scratch
a new media stream,

160
00:07:11,860 --> 00:07:14,500
but contains the
screen video stream,

161
00:07:14,500 --> 00:07:17,920
including my picture-in-picture
window and my voice

162
00:07:17,920 --> 00:07:19,950
as the audio stream.

163
00:07:19,950 --> 00:07:22,640
This code is simply
gorgeous, in my opinion.

164
00:07:22,640 --> 00:07:24,020
This is it.

165
00:07:24,020 --> 00:07:26,770
There's nothing more.

166
00:07:26,770 --> 00:07:29,250
So let me show what this code
does with short demo I've

167
00:07:29,250 --> 00:07:31,440
created just for you.

168
00:07:31,440 --> 00:07:33,182
And can we switch
to demo, please?

169
00:07:33,182 --> 00:07:36,350


170
00:07:36,350 --> 00:07:41,630
So on the left is me,
Francois, the hardcore gamer.

171
00:07:41,630 --> 00:07:45,430
On the right, it's still me, but
this time, as a casual viewer.

172
00:07:45,430 --> 00:07:47,420
And what you're going
to see on the left

173
00:07:47,420 --> 00:07:51,020
is me sharing my
screen, including

174
00:07:51,020 --> 00:07:52,912
the picture-in-picture
window, while I'm

175
00:07:52,912 --> 00:07:53,870
playing the diner game.

176
00:07:53,870 --> 00:07:57,220


177
00:07:57,220 --> 00:08:00,570
So this is me.

178
00:08:00,570 --> 00:08:01,120
Hi, mom.

179
00:08:01,120 --> 00:08:05,900


180
00:08:05,900 --> 00:08:09,620
And let's say [INAUDIBLE].

181
00:08:09,620 --> 00:08:12,250
So like I said, I'm
a hardcore game--

182
00:08:12,250 --> 00:08:13,280
OK, sorry, I lied.

183
00:08:13,280 --> 00:08:14,744
[LAUGHTER]

184
00:08:14,744 --> 00:08:16,602


185
00:08:16,602 --> 00:08:18,310
So keep in mind that
the code you've just

186
00:08:18,310 --> 00:08:20,510
seen with 10 more
lines of java script

187
00:08:20,510 --> 00:08:24,140
involving the media we called
API and some web sockets

188
00:08:24,140 --> 00:08:28,160
are pretty much the
entire code for this demo.

189
00:08:28,160 --> 00:08:31,770
Can we switch back to
the slides, please?

190
00:08:31,770 --> 00:08:33,600
The demo is available
for you on Glitch

191
00:08:33,600 --> 00:08:37,200
if you want to play
with it later on.

192
00:08:37,200 --> 00:08:38,870
Now, some of you may
have noticed that

193
00:08:38,870 --> 00:08:42,289
the picture-in-picture window
contains only two buttons--

194
00:08:42,289 --> 00:08:44,690
a play/pause button
and a close button.

195
00:08:44,690 --> 00:08:46,291
Those are blue there.

196
00:08:46,291 --> 00:08:48,290
We've talked to other
brother vendors interested

197
00:08:48,290 --> 00:08:49,664
in picture-in-picture
about this,

198
00:08:49,664 --> 00:08:51,560
and we're happy to
share that the media

199
00:08:51,560 --> 00:08:54,930
session API we've talked
about last year [INAUDIBLE]..

200
00:08:54,930 --> 00:08:58,790
We'll be using a new feature to
add and customize some actions

201
00:08:58,790 --> 00:09:00,680
to picture-in-picture window.

202
00:09:00,680 --> 00:09:03,500
Think of seat backwards,
forward, previous track,

203
00:09:03,500 --> 00:09:06,410
next track, and even new ones.

204
00:09:06,410 --> 00:09:09,480
If you are already using
it for your mobile website,

205
00:09:09,480 --> 00:09:11,550
this will come for free.

206
00:09:11,550 --> 00:09:14,310
To illustrate these
upcoming possibilities,

207
00:09:14,310 --> 00:09:18,450
imagine a web app that shows the
poster image of a podcast show,

208
00:09:18,450 --> 00:09:21,090
for instance, in a
picture-in-picture window,

209
00:09:21,090 --> 00:09:23,610
all right up, and use
these window media

210
00:09:23,610 --> 00:09:26,730
controls to tailor
the media experience.

211
00:09:26,730 --> 00:09:27,810
I think that looks cool.

212
00:09:27,810 --> 00:09:31,440
And this is coming as well.

213
00:09:31,440 --> 00:09:33,390
So to summarize,
picture-in-picture

214
00:09:33,390 --> 00:09:35,940
is great for multitasking.

215
00:09:35,940 --> 00:09:37,710
And in near future,
it may also be

216
00:09:37,710 --> 00:09:40,620
used to record your
screen with your webcam

217
00:09:40,620 --> 00:09:43,380
or even to create a
custom media center always

218
00:09:43,380 --> 00:09:48,230
on top of other windows that
users can access easily.

219
00:09:48,230 --> 00:09:50,390
I think we all agree
that picture-in-picture

220
00:09:50,390 --> 00:09:53,270
improves a lot the user
experience in general.

221
00:09:53,270 --> 00:09:55,700
And you know what else
improves it a lot?

222
00:09:55,700 --> 00:09:56,810
Video codec.

223
00:09:56,810 --> 00:09:59,060
And talk about this,
let me introduce

224
00:09:59,060 --> 00:10:00,856
Angie Chiang, a software
engineer working

225
00:10:00,856 --> 00:10:01,730
on video compression.

226
00:10:01,730 --> 00:10:02,954
[MUSIC PLAYING]

227
00:10:02,954 --> 00:10:04,385
[APPLAUSE]

228
00:10:04,385 --> 00:10:06,724


229
00:10:06,724 --> 00:10:07,724
ANGIE CHIANG: Thank you.

230
00:10:07,724 --> 00:10:11,550


231
00:10:11,550 --> 00:10:13,320
Thank you, Francois.

232
00:10:13,320 --> 00:10:14,470
Hi, everyone.

233
00:10:14,470 --> 00:10:17,130
I'm Angie from
Google's web engine.

234
00:10:17,130 --> 00:10:20,070
Today, I'm going
to share with you

235
00:10:20,070 --> 00:10:24,165
a new generation video codec,
AV1, was launched recently.

236
00:10:24,165 --> 00:10:27,160


237
00:10:27,160 --> 00:10:30,040
So we have three
main goals for AV1.

238
00:10:30,040 --> 00:10:35,550
First off, we want AV1 to
provide state-of-the-art

239
00:10:35,550 --> 00:10:39,420
compression efficiency
among other codecs.

240
00:10:39,420 --> 00:10:43,660
Secondly, we want AV1 to
be accessible by everyone,

241
00:10:43,660 --> 00:10:47,790
so we made it an open source
project, and it's royalty-free.

242
00:10:47,790 --> 00:10:53,850
Finally, we want to deploy
AV1 right away and quickly.

243
00:10:53,850 --> 00:10:57,390
So before I jump into
how we did or will

244
00:10:57,390 --> 00:11:01,050
do to achieve these goals,
let me explain a little bit

245
00:11:01,050 --> 00:11:03,765
why video compression
is important for users.

246
00:11:03,765 --> 00:11:08,180


247
00:11:08,180 --> 00:11:15,030
To visualize the importance of
compression for video service,

248
00:11:15,030 --> 00:11:17,060
let me give you an example.

249
00:11:17,060 --> 00:11:22,480
Using Edge 264, a five
minute HD-compressed video

250
00:11:22,480 --> 00:11:25,380
will take about 300 megabytes.

251
00:11:25,380 --> 00:11:28,700
On the other hand, the
uncompressed version

252
00:11:28,700 --> 00:11:33,590
will take about 25
gigabytes, 80 times larger

253
00:11:33,590 --> 00:11:36,050
than the compressed version.

254
00:11:36,050 --> 00:11:38,780
This means, without
video compression,

255
00:11:38,780 --> 00:11:41,570
watching video online will
eat up all your internet

256
00:11:41,570 --> 00:11:47,780
bandwidth, not to mention the
sky-rocket costs of storage

257
00:11:47,780 --> 00:11:48,340
on the cloud.

258
00:11:48,340 --> 00:11:51,500


259
00:11:51,500 --> 00:11:55,730
So more compression gives the
user better user experience.

260
00:11:55,730 --> 00:11:58,940
We have seen the proof
of this with VP9,

261
00:11:58,940 --> 00:12:01,540
the predecessor of AV1.

262
00:12:01,540 --> 00:12:08,060
YouTube did a comprehensive AV
experiment when launching VP9.

263
00:12:08,060 --> 00:12:13,650
Compared to H.264, performance
improved in a number of ways,

264
00:12:13,650 --> 00:12:16,820
ultimately result in
higher watch time.

265
00:12:16,820 --> 00:12:19,400
This is due to VP9's
outperforming coding

266
00:12:19,400 --> 00:12:20,090
efficiency.

267
00:12:20,090 --> 00:12:22,970


268
00:12:22,970 --> 00:12:25,930
With AV1, we have done it again.

269
00:12:25,930 --> 00:12:29,880
A new generate codec
provides 30% [INAUDIBLE]

270
00:12:29,880 --> 00:12:36,080
reduction over VP9 across a
variety of video qualities.

271
00:12:36,080 --> 00:12:41,000
This means, given the
[INAUDIBLE] quality,

272
00:12:41,000 --> 00:12:45,800
AV1's video size will
be 30% smaller than VP9.

273
00:12:45,800 --> 00:12:50,610
This project integrated
over 100 algorithm tools,

274
00:12:50,610 --> 00:12:53,840
including the technologies
from open source projects,

275
00:12:53,840 --> 00:12:55,700
like Mozilla's
[INAUDIBLE] project

276
00:12:55,700 --> 00:12:59,630
and Cisco's SOAR project.

277
00:12:59,630 --> 00:13:05,390
And again, AV1 is an open source
project, and it's royalty-free.

278
00:13:05,390 --> 00:13:11,450
So its development community
alliance for open media

279
00:13:11,450 --> 00:13:16,190
has attracted 40 companies
to join and to contribute

280
00:13:16,190 --> 00:13:19,330
their technologies into AV1.

281
00:13:19,330 --> 00:13:23,450
There are content providers,
streaming service providers,

282
00:13:23,450 --> 00:13:27,050
and power companies which
cover a wide spectrum

283
00:13:27,050 --> 00:13:30,350
of the ecosystem for
video on the web.

284
00:13:30,350 --> 00:13:34,940
Having Google, Apple,
Microsoft, and Mozilla

285
00:13:34,940 --> 00:13:38,330
means we can have AV1 to work
everywhere on the web platform.

286
00:13:38,330 --> 00:13:42,100


287
00:13:42,100 --> 00:13:45,030
So we have been working
hard toward this goal.

288
00:13:45,030 --> 00:13:51,090
In this quarter, AV1 decoder
is supported by Chrome browser.

289
00:13:51,090 --> 00:13:55,440
And we started sorting
video content from YouTube.

290
00:13:55,440 --> 00:14:00,450
Firefox and Edge are also
launched in the beta platform

291
00:14:00,450 --> 00:14:02,010
last month.

292
00:14:02,010 --> 00:14:06,020
And we plan to integrate
the AV1 with web RTC

293
00:14:06,020 --> 00:14:08,550
and to deploy AV1
into Android platform

294
00:14:08,550 --> 00:14:10,990
in the following years.

295
00:14:10,990 --> 00:14:14,290
[INAUDIBLE] support is
also under development,

296
00:14:14,290 --> 00:14:18,450
first arriving in 2020 for
TVs and mobile handsets.

297
00:14:18,450 --> 00:14:21,780


298
00:14:21,780 --> 00:14:24,970
For web developers,
using AV1 is easy.

299
00:14:24,970 --> 00:14:28,650
You simply need to code its type
supported function to make sure

300
00:14:28,650 --> 00:14:30,904
the browser support AV1.

301
00:14:30,904 --> 00:14:32,320
Then you can start
play the video.

302
00:14:32,320 --> 00:14:35,940


303
00:14:35,940 --> 00:14:37,980
So AV1 is very exciting.

304
00:14:37,980 --> 00:14:41,040
But rolling out AV1 is not easy.

305
00:14:41,040 --> 00:14:45,780
To ease the process of
the codec transition.

306
00:14:45,780 --> 00:14:47,940
a new change type
function is supported

307
00:14:47,940 --> 00:14:52,800
on Chrome browser, which allow
the browser to switch one

308
00:14:52,800 --> 00:14:55,900
codec to the other seamlessly.

309
00:14:55,900 --> 00:14:58,600
So for example, when
AV1 is not performing

310
00:14:58,600 --> 00:15:02,400
on some low-end devices,
the string service

311
00:15:02,400 --> 00:15:05,780
can always fall back to
VP9, which is less complex

312
00:15:05,780 --> 00:15:07,170
and may have
[INAUDIBLE] support.

313
00:15:07,170 --> 00:15:11,460


314
00:15:11,460 --> 00:15:14,170
Here is a simple call
for using change type.

315
00:15:14,170 --> 00:15:18,520
So initially, we add a
source buffer using VP9.

316
00:15:18,520 --> 00:15:21,220
And later on, we can call
a change type function

317
00:15:21,220 --> 00:15:22,130
to switch to AV1.

318
00:15:22,130 --> 00:15:25,080


319
00:15:25,080 --> 00:15:27,810
Let me give you some
demo about change type.

320
00:15:27,810 --> 00:15:46,520


321
00:15:46,520 --> 00:15:51,080
So we start playing
video using Edge 264.

322
00:15:51,080 --> 00:15:58,300
You can see that from
the top left corner,

323
00:15:58,300 --> 00:16:01,960
by clicking the button,
we can switch to AV1.

324
00:16:01,960 --> 00:16:02,990
Now, we are using AV1.

325
00:16:02,990 --> 00:16:13,540


326
00:16:13,540 --> 00:16:18,760
By clicking the
button again, now, we

327
00:16:18,760 --> 00:16:22,480
switch back to Edge 264.

328
00:16:22,480 --> 00:16:24,850
You can't tell there's
a transition, right?

329
00:16:24,850 --> 00:16:28,070
I think this is really cool.

330
00:16:28,070 --> 00:16:31,700
Let's go back to the slide.

331
00:16:31,700 --> 00:16:34,640
This is a support slide,
where you can find information

332
00:16:34,640 --> 00:16:37,520
about AV1 decoder
and change type.

333
00:16:37,520 --> 00:16:41,010


334
00:16:41,010 --> 00:16:43,720
Please, welcome back
on stage Francois,

335
00:16:43,720 --> 00:16:46,360
who's going to talk about
playback predictability

336
00:16:46,360 --> 00:16:48,594
with media capabilities API.

337
00:16:48,594 --> 00:16:50,450
[APPLAUSE]

338
00:16:50,450 --> 00:16:51,378
Francois.

339
00:16:51,378 --> 00:16:52,770
[MUSIC PLAYING]

340
00:16:52,770 --> 00:16:53,700
Thank you.

341
00:16:53,700 --> 00:16:54,270
FRANCOIS BEAUFORT: Thank you.

342
00:16:54,270 --> 00:16:54,640
Thank you.

343
00:16:54,640 --> 00:16:55,139
Thank you.

344
00:16:55,139 --> 00:16:58,500


345
00:16:58,500 --> 00:17:01,930
Did you ever wish you
could predict the future?

346
00:17:01,930 --> 00:17:02,980
I know I did.

347
00:17:02,980 --> 00:17:05,369
Be some kind of fortune teller.

348
00:17:05,369 --> 00:17:08,099
I personally would love
to jump into my future,

349
00:17:08,099 --> 00:17:10,609
have a quick look,
and just come back.

350
00:17:10,609 --> 00:17:12,430
Out of curiosity, I
asked people around me

351
00:17:12,430 --> 00:17:14,611
what they would do with
this kind of power.

352
00:17:14,611 --> 00:17:16,319
Some said they would
love to know if they

353
00:17:16,319 --> 00:17:17,870
would become grandparents.

354
00:17:17,870 --> 00:17:19,619
Some would like to see
if their project is

355
00:17:19,619 --> 00:17:21,060
going to be successful.

356
00:17:21,060 --> 00:17:22,980
And some obviously
would simply look

357
00:17:22,980 --> 00:17:25,599
for upcoming lottery numbers.

358
00:17:25,599 --> 00:17:27,099
Now brace yourself.

359
00:17:27,099 --> 00:17:29,560
In a sense, the
media capabilities

360
00:17:29,560 --> 00:17:32,710
API allows you to
predict the future,

361
00:17:32,710 --> 00:17:37,130
but only for a media
playback on the web.

362
00:17:37,130 --> 00:17:39,200
Until recently, web
developer had to rely

363
00:17:39,200 --> 00:17:42,350
solely on web API such
as is type supported

364
00:17:42,350 --> 00:17:46,100
or can play type to discover
whether media could be decoded.

365
00:17:46,100 --> 00:17:49,380
While this told them whether
media could be played at all,

366
00:17:49,380 --> 00:17:52,040
it didn't provide an
indication of whether the media

367
00:17:52,040 --> 00:17:54,170
playback would
drop lots of frame

368
00:17:54,170 --> 00:17:56,930
or rapidly drain device battery.

369
00:17:56,930 --> 00:17:59,720
In the absence of
the signal, developer

370
00:17:59,720 --> 00:18:01,460
had to create their
own heuristic,

371
00:18:01,460 --> 00:18:04,040
or just assume that if
a device can play back

372
00:18:04,040 --> 00:18:06,680
a combination of
codec and resolution,

373
00:18:06,680 --> 00:18:10,330
it could do so smoothly
and power efficiently.

374
00:18:10,330 --> 00:18:12,590
For users with less
capable devices,

375
00:18:12,590 --> 00:18:15,890
this often led to a
very poor experience.

376
00:18:15,890 --> 00:18:18,620
By using the media
capabilities API today,

377
00:18:18,620 --> 00:18:20,820
you can get more information
about the client's

378
00:18:20,820 --> 00:18:24,380
video decoded performance
and make an informed decision

379
00:18:24,380 --> 00:18:28,350
about which codec and resolution
to deliver to the user.

380
00:18:28,350 --> 00:18:31,760
In other words, it helps
ensure adaptive video streaming

381
00:18:31,760 --> 00:18:34,570
[INAUDIBLE] selection that
will play back smoothly

382
00:18:34,570 --> 00:18:37,730
onto the specific device.

383
00:18:37,730 --> 00:18:39,920
Here's how it works in Chrome.

384
00:18:39,920 --> 00:18:43,070
The media capabilities API use
metrics from previous playback

385
00:18:43,070 --> 00:18:46,220
to predict whether future
playback in the same codec

386
00:18:46,220 --> 00:18:50,150
and at the same resolution
will be smoothly decoded.

387
00:18:50,150 --> 00:18:53,120
When you ask this API about a
specific media configuration,

388
00:18:53,120 --> 00:18:57,810
it will return asynchronously
three Booleans.

389
00:18:57,810 --> 00:19:00,120
Is this configuration supported?

390
00:19:00,120 --> 00:19:03,109
This is the same result
returned by these types of body

391
00:19:03,109 --> 00:19:04,650
you can use it for
instance to detect

392
00:19:04,650 --> 00:19:09,030
whether everyone video correct
is supported by the way

393
00:19:09,030 --> 00:19:11,140
easily by going to be smooth?

394
00:19:11,140 --> 00:19:14,400
It is currently true if
less than 10% of frame

395
00:19:14,400 --> 00:19:18,650
have been previously dropped
for this media configuration.

396
00:19:18,650 --> 00:19:21,250
Is playback going to
be power efficient?

397
00:19:21,250 --> 00:19:24,180
Am I basically going to
drain the device battery?

398
00:19:24,180 --> 00:19:26,770
If true, if more
than 50% of frame

399
00:19:26,770 --> 00:19:28,770
have been decoded by the
hardware for this media

400
00:19:28,770 --> 00:19:31,180
configuration.

401
00:19:31,180 --> 00:19:34,480
Now, warning, this is not
some kind of magic API

402
00:19:34,480 --> 00:19:37,390
that will tell you what to play.

403
00:19:37,390 --> 00:19:39,910
You are in control and
have to make decisions

404
00:19:39,910 --> 00:19:42,940
about which media configuration
to play eventually based

405
00:19:42,940 --> 00:19:46,300
on the result of this API.

406
00:19:46,300 --> 00:19:49,440
Speaking of results, YouTube
experimented with the media

407
00:19:49,440 --> 00:19:52,450
capabilities API to prevent the
adaptive [INAUDIBLE] algorithm

408
00:19:52,450 --> 00:19:55,000
from selecting a resolution
that a device could not

409
00:19:55,000 --> 00:19:56,950
playback exclusively.

410
00:19:56,950 --> 00:19:59,740
For users who were part
of the experimental group,

411
00:19:59,740 --> 00:20:03,790
the mean time between
rebuffers, also known as MTBR,

412
00:20:03,790 --> 00:20:05,650
increased by 7.1%.

413
00:20:05,650 --> 00:20:07,180
While the average
resolution served

414
00:20:07,180 --> 00:20:10,060
to the aggregate group
measured by video height

415
00:20:10,060 --> 00:20:13,480
only declined by 0.5%.

416
00:20:13,480 --> 00:20:17,050
These results, as obscure
as it may be to some of you,

417
00:20:17,050 --> 00:20:20,740
basically show that some
users on low-end devices

418
00:20:20,740 --> 00:20:24,220
saw less frequently on YouTube
the frustrating buffering

419
00:20:24,220 --> 00:20:25,370
animation.

420
00:20:25,370 --> 00:20:28,880
So just for that, thank you.

421
00:20:28,880 --> 00:20:30,830
The media capabilities
API is available today

422
00:20:30,830 --> 00:20:34,310
in Chrome, Firefox, and
Safari Tech Preview.

423
00:20:34,310 --> 00:20:36,560
As you saw, you'll find all
documentation and sample

424
00:20:36,560 --> 00:20:37,760
you need at this URL.

425
00:20:37,760 --> 00:20:40,550


426
00:20:40,550 --> 00:20:43,160
Now, if you remember
one thing from this talk

427
00:20:43,160 --> 00:20:47,030
about those features, it is
[INAUDIBLE] the web matters.

428
00:20:47,030 --> 00:20:48,680
And the web platform
is the best place

429
00:20:48,680 --> 00:20:53,060
to serve efficient and
delightful major experiences.

430
00:20:53,060 --> 00:20:57,490
One more thing-- you can
find all audio and video

431
00:20:57,490 --> 00:20:59,780
updates in Chrome by simply
searching for Chrome media

432
00:20:59,780 --> 00:21:01,640
updates on your
favorite search engine.

433
00:21:01,640 --> 00:21:04,520
This will allow you to stay up
to date with the amazing media

434
00:21:04,520 --> 00:21:07,340
features that Chrome is
adding to the web platform

435
00:21:07,340 --> 00:21:08,930
every release.

436
00:21:08,930 --> 00:21:11,960
And with that, I humbly
thank you for your time.

437
00:21:11,960 --> 00:21:12,860
[APPLAUSE]

438
00:21:12,860 --> 00:21:15,310
[MUSIC PLAYING]

439
00:21:15,310 --> 00:21:23,458