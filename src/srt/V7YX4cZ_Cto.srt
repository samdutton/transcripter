WEBVTT
Kind: captions
Language: en

00:00:02.150 --> 00:00:04.225
JONATHAN CHEN: Hi,
I'm Jonathan Chen.

00:00:04.225 --> 00:00:05.958
DEMIAN RENZULI: And
I am Demian Renzuli.

00:00:05.958 --> 00:00:07.500
JONATHAN CHEN: We
will talk about how

00:00:07.500 --> 00:00:09.960
you can make the most
of progressive web apps

00:00:09.960 --> 00:00:13.650
in native environments
with real world examples.

00:00:13.650 --> 00:00:15.690
When we talk about
mobile developments,

00:00:15.690 --> 00:00:17.670
we usually think of
multiple platforms

00:00:17.670 --> 00:00:22.440
like progressive web apps,
native apps on Android and iOS.

00:00:22.440 --> 00:00:25.020
These platforms rely on
different technologies

00:00:25.020 --> 00:00:28.830
like JavaScript, Java,
Objective C, or Swift.

00:00:28.830 --> 00:00:30.810
That means you may need
three different teams

00:00:30.810 --> 00:00:33.150
to create cross
platform features, which

00:00:33.150 --> 00:00:34.710
could be very expensive.

00:00:34.710 --> 00:00:37.620
But from the user's
perspective, these platforms

00:00:37.620 --> 00:00:39.480
may each run
similar applications

00:00:39.480 --> 00:00:42.397
that address similar use cases.

00:00:42.397 --> 00:00:44.730
There are many ways to reduce
these duplicate department

00:00:44.730 --> 00:00:45.938
efforts.

00:00:45.938 --> 00:00:47.730
We are going to show
you how you can better

00:00:47.730 --> 00:00:51.720
blend your progressive web
apps into native environments.

00:00:51.720 --> 00:00:55.200
Currently, the most popular way
of embedding existing web flows

00:00:55.200 --> 00:00:58.950
is to use WebView for
Android and iOS apps.

00:00:58.950 --> 00:01:00.990
If you are already using
full screen WebView

00:01:00.990 --> 00:01:04.260
to embed your Webflows
in your Android app,

00:01:04.260 --> 00:01:07.290
we recommend using Trusted
Web Activities which

00:01:07.290 --> 00:01:09.930
runs a full browser
inside your native app,

00:01:09.930 --> 00:01:12.612
instead of the rendering
engine like in WebView.

00:01:12.612 --> 00:01:15.360
If you already have a
good progressive web app,

00:01:15.360 --> 00:01:18.210
you can bring the same user
experience to Android users

00:01:18.210 --> 00:01:21.690
with Trusted Web Activities
instead of using a full Android

00:01:21.690 --> 00:01:22.300
app.

00:01:22.300 --> 00:01:24.790
Let's see how these
solutions work.

00:01:24.790 --> 00:01:27.390
Imagine that you view the
web application with home,

00:01:27.390 --> 00:01:29.610
category, and product pages.

00:01:29.610 --> 00:01:31.410
It's a great experience
for web users,

00:01:31.410 --> 00:01:34.080
but that's not enough
to cover other users.

00:01:34.080 --> 00:01:37.890
So you hire the team to build an
iOS app with identical features

00:01:37.890 --> 00:01:40.980
to the web and another
team to view the Android

00:01:40.980 --> 00:01:43.710
app for the Play Store.

00:01:43.710 --> 00:01:45.420
At the end, there
are three teams

00:01:45.420 --> 00:01:48.600
that work with quite
different tech stacks.

00:01:48.600 --> 00:01:50.710
What if we made some
changes to the web?

00:01:50.710 --> 00:01:53.880
For example, a new feature
on the product page.

00:01:53.880 --> 00:01:56.620
To maintain the consistency
across the platforms,

00:01:56.620 --> 00:01:58.200
the other two teams
need to implement

00:01:58.200 --> 00:02:00.120
similar functionalities.

00:02:00.120 --> 00:02:02.850
There is now an increased
maintenance cost.

00:02:02.850 --> 00:02:04.890
So what can we do?

00:02:04.890 --> 00:02:07.320
Since the product page would
have similar functionalities

00:02:07.320 --> 00:02:09.449
and layout in the
platforms, you may

00:02:09.449 --> 00:02:13.110
consider using WebView as
a contender in the Android

00:02:13.110 --> 00:02:16.650
and iOS apps to embed
existing web content,

00:02:16.650 --> 00:02:19.300
just like a mini
browser inside the app.

00:02:19.300 --> 00:02:21.060
In addition to
reusable web content,

00:02:21.060 --> 00:02:24.660
there are other advantages
of using WebView.

00:02:24.660 --> 00:02:26.400
It is easy to keep
the web content up

00:02:26.400 --> 00:02:30.580
to date without going through
the app deployment process.

00:02:30.580 --> 00:02:34.530
You may also make some native
controls with web content.

00:02:34.530 --> 00:02:37.920
For example, you can embed a
product page inside the app

00:02:37.920 --> 00:02:41.800
while keeping the native
controls like navigation bar.

00:02:41.800 --> 00:02:43.590
However, you might
need some extra effort

00:02:43.590 --> 00:02:47.010
to take a part of web content
out from your existing WebView

00:02:47.010 --> 00:02:48.600
out.

00:02:48.600 --> 00:02:51.540
If you would like to embed
entire web functionalities,

00:02:51.540 --> 00:02:54.150
including the header,
footer, menu from the web

00:02:54.150 --> 00:02:57.960
into the apps, you may consider
using the full screen WebView

00:02:57.960 --> 00:03:03.130
to wrap the entire application
inside the native app shell.

00:03:03.130 --> 00:03:05.560
In fact, this is a
common approach used

00:03:05.560 --> 00:03:09.020
by many Cordova beta solutions.

00:03:09.020 --> 00:03:11.620
WebView based apps may
look like native apps,

00:03:11.620 --> 00:03:14.530
but certainly there
are some caveats.

00:03:14.530 --> 00:03:16.430
Since a WebView is
just rendering engine,

00:03:16.430 --> 00:03:18.380
a user may have a
different experience

00:03:18.380 --> 00:03:20.960
than in the full
browser, such as Chrome.

00:03:20.960 --> 00:03:24.380
For example, push notification
in the payment APIs

00:03:24.380 --> 00:03:26.090
are not supported.

00:03:26.090 --> 00:03:29.300
Form autofills is isolated
from the regular browsers.

00:03:29.300 --> 00:03:33.000
Most importantly, cookies are
not shareable between WebView

00:03:33.000 --> 00:03:34.310
and browsers.

00:03:34.310 --> 00:03:37.550
Hence, you may need a workaround
for user authentication,

00:03:37.550 --> 00:03:41.540
like passing tokens between
the WebView and the app.

00:03:41.540 --> 00:03:43.940
Using the full screen WebView
has been a popular way

00:03:43.940 --> 00:03:48.920
to embed web content inside
the app, but with limitations.

00:03:48.920 --> 00:03:51.320
Next, Damien will
walk us through how

00:03:51.320 --> 00:03:54.770
we can use the power of the web
without losing its capabilities

00:03:54.770 --> 00:03:56.672
in native environments.

00:03:56.672 --> 00:03:58.130
DEMIAN RENZULI: If
you want to have

00:03:58.130 --> 00:04:00.950
all the advantages of the
web without the limitations

00:04:00.950 --> 00:04:06.260
of WebView, you should consider
using Trusted Web Activities.

00:04:06.260 --> 00:04:10.670
TWA is not just a rendering
engine like a WebView.

00:04:10.670 --> 00:04:13.970
It's the full browser
running in full screen mode.

00:04:13.970 --> 00:04:17.870
For that reason, it's feature
complete and evergreen.

00:04:17.870 --> 00:04:19.910
This means that it's
always up to date,

00:04:19.910 --> 00:04:23.480
and it will give you access
to the latest web APIs.

00:04:23.480 --> 00:04:27.590
Another important aspect is
that unlike WebView, the TWA

00:04:27.590 --> 00:04:31.640
can share storage and cookies
with the main browser.

00:04:31.640 --> 00:04:34.500
At the moment, the main
limitation of a TWA

00:04:34.500 --> 00:04:37.850
is that you can't mix web
content with native controls

00:04:37.850 --> 00:04:39.650
on the same screen.

00:04:39.650 --> 00:04:44.030
For example, having a native
toolbar at the bottom of a TWA,

00:04:44.030 --> 00:04:46.190
it's not possible.

00:04:46.190 --> 00:04:48.260
In cases like this,
what you can do

00:04:48.260 --> 00:04:52.010
is recreate these native
controls with web technology

00:04:52.010 --> 00:04:57.350
to provide a full web
experience in TWA screens.

00:04:57.350 --> 00:05:00.060
Regarding browser
support-- at this moment,

00:05:00.060 --> 00:05:05.300
TWAs are fully available in
Chrome and in beta in Firefox.

00:05:05.300 --> 00:05:07.970
Other browser vendors
have started working on it

00:05:07.970 --> 00:05:10.430
and will provide support
for Trusted Web Activities

00:05:10.430 --> 00:05:12.320
very soon.

00:05:12.320 --> 00:05:14.900
Here is the flow for a common
use case for Trusted Web

00:05:14.900 --> 00:05:16.370
Activities.

00:05:16.370 --> 00:05:19.820
In this case, users can
navigate from an Android screen

00:05:19.820 --> 00:05:25.100
to a TWA, and also from the
TWA to another Android screen.

00:05:25.100 --> 00:05:27.860
All this happens without
taking users away

00:05:27.860 --> 00:05:30.140
from the context
of the application.

00:05:30.140 --> 00:05:33.800
Going one step farther,
TWA is not only

00:05:33.800 --> 00:05:37.950
useful for certain screens
and flows inside your app.

00:05:37.950 --> 00:05:39.890
If you have a
progressive web app that

00:05:39.890 --> 00:05:44.510
is fast, reliable, and actually
looks and feel like an app,

00:05:44.510 --> 00:05:48.070
you can use Trusted Web
Activities to launch your PWA

00:05:48.070 --> 00:05:51.200
from the other launcher.

00:05:51.200 --> 00:05:54.500
In this case, users can
arrive at the full screen PWA

00:05:54.500 --> 00:05:57.080
by clicking on a
home screen icon.

00:05:57.080 --> 00:05:58.970
As a result, they
would have the feeling

00:05:58.970 --> 00:06:01.100
that they are opening a
native application instead

00:06:01.100 --> 00:06:02.870
of a website.

00:06:02.870 --> 00:06:06.020
A good example of usage
of this TWA use case

00:06:06.020 --> 00:06:10.490
is Terra, one of the biggest
media companies from Brazil.

00:06:10.490 --> 00:06:15.590
Terra stopped maintaining their
native Android app in 2019.

00:06:15.590 --> 00:06:17.930
After a while, they
decided to replace it

00:06:17.930 --> 00:06:22.400
with their progressive web app
through Trusted Web Activities.

00:06:22.400 --> 00:06:24.920
This way, they could deliver
the same great experience

00:06:24.920 --> 00:06:28.340
to web and Android
users with a single code

00:06:28.340 --> 00:06:34.250
base, while reducing
the app size by 70%.

00:06:34.250 --> 00:06:38.630
As a result, users reacted
very positively to the new UX.

00:06:38.630 --> 00:06:40.425
The ratings in the
store went up 25%.

00:06:43.310 --> 00:06:45.170
And that's not the only case.

00:06:45.170 --> 00:06:49.360
We already see many companies
using TWA with great success

00:06:49.360 --> 00:06:51.390
across all the regions.

00:06:51.390 --> 00:06:57.190
Oyo, QuintoAndar, Tinder,
NBT, and Rakuten Pasha

00:06:57.190 --> 00:07:00.160
are only a few examples of
companies actively using

00:07:00.160 --> 00:07:03.810
Trusted Web Activities
around the world.

00:07:03.810 --> 00:07:06.820
So wrapping up, we have
seen different ways

00:07:06.820 --> 00:07:09.260
in which you can make
the most of your web

00:07:09.260 --> 00:07:13.120
and PWA investment in
native environments.

00:07:13.120 --> 00:07:15.940
Here are some
recommended approaches.

00:07:15.940 --> 00:07:19.020
The most common approach is
having a good progressive web

00:07:19.020 --> 00:07:21.430
app for users
coming from the web,

00:07:21.430 --> 00:07:24.970
and also native Android and
iOS apps for those searching

00:07:24.970 --> 00:07:27.290
for your app in the stores.

00:07:27.290 --> 00:07:29.320
You can also reuse
parts of your website,

00:07:29.320 --> 00:07:32.630
like different flows
inside your app.

00:07:32.630 --> 00:07:36.040
This approach is commonly
achieved by using WebViews.

00:07:36.040 --> 00:07:40.480
But remember, WebView is
not a full browser, just

00:07:40.480 --> 00:07:41.860
a rendering engine.

00:07:41.860 --> 00:07:45.380
And this has some limitations.

00:07:45.380 --> 00:07:48.540
So if you're using
full screen WebViews,

00:07:48.540 --> 00:07:52.990
the recommended approach is
to use Trusted Web Activities.

00:07:52.990 --> 00:07:58.120
TWAs give you access to all the
features, latest APIs, and also

00:07:58.120 --> 00:08:01.990
share storage and cookies
with the main browser.

00:08:01.990 --> 00:08:05.570
Finally if you have a very
good progressive web app

00:08:05.570 --> 00:08:09.040
and would like to bring the same
experience to your Android app

00:08:09.040 --> 00:08:12.070
users, you can use
Trusted Web Activities

00:08:12.070 --> 00:08:15.160
to launch your PWA
in full screen mode

00:08:15.160 --> 00:08:18.400
from the Android launcher.

00:08:18.400 --> 00:08:20.645
Now you have a picture
of how to blend your PWAs

00:08:20.645 --> 00:08:22.458
into a native environment.

00:08:22.458 --> 00:08:25.000
JONATHAN CHEN: Please also check
out the Main Stage sessions,

00:08:25.000 --> 00:08:29.800
PWA and the installable web by
PJ McLachlan and Sam Thorogood.

00:08:29.800 --> 00:08:34.330
Also, Bridging the native
app gap by SimTread.

00:08:34.330 --> 00:08:35.320
Thank you for watching.

00:08:35.320 --> 00:08:38.370
[MUSIC PLAYING]

