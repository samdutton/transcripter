WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.395
[MUSIC PLAYING]

00:00:08.250 --> 00:00:10.320
SPEAKER 1: And as we
evolve our metrics story,

00:00:10.320 --> 00:00:12.990
we want to fill in as many
gaps of our measurement of user

00:00:12.990 --> 00:00:14.910
experience as we can.

00:00:14.910 --> 00:00:17.410
There are a few major shifts
here that I'd like to call out.

00:00:17.410 --> 00:00:19.440
The first one is
the reduced emphasis

00:00:19.440 --> 00:00:22.140
on first meaningful
paint and first CPU idle.

00:00:22.140 --> 00:00:24.750
We're excited to have
metrics available that better

00:00:24.750 --> 00:00:27.840
capture when a page feels
usable, which leads me

00:00:27.840 --> 00:00:30.360
to the second major call-out,
which is the new metrics you

00:00:30.360 --> 00:00:30.960
see added.

00:00:30.960 --> 00:00:34.020
So largest contentful
paint, total blocking time,

00:00:34.020 --> 00:00:36.750
and cumulative layout shift
are all out and available.

00:00:36.750 --> 00:00:38.610
These new metrics
help to fill some

00:00:38.610 --> 00:00:40.470
of the gaps in our
measurement story.

00:00:40.470 --> 00:00:42.450
For instance, when
time to interactive

00:00:42.450 --> 00:00:45.840
does a good job of identifying
when the main thread calms down

00:00:45.840 --> 00:00:47.850
later in load,
total blocking time

00:00:47.850 --> 00:00:50.700
aims to quantify how
strained the main thread is

00:00:50.700 --> 00:00:51.650
throughout the load.

00:00:51.650 --> 00:00:53.400
SPEAKER 2: Pretty much
all the lab metrics

00:00:53.400 --> 00:00:55.410
are available in Lighthouse.

00:00:55.410 --> 00:00:57.883
First input delay only really
makes sense in the field.

00:00:57.883 --> 00:00:59.550
So then, when it comes
to field metrics,

00:00:59.550 --> 00:01:02.700
you can see most of them are
available in Chrome UX Support.

00:01:02.700 --> 00:01:04.600
Other than you can
collect yourself

00:01:04.600 --> 00:01:05.850
with the Performance Observer.

00:01:05.850 --> 00:01:08.475
And you can check out, actually,
the documentation for all this

00:01:08.475 --> 00:01:10.122
in web.dev/metrics.

00:01:10.122 --> 00:01:11.580
SPEAKER 1: Thank
goodness, gone are

00:01:11.580 --> 00:01:14.163
the days where you're having to
toggle and compare between two

00:01:14.163 --> 00:01:17.370
Lighthouse reports side-by-side
trying to find the differences,

00:01:17.370 --> 00:01:19.343
and you're actually able
to see the diff view.

00:01:19.343 --> 00:01:21.510
Now, you can see the changes
between the two reports

00:01:21.510 --> 00:01:22.830
in a single view.

00:01:22.830 --> 00:01:27.575
So we are launching the 0.3
alpha of Lighthouse CI today,

00:01:27.575 --> 00:01:29.700
and you can check it out
in the repo and set it up.

00:01:29.700 --> 00:01:31.230
Please let us know
what you think of it.

00:01:31.230 --> 00:01:33.690
It is early stages, and we
definitely want your feedback.

00:01:33.690 --> 00:01:36.390
[MUSIC PLAYING]

00:01:36.390 --> 00:01:38.700
SPEAKER 3: A user's hardware
and their network type

00:01:38.700 --> 00:01:40.860
can massively impact the
experience that they're

00:01:40.860 --> 00:01:42.950
going to have with your site.

00:01:42.950 --> 00:01:45.450
Now, there are three
or four key signals

00:01:45.450 --> 00:01:47.920
we'll be looking at for
adaptive loading today.

00:01:47.920 --> 00:01:50.220
First of all, we've got
network for fine-tuning things

00:01:50.220 --> 00:01:53.010
like data transfer to
use less bandwidth.

00:01:53.010 --> 00:01:55.620
We've got memory for
reducing the amount of memory

00:01:55.620 --> 00:01:58.590
consumption on
low-end devices, CPU,

00:01:58.590 --> 00:02:01.110
for limiting costly
Javascript execution,

00:02:01.110 --> 00:02:03.180
and reducing
CPU-intensive logic.

00:02:03.180 --> 00:02:05.280
To make all of this
easier, today, we're

00:02:05.280 --> 00:02:09.570
releasing a new experimental
set of React hooks

00:02:09.570 --> 00:02:12.390
for adaptive loading that
you can go and check out.

00:02:12.390 --> 00:02:15.640
Adaptive module serving is
something I'm excited about.

00:02:15.640 --> 00:02:18.300
And this is this idea
of shipping a light,

00:02:18.300 --> 00:02:21.540
interactive core experience
to all of your users

00:02:21.540 --> 00:02:24.970
and progressively adding
high-end features on top--

00:02:24.970 --> 00:02:27.780
so if a user's device
characteristics and network

00:02:27.780 --> 00:02:28.830
can handle it.

00:02:28.830 --> 00:02:30.330
Now, it's this
device awareness that

00:02:30.330 --> 00:02:32.860
takes progressive
enhancement to the next step.

00:02:32.860 --> 00:02:35.700
SPEAKER 4: Well, we have
navigator.hardwareConcurrency,

00:02:35.700 --> 00:02:38.490
which tells us generally
how many CPU cores.

00:02:38.490 --> 00:02:41.430
And many browsers also give
us navigator.deviceMemory,

00:02:41.430 --> 00:02:43.200
which tells us how much RAM.

00:02:43.200 --> 00:02:46.890
So maybe, on desktop, there's a
way we can use these two fields

00:02:46.890 --> 00:02:49.560
and figure out some
generalized buckets that we

00:02:49.560 --> 00:02:52.770
can apply consistently
across different devices

00:02:52.770 --> 00:02:54.660
and different metrics.

00:02:54.660 --> 00:02:57.103
Once we have this core--

00:02:57.103 --> 00:02:59.520
this core metrics-- and we're
able to break it up and have

00:02:59.520 --> 00:03:01.860
a consistent way and
understanding of what

00:03:01.860 --> 00:03:04.500
different types of hardware,
we can actually consider

00:03:04.500 --> 00:03:06.168
this in our core frameworks.

00:03:06.168 --> 00:03:08.460
SPEAKER 5: We're in close
contact with the Angular team

00:03:08.460 --> 00:03:12.390
and really excited for their
achievements on both UX and DX.

00:03:12.390 --> 00:03:14.790
In particular, they shared
differential loading,

00:03:14.790 --> 00:03:17.610
which reduces polyfill
in modern browsers,

00:03:17.610 --> 00:03:19.650
and they have
automatic deployments

00:03:19.650 --> 00:03:22.470
to different platforms, to
name a couple of things.

00:03:22.470 --> 00:03:23.940
Also, Dion mentioned
in the keynote

00:03:23.940 --> 00:03:26.070
that we have funded
a number of projects

00:03:26.070 --> 00:03:27.150
with the Framework Fund.

00:03:27.150 --> 00:03:29.340
We'll have funding
again next year.

00:03:29.340 --> 00:03:31.920
So if you are playing a role
in the framework ecosystem,

00:03:31.920 --> 00:03:35.490
providing something of value,
please apply for funding.

00:03:35.490 --> 00:03:37.980
At Google I/O, I mentioned
that we kicked off

00:03:37.980 --> 00:03:42.600
an effort in the space directly
collaborating with NextJS.

00:03:42.600 --> 00:03:45.400
In particular, we are starting
with performance improvements

00:03:45.400 --> 00:03:48.600
first, both because this is
an important problem needing

00:03:48.600 --> 00:03:52.380
attention, but also, it wasn't
overlapping with other efforts.

00:03:52.380 --> 00:03:55.230
SPEAKER 6: Sum Up,
another major NextJS site

00:03:55.230 --> 00:03:56.990
that we tested our
chunking strategy on,

00:03:56.990 --> 00:04:01.200
saw a reduction of their largest
JavaScript bundle by 64%.

00:04:01.200 --> 00:04:03.390
And again, the amazing
thing about these changes

00:04:03.390 --> 00:04:06.630
is that it involved no actual
change to the user's code

00:04:06.630 --> 00:04:08.110
whatsoever.

00:04:08.110 --> 00:04:09.720
This is all by
just turning a flag

00:04:09.720 --> 00:04:13.410
on that changed the chunking
strategy to use our newer,

00:04:13.410 --> 00:04:15.330
granular approach.

00:04:15.330 --> 00:04:18.209
Today, we're excited to
introduce a new Babel

00:04:18.209 --> 00:04:23.020
preset that optimizes
specifically for this case.

00:04:23.020 --> 00:04:25.120
It's called Babel
Preset Modules,

00:04:25.120 --> 00:04:28.000
and it's available
on npm right now.

00:04:28.000 --> 00:04:31.080
But running the same code
through preset-modules

00:04:31.080 --> 00:04:32.680
produces this.

00:04:32.680 --> 00:04:35.490
It's a lot smaller.

00:04:35.490 --> 00:04:39.220
Here's the thing-- both outputs
run in all browsers that

00:04:39.220 --> 00:04:41.088
support script-type modules.

00:04:41.088 --> 00:04:43.380
SPEAKER 7: So these sort of
things that we're currently

00:04:43.380 --> 00:04:47.820
working on to help you with
building more scalable web

00:04:47.820 --> 00:04:48.610
applications.

00:04:48.610 --> 00:04:50.460
So one of them is translations.

00:04:50.460 --> 00:04:51.610
Then there's unit testing.

00:04:51.610 --> 00:04:53.160
So unit testing,
integration testing,

00:04:53.160 --> 00:04:54.250
is a really broad topic.

00:04:54.250 --> 00:04:56.910
Also, there's image handling.

00:04:56.910 --> 00:05:00.240
So images that make up a
large percentage of what

00:05:00.240 --> 00:05:02.160
you show on the website, right?

00:05:02.160 --> 00:05:05.550
But we don't provide an
opinionated way to load images,

00:05:05.550 --> 00:05:06.240
currently.

00:05:06.240 --> 00:05:08.520
So that means that it's
really easy to include

00:05:08.520 --> 00:05:09.938
images that are too large.

00:05:09.938 --> 00:05:10.730
There is analytics.

00:05:10.730 --> 00:05:13.500
And analytics is something
that you all probably use

00:05:13.500 --> 00:05:15.810
in a website, at
least, because you

00:05:15.810 --> 00:05:18.850
want to know what your
users are doing on a page.

00:05:18.850 --> 00:05:21.060
However, to correctly
implement and relay

00:05:21.060 --> 00:05:24.360
analytics in single-page
applications is really hard.

00:05:24.360 --> 00:05:25.710
There's error reporting.

00:05:25.710 --> 00:05:27.810
You probably all have
written bugs before,

00:05:27.810 --> 00:05:32.430
and it's really hard to catch
bugs in production in websites

00:05:32.430 --> 00:05:36.090
because it runs on a browser
that is not your own browser,

00:05:36.090 --> 00:05:39.630
and because of that, you can't
see what users are doing.

00:05:39.630 --> 00:05:42.240
So error reporting is very
important in that way.

00:05:42.240 --> 00:05:44.370
So relaying errors
that happen it's

00:05:44.370 --> 00:05:46.200
going to be easier
very soon, too.

00:05:46.200 --> 00:05:48.305
[MUSIC PLAYING]

00:05:48.305 --> 00:05:50.680
SPEAKER 8: Let's walk through,
step-by-step, what Portals

00:05:50.680 --> 00:05:52.490
could do.

00:05:52.490 --> 00:05:56.420
Let's say you have a page,
say foo.html, all blue.

00:05:56.420 --> 00:05:58.220
Super nice with this
foo blue background,

00:05:58.220 --> 00:06:00.400
and having foo.html
in the center.

00:06:00.400 --> 00:06:02.750
And you also have
another page, bar.html,

00:06:02.750 --> 00:06:04.308
which is pretty
similar to foo.html,

00:06:04.308 --> 00:06:06.350
but having a different
color and a different URL.

00:06:06.350 --> 00:06:09.350
We'll use these two pages to
see what Portals could do.

00:06:09.350 --> 00:06:12.093
You would first want to check if
your browser supports Portals.

00:06:12.093 --> 00:06:13.760
As you all know,
progressive enhancement

00:06:13.760 --> 00:06:15.260
is very important,
because we don't

00:06:15.260 --> 00:06:18.380
want to break any experience
in non-supportied browsers.

00:06:18.380 --> 00:06:19.850
You could check
if the HTML Portal

00:06:19.850 --> 00:06:23.050
element is in the global
window object to achieve this.

00:06:23.050 --> 00:06:24.770
Next, let's create
a Portal element

00:06:24.770 --> 00:06:27.920
by document.createElement,
setting the source attribute

00:06:27.920 --> 00:06:31.550
as bar.html, and adding
some styles of our own,

00:06:31.550 --> 00:06:33.920
and lastly, adding the
element to the document.

00:06:33.920 --> 00:06:37.860
And boom, you'll see bar.html
embedded in the page.

00:06:37.860 --> 00:06:39.560
So as you can see,
Portals really

00:06:39.560 --> 00:06:41.360
makes the loading
experience disappear.

00:06:41.360 --> 00:06:42.470
You don't need to
wait for the page

00:06:42.470 --> 00:06:44.180
to render anymore
because it's already

00:06:44.180 --> 00:06:45.862
rendered inside the portal.

00:06:45.862 --> 00:06:48.320
Like I mentioned, Portals has
nothing to do with animation,

00:06:48.320 --> 00:06:49.880
but you can always
animate the Portal

00:06:49.880 --> 00:06:51.890
to make the transition smooth.

00:06:51.890 --> 00:06:54.350
It could be using keyframes
or JavaScript to move around

00:06:54.350 --> 00:06:56.017
the element, but in
this case, let's say

00:06:56.017 --> 00:06:58.672
we animated the element
with CSS transitions.

00:06:58.672 --> 00:07:01.130
SPEAKER 9: All right to close,
we've talked about four APIs

00:07:01.130 --> 00:07:02.070
today.

00:07:02.070 --> 00:07:03.740
The first one, Portal,
which is designed

00:07:03.740 --> 00:07:06.412
to enable instant and
seamless navigation.

00:07:06.412 --> 00:07:08.120
Periodic Backgroud
Sync, this is designed

00:07:08.120 --> 00:07:11.030
to get content ahead
of time on the device

00:07:11.030 --> 00:07:13.100
so that you don't have to
worry about connection.

00:07:13.100 --> 00:07:15.350
Content Indexing-- this
one is about surfacing

00:07:15.350 --> 00:07:17.660
the content that's
available on the device,

00:07:17.660 --> 00:07:20.870
and it's going to be available
in Origin trials soon.

00:07:20.870 --> 00:07:23.600
And last but not least,
Web Bundles-- so this

00:07:23.600 --> 00:07:26.450
is a convenient format to enable
discovery and distribution.

00:07:26.450 --> 00:07:28.600
[MUSIC PLAYING]

