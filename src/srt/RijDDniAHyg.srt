WEBVTT
Kind: captions
Language: en

00:00:00.050 --> 00:00:02.550
MARIKO KOSAKA: Hello, I'm Mariko
from Chrome's web developer

00:00:02.550 --> 00:00:03.870
ecosystem team.

00:00:03.870 --> 00:00:05.550
I'm part of a small
team that build

00:00:05.550 --> 00:00:09.570
a web application like Squoosh
and a web game like Proxx.

00:00:09.570 --> 00:00:12.310
So whenever we were
starting these project,

00:00:12.310 --> 00:00:15.330
we started with design and
think about responsive design.

00:00:15.330 --> 00:00:19.020
Think about desktop, and how it
looks like on the smartphone,

00:00:19.020 --> 00:00:22.260
and you think about the
click interaction and touch

00:00:22.260 --> 00:00:23.380
interaction.

00:00:23.380 --> 00:00:24.330
And this is all great.

00:00:24.330 --> 00:00:26.463
This is a common practice,
and it's so great

00:00:26.463 --> 00:00:28.380
that you are thinking
about responsive design.

00:00:28.380 --> 00:00:32.490
But many other users might be
interacting with your website

00:00:32.490 --> 00:00:35.550
using something other
than mouse and tap.

00:00:35.550 --> 00:00:38.820
For example, other users might
be accessing your website

00:00:38.820 --> 00:00:42.300
only using keyboard or
other assistive technology,

00:00:42.300 --> 00:00:44.730
or other users might be
accessing your website

00:00:44.730 --> 00:00:47.130
using screen readers
and listening

00:00:47.130 --> 00:00:48.840
to what's on the screen.

00:00:48.840 --> 00:00:51.900
Other case, user may be
accessing your website

00:00:51.900 --> 00:00:54.330
using feature phone
with tiny screen

00:00:54.330 --> 00:00:57.390
or on the smart TV
using giant screen

00:00:57.390 --> 00:01:00.330
and using a remote
controller as a mouse.

00:01:00.330 --> 00:01:02.410
So whenever we build
a web application,

00:01:02.410 --> 00:01:04.830
we need to think about
those different devices

00:01:04.830 --> 00:01:07.290
and all of the users
using those device

00:01:07.290 --> 00:01:10.170
and making sure that
nobody gets left behind.

00:01:10.170 --> 00:01:14.070
Let's think about this small
web application that has a menu.

00:01:14.070 --> 00:01:15.270
You click on it.

00:01:15.270 --> 00:01:19.110
Some new content load in, and
then you need to click Next.

00:01:19.110 --> 00:01:20.490
This seems very simple.

00:01:20.490 --> 00:01:22.080
It's only two click.

00:01:22.080 --> 00:01:26.740
But for users using keyboard,
this might be different,

00:01:26.740 --> 00:01:28.980
so for the same
website, user might

00:01:28.980 --> 00:01:32.610
have to tap the key many
times to select a menu.

00:01:32.610 --> 00:01:34.600
And then once the
page is loaded,

00:01:34.600 --> 00:01:37.230
they have to click many,
many, many, many, many more

00:01:37.230 --> 00:01:40.960
times on the keyboard to
get to the Next button,

00:01:40.960 --> 00:01:42.270
and this is not great.

00:01:42.270 --> 00:01:45.000
So in this case, we,
as a web developer,

00:01:45.000 --> 00:01:48.030
needs to do a little
bit of focus management.

00:01:48.030 --> 00:01:52.130
See the browser, if they found a
focusable element, like button,

00:01:52.130 --> 00:01:54.210
then it focus on it.

00:01:54.210 --> 00:01:57.570
But as a web developer, we
can add an attribute called

00:01:57.570 --> 00:02:00.600
tabindex and set
the value to minus 1

00:02:00.600 --> 00:02:04.440
to tell the browser that this
element is not focusable.

00:02:04.440 --> 00:02:06.960
Using this attribute,
we can do a technique

00:02:06.960 --> 00:02:09.090
called [INAUDIBLE] tabindex.

00:02:09.090 --> 00:02:11.950
So let's say the website
have a collection of items

00:02:11.950 --> 00:02:13.200
that is selectable.

00:02:13.200 --> 00:02:16.770
You put tabindex of
0 to only one item

00:02:16.770 --> 00:02:19.020
and set everything
else to minus 1.

00:02:19.020 --> 00:02:21.840
In this way, there's
only one item

00:02:21.840 --> 00:02:24.930
that is selectable in the
collection, and if the user--

00:02:24.930 --> 00:02:28.350
keyboard user wants to move
away from the collection,

00:02:28.350 --> 00:02:32.430
they just need to tap Tab key
and then go to the Next button

00:02:32.430 --> 00:02:33.480
easily.

00:02:33.480 --> 00:02:36.270
If they want to interact
with the collection,

00:02:36.270 --> 00:02:38.790
then they can use Up
and Down arrow keys

00:02:38.790 --> 00:02:40.830
to navigate those collection.

00:02:40.830 --> 00:02:43.410
In this case, we add a
little bit of JavaScript

00:02:43.410 --> 00:02:48.240
to listen to those key bits
and move the tabindex of 0

00:02:48.240 --> 00:02:51.660
to where the focus should
be and move the focus.

00:02:51.660 --> 00:02:55.470
And speaking of focus, focus
ring or focus highlight

00:02:55.470 --> 00:02:56.790
is really important.

00:02:56.790 --> 00:02:59.070
In many case, this
is the only way user

00:02:59.070 --> 00:03:02.550
know which element has a focus
and which one get clicked

00:03:02.550 --> 00:03:04.080
when they hit Enter.

00:03:04.080 --> 00:03:05.730
And this one comes
in handy, too,

00:03:05.730 --> 00:03:08.970
when user is accessing your
website using tiny screen,

00:03:08.970 --> 00:03:10.740
like feature phone.

00:03:10.740 --> 00:03:15.570
Of course, if you prefer the
mouse and touch user to not see

00:03:15.570 --> 00:03:19.350
those highlight, you can look
into Focus Visible attribute

00:03:19.350 --> 00:03:21.490
on the CSS to control those.

00:03:21.490 --> 00:03:24.390
And speaking of
focus, we sometimes

00:03:24.390 --> 00:03:27.840
need to proactively
manage the focus, too.

00:03:27.840 --> 00:03:32.070
Here's a common user interaction
we see on the internet today.

00:03:32.070 --> 00:03:36.270
You click on the hamburger icon,
and then the menu slide up.

00:03:36.270 --> 00:03:39.030
But where did the highlight go?

00:03:39.030 --> 00:03:43.140
Well, highlight is still
trapped in the background,

00:03:43.140 --> 00:03:47.700
so even though user opened the
menu to interact with the menu,

00:03:47.700 --> 00:03:50.530
they cannot get
to the menu item.

00:03:50.530 --> 00:03:53.910
In this case, you need to
move the focus to the menu,

00:03:53.910 --> 00:03:56.610
so click on the hamburger icon.

00:03:56.610 --> 00:03:57.990
Menu shows up.

00:03:57.990 --> 00:04:02.100
You need to move the focus into
the button inside of the menu.

00:04:02.100 --> 00:04:05.940
And don't forget, if user
click on it and close the menu,

00:04:05.940 --> 00:04:09.090
then focus should go back
to the previous element that

00:04:09.090 --> 00:04:10.560
had a focus.

00:04:10.560 --> 00:04:13.110
If you want to know how
we use these techniques

00:04:13.110 --> 00:04:16.050
in the [INAUDIBLE] web
application called Proxx,

00:04:16.050 --> 00:04:18.420
you should check out
my talk from Google I/O

00:04:18.420 --> 00:04:21.209
called "Building Fast
and Smooth Web Apps."

00:04:21.209 --> 00:04:22.260
Thanks for watching.

00:04:22.260 --> 00:04:25.310
[MUSIC PLAYING]

