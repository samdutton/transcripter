WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.990
MINKO GECHEV: Hello, everyone.

00:00:01.990 --> 00:00:03.140
My name is Minko Gechev.

00:00:03.140 --> 00:00:05.370
I'm a senior developer
programs engineer

00:00:05.370 --> 00:00:07.300
in the Angular team at Google.

00:00:07.300 --> 00:00:09.510
Today, I'm going to show
you a couple of tools

00:00:09.510 --> 00:00:12.870
that we have been working on
to help you build fast Angular

00:00:12.870 --> 00:00:14.590
applications.

00:00:14.590 --> 00:00:16.200
In the presentation
today, we're going

00:00:16.200 --> 00:00:18.990
to look into an existing
app and optimize it

00:00:18.990 --> 00:00:21.460
by going through three steps.

00:00:21.460 --> 00:00:24.180
First, we will introduce
code splitting.

00:00:24.180 --> 00:00:26.250
After that, bundle preloading.

00:00:26.250 --> 00:00:29.010
And finally, we will deploy
the app to production

00:00:29.010 --> 00:00:34.270
with a single command, following
best-serving practices.

00:00:34.270 --> 00:00:38.670
First things first, let us
look at our existing app.

00:00:38.670 --> 00:00:41.040
As any Angular
application, we can run it

00:00:41.040 --> 00:00:44.170
by using the ng serv command.

00:00:44.170 --> 00:00:47.100
Now we can open the
app in Chrome DevTools

00:00:47.100 --> 00:00:48.690
into the browser.

00:00:48.690 --> 00:00:51.210
Let us navigate to all
the pages in the app,

00:00:51.210 --> 00:00:54.410
while DevTools tracks
the network activity.

00:00:54.410 --> 00:00:57.300
As the next step, we
can open the Network tab

00:00:57.300 --> 00:00:59.160
of Chrome DevTools.

00:00:59.160 --> 00:01:01.260
Notice that the
only network request

00:01:01.260 --> 00:01:04.560
there is triggered by the
image from the first page we

00:01:04.560 --> 00:01:06.420
navigate us to.

00:01:06.420 --> 00:01:09.690
This means that during
the initial load time,

00:01:09.690 --> 00:01:12.300
we are downloading the
JavaScript associated

00:01:12.300 --> 00:01:17.010
with all pages, although the
user needs only a subset of it.

00:01:17.010 --> 00:01:20.520
This is a good opportunity
to introduce code splitting.

00:01:20.520 --> 00:01:26.550
In Angular CLI 8.1, we added
a lazy module generator.

00:01:26.550 --> 00:01:32.520
It accepts a module name, a
route name, and a parent module

00:01:32.520 --> 00:01:33.450
name.

00:01:33.450 --> 00:01:37.410
Let us use it to move the About
page into its own JavaScript

00:01:37.410 --> 00:01:38.460
chunk.

00:01:38.460 --> 00:01:44.460
All we need to do is run ng
g for generate, m for module,

00:01:44.460 --> 00:01:51.060
with the name about, route name
about, and parent module app.

00:01:51.060 --> 00:01:55.350
This command generated a
definition of an NgModule,

00:01:55.350 --> 00:01:58.110
declaration of a lazy
route, declaration

00:01:58.110 --> 00:02:02.430
of a default route in the
lazy module, and a component

00:02:02.430 --> 00:02:05.790
that the default
route will render.

00:02:05.790 --> 00:02:09.930
Now there is goal to VS code
to remove the eager route

00:02:09.930 --> 00:02:13.500
and switch to the newly
generated lazy one.

00:02:13.500 --> 00:02:17.560
First, let us remove
the eager route itself.

00:02:17.560 --> 00:02:19.650
Next, we can delete
the eager component

00:02:19.650 --> 00:02:22.440
import and declaration.

00:02:22.440 --> 00:02:25.560
As a next step, let
us move the definition

00:02:25.560 --> 00:02:27.990
of the eagerly
rendered component

00:02:27.990 --> 00:02:30.750
to the lazily rendered one.

00:02:30.750 --> 00:02:33.300
Finally, let us remove
the files we're not

00:02:33.300 --> 00:02:36.180
going to use for this
particular example,

00:02:36.180 --> 00:02:40.740
as well as the eagerly
rendered about component.

00:02:40.740 --> 00:02:43.990
Now, we can preview the
result in the browser.

00:02:43.990 --> 00:02:46.110
Notice that the navigation
to the about page

00:02:46.110 --> 00:02:48.300
triggered a network
request which

00:02:48.300 --> 00:02:51.450
downloaded the about module.

00:02:51.450 --> 00:02:53.670
We improved the initial
app load [INAUDIBLE]

00:02:53.670 --> 00:02:56.370
by the length scripts which
are not immediately needed

00:02:56.370 --> 00:02:57.940
by the user.

00:02:57.940 --> 00:02:59.640
This, however, may
introduce latency

00:02:59.640 --> 00:03:02.100
when navigating across pages.

00:03:02.100 --> 00:03:06.840
A technique that can help us to
fix this is bundle preloading.

00:03:06.840 --> 00:03:10.380
As a next step, we can install
the ngx quicklink module

00:03:10.380 --> 00:03:13.290
and save it into
our dependencies.

00:03:13.290 --> 00:03:16.200
Ngx quicklink is a
preloading strategy

00:03:16.200 --> 00:03:18.420
that will detect
when a router link is

00:03:18.420 --> 00:03:19.980
visible in the viewport.

00:03:19.980 --> 00:03:23.100
It will wait until
the browser is idle

00:03:23.100 --> 00:03:26.310
and prefetch it, unless
the user's browser is

00:03:26.310 --> 00:03:28.740
in data-saving mode.

00:03:28.740 --> 00:03:31.290
To introduce
quicklink to our app,

00:03:31.290 --> 00:03:34.080
we first need to import
the quicklink module

00:03:34.080 --> 00:03:38.640
and add it to the list of
imports in the app ng module.

00:03:38.640 --> 00:03:42.420
After that, we need to
import the quicklink strategy

00:03:42.420 --> 00:03:48.120
and add it as the preloading
strategy of the Angular router.

00:03:48.120 --> 00:03:52.060
To observe the result,
let's go back to Chrome.

00:03:52.060 --> 00:03:53.850
Notice that when
we open the site

00:03:53.850 --> 00:03:56.400
navigation, in the
background Angular

00:03:56.400 --> 00:03:59.080
downloads the about module.

00:03:59.080 --> 00:04:01.770
Finally, let us deploy the
app to production following

00:04:01.770 --> 00:04:04.500
best-serving practices.

00:04:04.500 --> 00:04:08.810
In the console, we can
type ng add angular/fire.

00:04:08.810 --> 00:04:11.310
This command will
install Firebase tools

00:04:11.310 --> 00:04:13.770
and perform a couple
of transformations

00:04:13.770 --> 00:04:15.870
on top of our project.

00:04:15.870 --> 00:04:18.269
If we are authenticated
as to Firebase,

00:04:18.269 --> 00:04:20.430
it will also fetch
our project list

00:04:20.430 --> 00:04:24.300
and allow us to select
one by using fuzzy search.

00:04:24.300 --> 00:04:27.330
With the latest deployment
capabilities in the Angular CLI

00:04:27.330 --> 00:04:31.860
8.3, we can add a package
from a cloud provider

00:04:31.860 --> 00:04:36.960
and run the command ng deploy to
push our project to the cloud.

00:04:36.960 --> 00:04:40.290
Now let us run ng
deploy in the terminal.

00:04:40.290 --> 00:04:43.230
It will first build our
app, performing the most

00:04:43.230 --> 00:04:45.120
optimal build possible.

00:04:45.120 --> 00:04:47.670
After that, upload
the production asset

00:04:47.670 --> 00:04:49.740
to Firebase Hosting.

00:04:49.740 --> 00:04:52.410
Finally, it will
output a URL that we

00:04:52.410 --> 00:04:55.560
can use to directly
preview the deployment.

00:04:55.560 --> 00:04:59.730
The cloud platforms with
direct support for Angular CLI

00:04:59.730 --> 00:05:04.230
are Google Cloud and
Firebase, Azure, and Zeit.

00:05:04.230 --> 00:05:06.750
Community partners also
implemented support

00:05:06.750 --> 00:05:11.010
for GitHub Pages, Netify, and
directly publishing libraries

00:05:11.010 --> 00:05:13.110
to NPM.

00:05:13.110 --> 00:05:15.900
In this video, we looked into
three simple optimization

00:05:15.900 --> 00:05:17.100
techniques.

00:05:17.100 --> 00:05:20.310
First, we introduced
code-splitting to our app

00:05:20.310 --> 00:05:23.550
by using the Angular
CLI schematics.

00:05:23.550 --> 00:05:25.500
After that, with
ngx quicklink, we

00:05:25.500 --> 00:05:27.990
added efficient
prefetching of chunks,

00:05:27.990 --> 00:05:31.050
associated with visible
links in the viewport.

00:05:31.050 --> 00:05:34.020
Finally, we deployed the
app to Firebase Hosting,

00:05:34.020 --> 00:05:37.620
enabling best-serving
practices such as CDM

00:05:37.620 --> 00:05:39.630
and Content Compression.

00:05:39.630 --> 00:05:41.730
You can learn more about
all of these techniques

00:05:41.730 --> 00:05:44.490
at web.dev/angular.

00:05:44.490 --> 00:05:45.600
Thank you for watching.

00:05:45.600 --> 00:05:50.150
[MUSIC PLAYING]

