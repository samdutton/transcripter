WEBVTT
Kind: captions
Language: en

00:00:02.440 --> 00:00:05.856
[MUSIC PLAYING]

00:00:08.300 --> 00:00:10.520
SPEAKER 1: In
theory, the URL bar

00:00:10.520 --> 00:00:13.010
that's shown at the
top of a web browser

00:00:13.010 --> 00:00:16.100
is your unambiguous clue
to website identity.

00:00:16.100 --> 00:00:19.790
If the URL bar says Google.com,
you're at the real Google.

00:00:19.790 --> 00:00:23.030
But in practice, it's not always
so easy to tell site identity

00:00:23.030 --> 00:00:24.170
from a domain.

00:00:24.170 --> 00:00:27.290
In a study that we did with
over 1,000 participants,

00:00:27.290 --> 00:00:29.900
we showed users a browser
window where the website looks

00:00:29.900 --> 00:00:32.210
like a Google login
page, but the address bar

00:00:32.210 --> 00:00:34.280
said tinyurl.com.

00:00:34.280 --> 00:00:37.760
When asked to identify
this website, over 85%

00:00:37.760 --> 00:00:40.550
of participants said
the website was Google.

00:00:40.550 --> 00:00:43.640
We're approaching this
problem from a few angles.

00:00:43.640 --> 00:00:46.670
First, we're actively combating
sophisticated spoofing

00:00:46.670 --> 00:00:49.220
techniques that
abuse URLs to create

00:00:49.220 --> 00:00:51.260
unusually deceptive attacks.

00:00:51.260 --> 00:00:53.870
Second, we're trying to
draw people's attention

00:00:53.870 --> 00:00:56.570
to the information in URLs
that's most relevant for making

00:00:56.570 --> 00:00:58.290
security decisions.

00:00:58.290 --> 00:01:00.530
And finally, we're
building specialized tools

00:01:00.530 --> 00:01:03.980
to support expert use cases
so that we can help make URLs

00:01:03.980 --> 00:01:06.350
better security tools
without interfering

00:01:06.350 --> 00:01:07.730
with experts' workflows.

00:01:10.280 --> 00:01:12.030
SPEAKER 2: People
should be able to browse

00:01:12.030 --> 00:01:14.460
the web without worrying
that someone is collecting

00:01:14.460 --> 00:01:16.770
a dossier on them for
what they're doing,

00:01:16.770 --> 00:01:18.660
and developers should
be able to build sites

00:01:18.660 --> 00:01:21.810
without worrying that their
infrastructure is compromising

00:01:21.810 --> 00:01:23.760
their users' interests.

00:01:23.760 --> 00:01:27.360
Third parties may want to
answer some very natural

00:01:27.360 --> 00:01:29.460
and non-personal questions--

00:01:29.460 --> 00:01:32.550
things like, how many
different people saw my ad?

00:01:32.550 --> 00:01:35.580
Or how often do the people
who click on these ads

00:01:35.580 --> 00:01:37.320
actually buy something?

00:01:37.320 --> 00:01:38.850
Answering all these
questions today

00:01:38.850 --> 00:01:41.940
relies on a really
powerful capability--

00:01:41.940 --> 00:01:45.040
global cross site identity.

00:01:45.040 --> 00:01:47.580
This is what can also be used
to knit your browsing behavior

00:01:47.580 --> 00:01:49.920
together into a user profile.

00:01:49.920 --> 00:01:52.320
So once we've invented new
ways for the web to flourish--

00:01:52.320 --> 00:01:54.620
ways that don't
rely on tracking--

00:01:54.620 --> 00:01:57.060
recognizing users across
sites has historically

00:01:57.060 --> 00:01:59.700
been based on third
party cookies.

00:01:59.700 --> 00:02:02.610
But as browsers have restricted
access to those cookies,

00:02:02.610 --> 00:02:05.280
we've seen them replaced
with other mechanisms--

00:02:05.280 --> 00:02:08.880
covert browser storage,
device fingerprinting.

00:02:08.880 --> 00:02:12.240
Those covert tracking
techniques are a real problem.

00:02:12.240 --> 00:02:14.400
If the web platform
forces you to use

00:02:14.400 --> 00:02:16.530
high entropy
fingerprinting surfaces

00:02:16.530 --> 00:02:20.130
to perform mundane tasks like
checking for emoji support,

00:02:20.130 --> 00:02:23.320
that's a problem
that we need to fix.

00:02:23.320 --> 00:02:27.560
And then, we want Chrome
to notice it and stop it

00:02:27.560 --> 00:02:29.310
when a website is
abusing a bunch

00:02:29.310 --> 00:02:33.270
of unrelated, high entropy
content APIs as a way

00:02:33.270 --> 00:02:34.530
to fingerprint you.

00:02:34.530 --> 00:02:36.780
Our privacy budget
explainer describes

00:02:36.780 --> 00:02:39.780
the multi-step process
that we're working on.

00:02:39.780 --> 00:02:42.060
Starting in Chrome M80--

00:02:42.060 --> 00:02:44.700
that's three months from now--

00:02:44.700 --> 00:02:47.340
if you set a cookie the way
you've probably been doing it

00:02:47.340 --> 00:02:49.500
since the dawn of
the web, that cookie

00:02:49.500 --> 00:02:54.350
will be available only
in a first party context.

00:02:54.350 --> 00:02:56.610
If you want that cookie
when you're a third party,

00:02:56.610 --> 00:02:59.040
you need to do something new.

00:02:59.040 --> 00:03:01.880
If you want a cookie available
when you're a third party,

00:03:01.880 --> 00:03:05.120
you will need to explicitly
set it with the attributes

00:03:05.120 --> 00:03:07.725
SameSite=None and Secure.

00:03:10.450 --> 00:03:13.630
SPEAKER 3: And there are
a lot of online services

00:03:13.630 --> 00:03:16.520
that heavily rely
on phone numbers,

00:03:16.520 --> 00:03:20.030
especially as a way to
send SMS text messages.

00:03:20.030 --> 00:03:24.820
These services are using
SMS to let users sign up,

00:03:24.820 --> 00:03:27.280
help users recover
their accounts,

00:03:27.280 --> 00:03:31.480
increase user security
with two step verification,

00:03:31.480 --> 00:03:33.790
or confirm payments.

00:03:33.790 --> 00:03:38.830
That's why we are proposing
a new API called SMS Receiver

00:03:38.830 --> 00:03:39.745
API.

00:03:39.745 --> 00:03:42.760
Web developers can
use the SMS Receiver

00:03:42.760 --> 00:03:46.390
API to let the browser
receive the SMS message,

00:03:46.390 --> 00:03:51.940
extract the OTP, and enter
the OTP on behalf of the user.

00:03:51.940 --> 00:03:55.330
Before the website
can receive an SMS,

00:03:55.330 --> 00:03:58.210
you have to know the
user's phone number

00:03:58.210 --> 00:04:02.190
so that you can send a message.

00:04:02.190 --> 00:04:07.520
If you are using an input tag,
my recommendation is to use

00:04:07.520 --> 00:04:10.170
autocomplete="tel".

00:04:10.170 --> 00:04:13.290
That way, the browser can help
the user auto fill their phone

00:04:13.290 --> 00:04:14.190
number.

00:04:14.190 --> 00:04:17.940
When an SMS is received and
meets all the conditions,

00:04:17.940 --> 00:04:21.250
a bottom sheet
appears in the browser

00:04:21.250 --> 00:04:23.790
and the user can grant
the browser permission

00:04:23.790 --> 00:04:25.890
to access the text message.

00:04:25.890 --> 00:04:30.390
This permission is required for
every receipt of a new message.

00:04:30.390 --> 00:04:32.790
This means the browser
won't be able to read

00:04:32.790 --> 00:04:36.570
SMS messages without the
use of explicit permission.

00:04:36.570 --> 00:04:40.170
To learn more about the
SMS Receiver API, please

00:04:40.170 --> 00:04:42.600
go to Google/smsreceiverAPI.

00:04:45.730 --> 00:04:48.220
In the previous session,
Emily showed you

00:04:48.220 --> 00:04:52.480
how Chrome tries to ensure the
user is on the genuine side.

00:04:52.480 --> 00:04:56.800
Web often allows you to provide
an extra layer of safety

00:04:56.800 --> 00:04:59.500
for users because
the key pair is

00:04:59.500 --> 00:05:02.030
bound to the website's origin.

00:05:02.030 --> 00:05:05.200
Even if a user ends up
on the phishing website,

00:05:05.200 --> 00:05:06.880
that phishing
website will not be

00:05:06.880 --> 00:05:10.930
able to make the user
generate a valid signature.

00:05:10.930 --> 00:05:14.630
Now, I would like to talk
about two primary user

00:05:14.630 --> 00:05:17.410
experiences using WebAuthn.

00:05:17.410 --> 00:05:20.590
They are two-factor
authentication and re

00:05:20.590 --> 00:05:22.100
reauthentification.

00:05:22.100 --> 00:05:25.190
So how effective
are second factors?

00:05:25.190 --> 00:05:27.300
Here's a comparison
between SMS OTP

00:05:27.300 --> 00:05:29.410
as the second
factor and security

00:05:29.410 --> 00:05:31.050
key as a second factor.

00:05:31.050 --> 00:05:34.630
As you can see, SMS
OPS is not perfect

00:05:34.630 --> 00:05:39.360
against targeted attacks, while
security key protect users

00:05:39.360 --> 00:05:40.780
completely.

00:05:40.780 --> 00:05:45.160
Platform authenticators are more
consumer-friendly than roaming

00:05:45.160 --> 00:05:49.450
authenticator or security
keys because you don't have

00:05:49.450 --> 00:05:51.890
to purchase a separate device.

00:05:51.890 --> 00:05:55.060
You don't have to worry
about carrying it around,

00:05:55.060 --> 00:05:59.200
and they are a part of
device you use every day.

00:05:59.200 --> 00:06:03.450
[MUSIC PLAYING]

