WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.865
[MUSIC PLAYING]

00:00:04.865 --> 00:00:06.490
SIMEON VINCENT: As
you probably guessed

00:00:06.490 --> 00:00:08.530
from the very creative
title of this talk,

00:00:08.530 --> 00:00:11.403
I am going to be talking
about Chrome extensions.

00:00:11.403 --> 00:00:12.820
And there's a lot
I want to cover,

00:00:12.820 --> 00:00:14.653
and our time together
is relatively limited.

00:00:14.653 --> 00:00:16.580
So before we get
into everything,

00:00:16.580 --> 00:00:18.580
I just want to make sure
we're on the same page.

00:00:18.580 --> 00:00:21.450
We're going to take a quick
look at an itinerary of events.

00:00:21.450 --> 00:00:23.950
So first, we're gong to talk
about how extensions are great,

00:00:23.950 --> 00:00:25.210
and how they're amazing.

00:00:25.210 --> 00:00:28.030
Then we're going
to talk about some

00:00:28.030 --> 00:00:31.600
of the anatomy of the
existing ecosystem.

00:00:31.600 --> 00:00:33.790
We're going to talk about
some of the challenges

00:00:33.790 --> 00:00:36.760
the extension
ecosystem is facing.

00:00:36.760 --> 00:00:39.898
We'll start to talk about
a fundamental shift in how

00:00:39.898 --> 00:00:42.190
the Chrome team is thinking
about the Chrome Extensions

00:00:42.190 --> 00:00:43.870
platform.

00:00:43.870 --> 00:00:45.670
We'll go over some
details of how

00:00:45.670 --> 00:00:49.030
to actually migrate an extension
and adopt this new system.

00:00:49.030 --> 00:00:52.000
And then I'll try to
tie it all together

00:00:52.000 --> 00:00:54.490
and say something
cool, we'll see.

00:00:54.490 --> 00:00:57.380
So without further
ado, let's do it.

00:00:57.380 --> 00:00:59.025
First off, extensions are great.

00:00:59.025 --> 00:01:00.400
There are a lot
of different ways

00:01:00.400 --> 00:01:02.692
that we could talk about
extensions, like how many have

00:01:02.692 --> 00:01:06.100
been published, or how many
the average user has installed,

00:01:06.100 --> 00:01:08.840
or user satisfaction
ratings, or whatever.

00:01:08.840 --> 00:01:11.680
But personally, when I
think about extensions,

00:01:11.680 --> 00:01:14.770
the thing I keep coming
back to is the fact

00:01:14.770 --> 00:01:20.530
that Chrome extensions are
how users make Chrome theirs.

00:01:20.530 --> 00:01:23.420
It's not just another
feature of the web browser.

00:01:23.420 --> 00:01:26.740
This is the way that you
customize the browser

00:01:26.740 --> 00:01:31.210
experience and make the web into
something that you personally

00:01:31.210 --> 00:01:33.460
experience.

00:01:33.460 --> 00:01:37.750
And users have
consistently told us

00:01:37.750 --> 00:01:41.980
that they love using extensions,
that extensions are a core part

00:01:41.980 --> 00:01:43.790
of how they browse the web.

00:01:43.790 --> 00:01:47.560
And I think there's a
pretty simple reason why.

00:01:47.560 --> 00:01:49.570
They make it your web browser.

00:01:52.180 --> 00:01:55.230
You can use extensions to make
all kinds of crazy things.

00:01:55.230 --> 00:01:57.930
Like you can, I don't know,
get some motivation every time

00:01:57.930 --> 00:02:01.000
you open a new tab or automate
parts of your workflow.

00:02:01.000 --> 00:02:03.390
You can change
your theme and make

00:02:03.390 --> 00:02:06.550
Chrome feel more like home.

00:02:06.550 --> 00:02:08.543
You can remove ads on
the sites you visit.

00:02:08.543 --> 00:02:10.710
You can automatically donate
to the content creators

00:02:10.710 --> 00:02:13.240
that you love.

00:02:13.240 --> 00:02:15.490
Or you can take some
inspiration from XKCD

00:02:15.490 --> 00:02:17.230
and replace a word
here and there

00:02:17.230 --> 00:02:19.990
to spice up your day-to-day
browsing experience.

00:02:19.990 --> 00:02:24.770
But the point is, extensions
put you front and center.

00:02:24.770 --> 00:02:27.595
You customize your web
browser to your tastes.

00:02:30.305 --> 00:02:31.930
And if you can't find
an extension that

00:02:31.930 --> 00:02:35.852
does what you want, you could
probably build your own.

00:02:35.852 --> 00:02:37.810
Those of you comfortable
with web development--

00:02:37.810 --> 00:02:40.480
I'm going to assume that's a
decent number of you here--

00:02:40.480 --> 00:02:43.330
are already most of the way
to building your own Chrome

00:02:43.330 --> 00:02:44.080
extension.

00:02:44.080 --> 00:02:46.390
See, the Chrome
Extensions platform

00:02:46.390 --> 00:02:49.870
is itself an extension
of the web platform.

00:02:49.870 --> 00:02:52.150
Chrome extensions use the
same standard technologies--

00:02:52.150 --> 00:02:56.060
JavaScript, HTML,
CSS-- that you,

00:02:56.060 --> 00:02:58.250
web developers use to make--

00:02:58.250 --> 00:03:00.690
I don't know, I said you, web
developers, that's weird--

00:03:00.690 --> 00:03:05.090
web developers use to make
websites and the experiences

00:03:05.090 --> 00:03:07.370
that we all enjoy every day.

00:03:07.370 --> 00:03:10.280
This webby design
is a core feature

00:03:10.280 --> 00:03:12.643
of our browser extension model.

00:03:12.643 --> 00:03:14.060
And to show you
what I mean, let's

00:03:14.060 --> 00:03:18.990
take a quick look at an example
extension to see how it works.

00:03:18.990 --> 00:03:21.200
Here, I have a
very real extension

00:03:21.200 --> 00:03:22.820
that definitely exists.

00:03:22.820 --> 00:03:25.380
And it does two main things.

00:03:25.380 --> 00:03:30.560
It allows me to block websites
that I spend too much time on.

00:03:30.560 --> 00:03:33.050
And it allows me
to log my work so I

00:03:33.050 --> 00:03:34.710
can hold myself accountable.

00:03:34.710 --> 00:03:37.820
So if we download this
extension and open it up,

00:03:37.820 --> 00:03:39.520
we'll see something like this.

00:03:39.520 --> 00:03:41.930
Here, this is the
CRX file that I've

00:03:41.930 --> 00:03:43.590
downloaded from the web store.

00:03:43.590 --> 00:03:46.850
And as you can see, this
command line utility I'm using

00:03:46.850 --> 00:03:49.730
shows that the extension is
basically just a directory that

00:03:49.730 --> 00:03:52.883
contains standard webby files.

00:03:52.883 --> 00:03:53.800
AUDIENCE: [INAUDIBLE].

00:03:53.800 --> 00:03:54.930
SIMEON VINCENT: Oh,
my, I don't know why

00:03:54.930 --> 00:03:56.138
I was going to give you that.

00:03:59.820 --> 00:04:01.550
So it's basically
just a directory

00:04:01.550 --> 00:04:04.010
that contains a bunch of
files that you're typically

00:04:04.010 --> 00:04:05.910
used to working on the web.

00:04:05.910 --> 00:04:09.020
And I want to quickly call
out manifest.json here.

00:04:09.020 --> 00:04:11.720
This file is important because
it's the primary entry point

00:04:11.720 --> 00:04:13.290
to enter your extension.

00:04:13.290 --> 00:04:16.550
So if we pop this open, we
can see that the manifest.json

00:04:16.550 --> 00:04:19.160
contains everything
that the extension needs

00:04:19.160 --> 00:04:23.270
in order for Chrome
to load it and run it.

00:04:23.270 --> 00:04:25.130
And I specifically
want to point out here

00:04:25.130 --> 00:04:28.490
that we're looking at a
Manifest version 2 extension.

00:04:28.490 --> 00:04:30.740
The 2 means that we're working
with the second version

00:04:30.740 --> 00:04:32.138
of the platform.

00:04:32.138 --> 00:04:34.430
Later, we'll be talking more
about some of the features

00:04:34.430 --> 00:04:37.850
specific to Chrome extensions
from the Manifest version 3

00:04:37.850 --> 00:04:39.780
platform.

00:04:39.780 --> 00:04:41.870
So here we have the
background property.

00:04:41.870 --> 00:04:47.630
This is the-- oh,
no, what am I saying?

00:04:47.630 --> 00:04:50.387
The background pop
property specifies

00:04:50.387 --> 00:04:52.220
what code will be running
in the background.

00:04:52.220 --> 00:04:54.980
Typically, your background is
used to set up event listeners

00:04:54.980 --> 00:04:58.770
and coordinate between different
parts of your extension.

00:04:58.770 --> 00:05:00.520
content_scripts
here are injected

00:05:00.520 --> 00:05:04.940
onto specific web pages that you
want to load custom script on.

00:05:04.940 --> 00:05:07.910
Here, I'm using
a special pattern

00:05:07.910 --> 00:05:11.870
called all_urls, which, as you
might guess, matches all URLs.

00:05:14.670 --> 00:05:16.410
And finally, the
permissions section

00:05:16.410 --> 00:05:18.390
currently defines two things--

00:05:18.390 --> 00:05:20.640
first, the URLs that I'm
going to be interacting with,

00:05:20.640 --> 00:05:23.490
the hosts that I'm
going to interact with,

00:05:23.490 --> 00:05:26.505
and the permissions that
the extension requires.

00:05:26.505 --> 00:05:28.380
My extension is pretty
simple since it's only

00:05:28.380 --> 00:05:31.200
basically blocking sites
and saving data locally.

00:05:31.200 --> 00:05:34.480
It doesn't need
many permissions.

00:05:34.480 --> 00:05:36.570
Now, there's a lot more
that Manifest can do.

00:05:36.570 --> 00:05:38.790
But these are the
core pieces that we'll

00:05:38.790 --> 00:05:40.090
be looking at later on.

00:05:40.090 --> 00:05:43.350
So let's take a look
at some of the issues

00:05:43.350 --> 00:05:46.110
that we have with the
current ecosystem.

00:05:46.110 --> 00:05:49.680
While users love the platform,
and good actors put them

00:05:49.680 --> 00:05:54.000
to wonderful use, we are
also facing some very real

00:05:54.000 --> 00:05:56.440
challenges.

00:05:56.440 --> 00:05:58.290
These are the issues
that we're facing.

00:05:58.290 --> 00:06:00.180
We're going to go
over each in turn.

00:06:00.180 --> 00:06:02.250
And while some of them
are closely related,

00:06:02.250 --> 00:06:03.900
they're distinct
enough that we're

00:06:03.900 --> 00:06:06.910
going to need to explain each.

00:06:06.910 --> 00:06:09.300
So first, usability--
simply put,

00:06:09.300 --> 00:06:11.940
when we first created
the extensions platform,

00:06:11.940 --> 00:06:16.650
we made some assumptions
about how users would interact

00:06:16.650 --> 00:06:19.440
with the installation flow,
and how well they understood

00:06:19.440 --> 00:06:22.200
the install prompts, and
how well they understood

00:06:22.200 --> 00:06:24.450
the trade-offs being requested.

00:06:24.450 --> 00:06:26.370
And unfortunately,
over time, I think,

00:06:26.370 --> 00:06:28.890
we've come to see
that these don't

00:06:28.890 --> 00:06:33.620
hold as well for the average
user as we would have liked to.

00:06:33.620 --> 00:06:36.070
On the flip side,
powerful APIs are often

00:06:36.070 --> 00:06:37.670
a developer's only option.

00:06:37.670 --> 00:06:41.150
For example, if you want to
block ads on a web today,

00:06:41.150 --> 00:06:43.040
you have to give the
ad blocker broad access

00:06:43.040 --> 00:06:44.540
to your network request.

00:06:44.540 --> 00:06:46.160
This means you're
also implicitly

00:06:46.160 --> 00:06:49.730
granting it the ability to see
literally everything you do.

00:06:49.730 --> 00:06:54.690
And understandably, this gives
a good number of users a pause.

00:06:54.690 --> 00:06:57.780
And speaking of powerful
permissions, all_urls

00:06:57.780 --> 00:06:59.580
is kind of a special
case that needs

00:06:59.580 --> 00:07:01.090
some of that extra attention.

00:07:01.090 --> 00:07:05.480
See, it is extremely common
in today's ecosystem.

00:07:05.480 --> 00:07:07.730
It's almost impossible to
install an extension that

00:07:07.730 --> 00:07:10.340
doesn't say, this extension
can read and modify

00:07:10.340 --> 00:07:11.630
all your site data.

00:07:11.630 --> 00:07:18.660
And what that also means is that
end users aren't necessarily--

00:07:18.660 --> 00:07:19.970
they're kind of desensitized.

00:07:19.970 --> 00:07:23.330
They're not giving enough
credence to the danger

00:07:23.330 --> 00:07:26.240
that this poses.

00:07:26.240 --> 00:07:28.430
This should be a relatively
scary permission.

00:07:28.430 --> 00:07:31.250
But it is kind of core to
how the current extension

00:07:31.250 --> 00:07:33.060
ecosystem works.

00:07:33.060 --> 00:07:35.780
It also makes it much harder
for us to closely scrutinize

00:07:35.780 --> 00:07:37.700
the content of the
extension in order

00:07:37.700 --> 00:07:41.720
to make sure that anomalous use
or potentially dangerous use

00:07:41.720 --> 00:07:42.775
isn't occurring.

00:07:45.510 --> 00:07:48.120
And while we're on the topic
of frightening capabilities,

00:07:48.120 --> 00:07:50.250
in the current version of
the extension ecosystem,

00:07:50.250 --> 00:07:54.210
it's possible for an extension
to load and execute code

00:07:54.210 --> 00:07:59.150
from a remote server or
from an arbitrary string.

00:07:59.150 --> 00:08:00.960
The term that we
tend to use for this

00:08:00.960 --> 00:08:04.440
is remotely loaded code
or remotely hosted code.

00:08:04.440 --> 00:08:06.870
And essentially, we
just mean any code

00:08:06.870 --> 00:08:09.420
that isn't in the
extension's bundle.

00:08:09.420 --> 00:08:12.010
And while this capability
is used to good effect,

00:08:12.010 --> 00:08:14.190
it's also a major attack vector.

00:08:14.190 --> 00:08:15.960
After all, if an
extension can change

00:08:15.960 --> 00:08:20.220
what it does at runtime without
review, then essentially,

00:08:20.220 --> 00:08:21.562
all bets are off.

00:08:21.562 --> 00:08:23.520
And to put it lightly,
that's not the situation

00:08:23.520 --> 00:08:26.700
we're exactly excited about.

00:08:26.700 --> 00:08:30.120
Another major challenge of the
current extensions platform

00:08:30.120 --> 00:08:35.940
is that extensions can pretty
easily tank performance,

00:08:35.940 --> 00:08:38.159
either for specific
pages or for Chrome.

00:08:38.159 --> 00:08:41.130
For specific pages, the
user can just close the page

00:08:41.130 --> 00:08:41.919
and move on.

00:08:41.919 --> 00:08:44.010
But when it starts
to drag down Chrome,

00:08:44.010 --> 00:08:45.510
then everything suffers.

00:08:45.510 --> 00:08:49.270
The web suffers, from
the user's point of view.

00:08:49.270 --> 00:08:51.840
And due to the asynchronous
architecture of the extensions

00:08:51.840 --> 00:08:54.480
platform, there's no obvious
signal to the end user

00:08:54.480 --> 00:08:56.050
when this is happening.

00:08:56.050 --> 00:08:58.320
So if a page were to
similarly slow down,

00:08:58.320 --> 00:09:00.030
you would start to
see scroll junk,

00:09:00.030 --> 00:09:02.280
or there would be clear
signals that there's issues.

00:09:02.280 --> 00:09:08.130
But basically, the computer
just very slowly degrades.

00:09:08.130 --> 00:09:10.990
And even if a user knew that
an extension was at fault,

00:09:10.990 --> 00:09:13.320
there's not a great way
for them to take action,

00:09:13.320 --> 00:09:14.790
to reclaim those resources.

00:09:18.250 --> 00:09:21.510
And finally, users simply
don't have enough control

00:09:21.510 --> 00:09:22.920
in today's ecosystem.

00:09:25.500 --> 00:09:28.620
They don't have enough
control over the experience

00:09:28.620 --> 00:09:30.150
of using an extension.

00:09:30.150 --> 00:09:33.780
Historically, if an extension
said that it needed broad host

00:09:33.780 --> 00:09:36.030
permissions, that
it needed all_urls,

00:09:36.030 --> 00:09:38.550
they would just
include that pattern

00:09:38.550 --> 00:09:40.050
in their permissions list.

00:09:40.050 --> 00:09:42.840
And then the user is forced
to either choose to grant them

00:09:42.840 --> 00:09:46.290
the set of capabilities that
the extension's requesting

00:09:46.290 --> 00:09:47.940
or to bail out entirely.

00:09:47.940 --> 00:09:51.300
And needless to say, this isn't
good for users or developers.

00:09:51.300 --> 00:09:54.150
It also assumes that
the user actually

00:09:54.150 --> 00:09:56.110
understands these permissions.

00:09:56.110 --> 00:09:59.340
So if a user didn't understand
"read and change all your site

00:09:59.340 --> 00:10:04.140
data," they might say yes,
even though they don't

00:10:04.140 --> 00:10:05.620
understand the consequences.

00:10:05.620 --> 00:10:09.000
And there's no remediation until
you uninstall the extension

00:10:09.000 --> 00:10:11.570
entirely.

00:10:11.570 --> 00:10:14.900
So that brings us to
this paradigm shift.

00:10:14.900 --> 00:10:17.750
As we think about how to
improve the extensions platform

00:10:17.750 --> 00:10:22.220
and where we want
it to go, we're

00:10:22.220 --> 00:10:24.500
making some changes to
the base assumptions

00:10:24.500 --> 00:10:30.020
about how extensions are
built. And unfortunately,

00:10:30.020 --> 00:10:31.670
all of the issues
we just went through

00:10:31.670 --> 00:10:35.090
present a fundamental conflict
with the current extensions

00:10:35.090 --> 00:10:35.700
platform.

00:10:35.700 --> 00:10:41.180
We can't make those changes
without some rather substantial

00:10:41.180 --> 00:10:43.680
breaking changes to
the platform itself.

00:10:43.680 --> 00:10:46.860
So we're going to make
some substantial changes

00:10:46.860 --> 00:10:48.800
and break the Manifest
version, which

00:10:48.800 --> 00:10:50.270
is why we're going from 2 to 3.

00:10:50.270 --> 00:10:52.300
That way, we have a new
ecosystem to work in.

00:10:55.680 --> 00:10:59.370
So if I had to give the
current ecosystem kind

00:10:59.370 --> 00:11:01.920
of a tag line or a motto,
it would be something like,

00:11:01.920 --> 00:11:06.100
"empower developers to create
amazing end user experiences."

00:11:06.100 --> 00:11:07.740
But as we look to
the future of how

00:11:07.740 --> 00:11:10.320
we want to evolve
the platform, we

00:11:10.320 --> 00:11:14.130
want to shift it to
something more like,

00:11:14.130 --> 00:11:16.170
"empower users to
customize Chrome

00:11:16.170 --> 00:11:18.210
with amazing extensions."

00:11:18.210 --> 00:11:20.490
The privacy and
security of the user

00:11:20.490 --> 00:11:23.430
should be the primary focus for
both Chrome and for extension

00:11:23.430 --> 00:11:24.490
developers.

00:11:24.490 --> 00:11:27.150
And of course, we're still
striving to provide developers

00:11:27.150 --> 00:11:31.020
with a powerful,
capable platform

00:11:31.020 --> 00:11:34.150
that they can use to
enable and delight users.

00:11:34.150 --> 00:11:36.090
But that respect for
the user should be

00:11:36.090 --> 00:11:40.920
a core principle for everyone.

00:11:40.920 --> 00:11:42.930
With this user-centered
philosophy in mind,

00:11:42.930 --> 00:11:45.240
we're aiming to improve three
main areas of the Chrome

00:11:45.240 --> 00:11:50.670
Extensions platform-- privacy,
security, and performance.

00:11:50.670 --> 00:11:53.940
In order to improve the privacy
of the extension ecosystem,

00:11:53.940 --> 00:11:55.650
we're trying to give
users more control

00:11:55.650 --> 00:11:59.830
over when an extension will run
and what data it can access.

00:11:59.830 --> 00:12:02.100
We're also trying to
encourage extension developers

00:12:02.100 --> 00:12:04.920
to give users more
in-context permission

00:12:04.920 --> 00:12:07.980
requests and temporary
permission grants.

00:12:07.980 --> 00:12:13.110
In-context requests improve
the end users comprehension

00:12:13.110 --> 00:12:15.630
of a permission being requested.

00:12:15.630 --> 00:12:19.290
And temporary grants keep the
user in control of their data.

00:12:19.290 --> 00:12:20.840
For more about
temporary grants, I'd

00:12:20.840 --> 00:12:23.570
encourage you to check out
documentation on activeTab.

00:12:26.430 --> 00:12:28.795
We're also looking to improve
the security guarantees

00:12:28.795 --> 00:12:30.570
of the extensions platform.

00:12:30.570 --> 00:12:39.240
That is, we want to be able to
say to the user with confidence

00:12:39.240 --> 00:12:42.330
that it is significantly
harder or even impossible

00:12:42.330 --> 00:12:45.810
for an extension to gain control
of this privileged execution

00:12:45.810 --> 00:12:46.680
environment.

00:12:46.680 --> 00:12:50.710
And by extension, we want to
increase-- huh, by extension--

00:12:50.710 --> 00:12:54.690
we want to increase the end
user trust in what they install,

00:12:54.690 --> 00:12:57.810
and that it won't cause
any long-term harm

00:12:57.810 --> 00:13:00.837
or won't do anything without
their direct involvement.

00:13:03.520 --> 00:13:06.051
Oh, right, I have
to press a button.

00:13:06.051 --> 00:13:07.800
[LAUGHTER]

00:13:07.800 --> 00:13:10.020
We're also aiming to make
the extension platform more

00:13:10.020 --> 00:13:12.390
performant by default.
We want developers

00:13:12.390 --> 00:13:14.550
to fall into a pit
of success, where

00:13:14.550 --> 00:13:18.060
even if they make a mistake
or adopt an anti-pattern,

00:13:18.060 --> 00:13:19.560
things will, for
the most part, just

00:13:19.560 --> 00:13:23.350
work out for them and, by
extension, the end user.

00:13:23.350 --> 00:13:26.340
So one of the goals
here is to reduce

00:13:26.340 --> 00:13:28.440
the amount of resources
that are being consumed

00:13:28.440 --> 00:13:32.085
over the extension's lifetime.

00:13:32.085 --> 00:13:34.132
I have too many things.

00:13:34.132 --> 00:13:36.090
OK, let's start to get
into some of the details

00:13:36.090 --> 00:13:37.980
about how extension
developers will migrate

00:13:37.980 --> 00:13:39.480
from the current
extensions platform

00:13:39.480 --> 00:13:41.160
to the new version, Manifest V3.

00:13:46.020 --> 00:13:47.770
There are four main
things that developers

00:13:47.770 --> 00:13:49.930
are going to need to adapt
to in this transition.

00:13:49.930 --> 00:13:52.780
First, we're migrating
from a background page

00:13:52.780 --> 00:13:54.850
to a background service worker.

00:13:54.850 --> 00:14:01.000
We're going to change how
the extension gets and uses

00:14:01.000 --> 00:14:03.190
host permissions.

00:14:03.190 --> 00:14:05.742
We're introducing a new
requirement for extensions

00:14:05.742 --> 00:14:08.200
to bundle all the source code
that they're going to execute

00:14:08.200 --> 00:14:10.190
into the extension itself.

00:14:10.190 --> 00:14:12.760
And finally, we're changing
how network requests

00:14:12.760 --> 00:14:15.060
are modified at runtime.

00:14:15.060 --> 00:14:17.010
Each of these has its
own set of challenges

00:14:17.010 --> 00:14:19.470
and will require a different
set of adaptations.

00:14:19.470 --> 00:14:24.870
So we're going to step through
them and see how it goes.

00:14:24.870 --> 00:14:27.890
First up, background
context changes--

00:14:27.890 --> 00:14:31.340
the first and perhaps
broadest set of changes

00:14:31.340 --> 00:14:34.130
is the transition from a
background page to a background

00:14:34.130 --> 00:14:35.300
service worker.

00:14:35.300 --> 00:14:37.460
There are two types of
background pages today--

00:14:37.460 --> 00:14:40.790
persistent background
pages and event pages.

00:14:40.790 --> 00:14:43.730
Persistent background
pages, as you may guess,

00:14:43.730 --> 00:14:46.580
are long-lived page
environments that constantly

00:14:46.580 --> 00:14:48.050
run in the background.

00:14:48.050 --> 00:14:51.200
Event pages, on the other hand,
are temporary environments

00:14:51.200 --> 00:14:52.985
that are started in
response to an event

00:14:52.985 --> 00:14:54.860
and terminated when
they're no longer needed.

00:14:57.720 --> 00:15:00.650
We want to move from
background pages

00:15:00.650 --> 00:15:05.280
to service workers for
three general reasons.

00:15:05.280 --> 00:15:07.110
First, better
overall performance--

00:15:07.110 --> 00:15:10.460
we want to reduce the number of
concurrent processes running,

00:15:10.460 --> 00:15:13.970
the amount of memory consumed,
and the total resource usage

00:15:13.970 --> 00:15:15.800
overall of extensions.

00:15:15.800 --> 00:15:18.740
Second, extensions are
built on top of the web.

00:15:18.740 --> 00:15:21.410
Where possible, we much prefer
to use the web's primitives

00:15:21.410 --> 00:15:24.960
rather than custom extension's
specific solutions.

00:15:24.960 --> 00:15:27.320
And finally, maintenance cost--

00:15:27.320 --> 00:15:29.000
upkeep has a very real cost.

00:15:29.000 --> 00:15:31.940
If we have a bunch
of redundant features

00:15:31.940 --> 00:15:35.240
that are both supported by the
web platform and the extension

00:15:35.240 --> 00:15:37.730
platform, that means we
have to do twice the work.

00:15:37.730 --> 00:15:40.310
Like Chrome has to do
twice the work in order

00:15:40.310 --> 00:15:45.710
to make any change because
of knock-on effects.

00:15:45.710 --> 00:15:47.540
One change here can
cause consequences

00:15:47.540 --> 00:15:51.090
in other places
you didn't expect.

00:15:51.090 --> 00:15:53.990
So as developers look to
migrate to service workers,

00:15:53.990 --> 00:15:58.670
there are two categories
of issues that we're

00:15:58.670 --> 00:16:00.740
going to need to face.

00:16:00.740 --> 00:16:04.970
First is this transition
from a persistent page

00:16:04.970 --> 00:16:07.070
to an ephemeral environment.

00:16:07.070 --> 00:16:12.630
And the other is moving from
a headless page to a worker.

00:16:12.630 --> 00:16:16.040
So first up, ephemerality--

00:16:16.040 --> 00:16:18.560
extension listeners
need to be registered

00:16:18.560 --> 00:16:21.350
in the root context
of an extension

00:16:21.350 --> 00:16:23.780
rather than in
asynchronous registration

00:16:23.780 --> 00:16:25.310
and some kind of callback.

00:16:25.310 --> 00:16:29.690
For example, you can imagine
requesting some config

00:16:29.690 --> 00:16:31.940
from Aroma server
and then, once you've

00:16:31.940 --> 00:16:34.010
received the response,
registering the callback

00:16:34.010 --> 00:16:35.140
handler.

00:16:35.140 --> 00:16:36.890
And this is a little
bit off in the weeds,

00:16:36.890 --> 00:16:38.300
but I think it's cool.

00:16:38.300 --> 00:16:40.610
So I'm going to
share it with you.

00:16:40.610 --> 00:16:42.840
In order for Chrome to
properly dispatch events,

00:16:42.840 --> 00:16:47.150
it needs the events to be
registered as soon as possible,

00:16:47.150 --> 00:16:49.340
preferably, in the first
turn of the event loop.

00:16:49.340 --> 00:16:51.590
If they're not,
then it's possible

00:16:51.590 --> 00:16:54.080
that you would perform your
asynchronous network request.

00:16:54.080 --> 00:16:56.420
You'd come back.

00:16:56.420 --> 00:16:58.790
Before the response
is received, Chrome

00:16:58.790 --> 00:17:00.410
would try to dispatch the event.

00:17:00.410 --> 00:17:03.630
It wouldn't be handled because
there's no handlers registered.

00:17:03.630 --> 00:17:06.290
And then you receive
the response,

00:17:06.290 --> 00:17:07.272
register your listener.

00:17:07.272 --> 00:17:09.314
And now you're like, wait,
where did my event go?

00:17:09.314 --> 00:17:11.689
Like I dropped it on the floor
because you weren't there.

00:17:15.160 --> 00:17:17.819
All right, second, you
can't rely on global state.

00:17:17.819 --> 00:17:20.069
Since service workers
are event-based,

00:17:20.069 --> 00:17:21.780
the global context
with a service worker

00:17:21.780 --> 00:17:25.470
is tossed every time the
service worker is torn down.

00:17:25.470 --> 00:17:29.490
So you probably need to adapt
by moving from global state

00:17:29.490 --> 00:17:34.740
to chrome.storage
APIs or IndexedDB.

00:17:34.740 --> 00:17:39.550
I should also call out here
that extension service workers--

00:17:39.550 --> 00:17:41.070
well, I guess, all
service workers--

00:17:41.070 --> 00:17:42.750
are asynchronous by design.

00:17:42.750 --> 00:17:47.320
So you can't rely on synchronous
APIs like local storage.

00:17:47.320 --> 00:17:51.090
So if you're currently
using local storage

00:17:51.090 --> 00:17:55.220
to store your state, you'll need
to work out a migration plan.

00:17:59.050 --> 00:18:03.110
All right, the other major
challenge with background pages

00:18:03.110 --> 00:18:05.990
is that they don't have
DOM-- or I'm sorry,

00:18:05.990 --> 00:18:09.960
background service workers pages
have DOM because they're pages.

00:18:09.960 --> 00:18:14.150
So no worker-- web
worker, or service worker,

00:18:14.150 --> 00:18:16.580
or animation worklet--

00:18:16.580 --> 00:18:18.110
none of them have access to DOM.

00:18:18.110 --> 00:18:23.210
By design, workers are meant to
be a stripped down environment.

00:18:23.210 --> 00:18:26.030
But that also means you
can't do things that you're

00:18:26.030 --> 00:18:27.590
used to using DOM for.

00:18:27.590 --> 00:18:30.440
You can't parse
XML or HTML, or you

00:18:30.440 --> 00:18:33.620
can't traverse a document tree
because there's no document.

00:18:33.620 --> 00:18:37.350
You can't dispatch events
because there are no elements

00:18:37.350 --> 00:18:39.980
to dispatch events on.

00:18:39.980 --> 00:18:41.780
You can't play audio or video.

00:18:41.780 --> 00:18:44.450
You can't render
to a canvas element

00:18:44.450 --> 00:18:46.830
because there's no element.

00:18:46.830 --> 00:18:50.420
So each of these is going to
require its own specific ways

00:18:50.420 --> 00:18:51.230
to handle.

00:18:51.230 --> 00:18:54.650
For parsing documents,
traversing trees, dispatching

00:18:54.650 --> 00:19:00.950
events, a library like JSDOM or
Undom can fill that use case.

00:19:00.950 --> 00:19:03.860
For playing audio
or video, you'll

00:19:03.860 --> 00:19:06.110
probably want to reuse
an existing DOM context

00:19:06.110 --> 00:19:07.290
or create a new one.

00:19:07.290 --> 00:19:09.350
So open a new tab or window.

00:19:09.350 --> 00:19:11.660
And for rendering
to canvases, that's

00:19:11.660 --> 00:19:14.000
what OffscreenCanvas is
for explicitly, by design.

00:19:16.820 --> 00:19:18.740
And while this isn't
our preferred pattern,

00:19:18.740 --> 00:19:20.660
in some cases,
you may absolutely

00:19:20.660 --> 00:19:24.350
need a long-lived,
persistent page environment.

00:19:24.350 --> 00:19:27.530
In those cases,
I'd recommend using

00:19:27.530 --> 00:19:29.420
a new tab or a new window.

00:19:29.420 --> 00:19:31.040
And that may sound
odd that we're

00:19:31.040 --> 00:19:33.830
moving from a headless
page to a worker,

00:19:33.830 --> 00:19:36.200
and the solution is
to open a new page.

00:19:36.200 --> 00:19:38.380
And the answer is, yes.

00:19:38.380 --> 00:19:41.210
The rationale here is that
this gives the user control.

00:19:41.210 --> 00:19:44.570
If they are able to control
whether or not a page is open,

00:19:44.570 --> 00:19:48.320
a tab is present, then they
can decide whether or not

00:19:48.320 --> 00:19:50.360
they want your
page to be around,

00:19:50.360 --> 00:19:52.892
or if they want to
reclaim those resources.

00:19:52.892 --> 00:19:55.100
For additional guidance on
adopting service workers--

00:19:55.100 --> 00:19:58.020
there are other issues to
be aware of here as well--

00:19:58.020 --> 00:19:59.270
check out the Migration Guide.

00:19:59.270 --> 00:20:02.330
I'll have a link at
the end of the talk.

00:20:02.330 --> 00:20:03.510
All right, too many words.

00:20:03.510 --> 00:20:10.410
Code-- assuming that you already
have your background script

00:20:10.410 --> 00:20:12.810
in a state that can be
transitioned directly

00:20:12.810 --> 00:20:15.410
to a service worker--

00:20:15.410 --> 00:20:17.780
and for reference, a decent
number of event pages

00:20:17.780 --> 00:20:19.430
already fit this bill--

00:20:19.430 --> 00:20:24.200
you can simply change the
background scripts here

00:20:24.200 --> 00:20:26.750
into a service worker.

00:20:26.750 --> 00:20:27.380
That's it.

00:20:27.380 --> 00:20:29.047
It's a one-line change
in your manifest.

00:20:31.570 --> 00:20:34.710
But that makes a decent
number of assumptions.

00:20:34.710 --> 00:20:36.870
All right, host permissions--

00:20:36.870 --> 00:20:39.630
one of the fundamental
changes in how

00:20:39.630 --> 00:20:41.850
the new version of the
extensions platform

00:20:41.850 --> 00:20:46.290
is rethinking the
way extensions work

00:20:46.290 --> 00:20:50.507
is this shift towards a more
user-centric interaction model.

00:20:50.507 --> 00:20:52.590
In the past, if an extension
wanted to access data

00:20:52.590 --> 00:20:54.520
on every website, as
I mentioned before,

00:20:54.520 --> 00:20:57.060
they just add all_urls to
their permissions list.

00:20:57.060 --> 00:21:00.150
And then if the user didn't
understand or just agreed

00:21:00.150 --> 00:21:04.920
to it, the extension
would have that capability

00:21:04.920 --> 00:21:09.370
until it was uninstalled.

00:21:09.370 --> 00:21:13.770
Given the risks associated with
this persistent permission,

00:21:13.770 --> 00:21:16.300
the extensions team
wanted to change

00:21:16.300 --> 00:21:19.510
how capability grants like this
work in order to give users

00:21:19.510 --> 00:21:22.060
more control over their data.

00:21:22.060 --> 00:21:25.540
With the release of Chrome
70 in October of last year,

00:21:25.540 --> 00:21:27.130
end users gained
a lot more control

00:21:27.130 --> 00:21:30.200
with the introduction
of this feature.

00:21:30.200 --> 00:21:33.460
Here, if you right-click an
extension in the toolbar,

00:21:33.460 --> 00:21:35.830
you can go to the "This can
change and read site data"

00:21:35.830 --> 00:21:39.550
option, where you can restrict
the extension's access

00:21:39.550 --> 00:21:45.370
to either a specific site or
even to only run on click.

00:21:45.370 --> 00:21:48.670
Looking to the future, we're
exploring additional changes

00:21:48.670 --> 00:21:51.250
to the installation
flow, so that "When

00:21:51.250 --> 00:21:55.220
you click the extension" option
in here is the new default.

00:21:55.220 --> 00:21:57.880
Users can still
opt into granting

00:21:57.880 --> 00:22:01.930
broader persistent permissions
if they wish to do so.

00:22:01.930 --> 00:22:05.020
But that should be the user's
choice, not the developer's.

00:22:05.020 --> 00:22:07.960
Rather extension should
provide a complete compelling

00:22:07.960 --> 00:22:12.310
experience out-of-the-box
without having to ask the user

00:22:12.310 --> 00:22:15.010
to give away the sun,
the moon, and the stars.

00:22:15.010 --> 00:22:19.180
The intent here is more
direct user control

00:22:19.180 --> 00:22:21.880
over when and where extensions
will access their data.

00:22:24.440 --> 00:22:27.200
Today, many of
extensions are designed

00:22:27.200 --> 00:22:30.360
around this pervasive
data access pattern.

00:22:30.360 --> 00:22:33.530
And there are a whole host of
ways that good actors put this

00:22:33.530 --> 00:22:35.510
to positive effect.

00:22:35.510 --> 00:22:39.470
But it also comes at a cost that
a lot of developers and users

00:22:39.470 --> 00:22:40.850
may not have considered.

00:22:40.850 --> 00:22:45.590
And that cost is compromising
user security and privacy.

00:22:45.590 --> 00:22:49.370
To that end, I'd strongly
encourage developers

00:22:49.370 --> 00:22:52.880
to look into ways to
embrace this new paradigm,

00:22:52.880 --> 00:22:54.170
this new mindset.

00:22:54.170 --> 00:22:59.240
And try to design your
basic interactions

00:22:59.240 --> 00:23:01.640
for your extension around
temporary host permissions

00:23:01.640 --> 00:23:04.280
rather than persistent
host permissions.

00:23:04.280 --> 00:23:08.060
Where possible, treat
in-page interaction and host

00:23:08.060 --> 00:23:10.430
permissions as a
progressive enhancement.

00:23:10.430 --> 00:23:12.290
If the user likes what
you're delivering,

00:23:12.290 --> 00:23:14.960
then they can choose
to grant your extension

00:23:14.960 --> 00:23:16.498
additional capabilities.

00:23:19.430 --> 00:23:21.170
Before we move
off permissions, I

00:23:21.170 --> 00:23:24.860
would want to make a quick
note about API changes.

00:23:24.860 --> 00:23:30.620
Earlier I mentioned that
Manifest version 2 specify

00:23:30.620 --> 00:23:33.380
hosts in the permissions field.

00:23:33.380 --> 00:23:35.540
In Manifest version
3, we're changing

00:23:35.540 --> 00:23:41.360
this to have a dedicated field
host.permissions, where you

00:23:41.360 --> 00:23:44.480
define your host permissions.

00:23:44.480 --> 00:23:46.310
While this is a small
change, the intent

00:23:46.310 --> 00:23:50.240
is to better reflect
how the Chrome

00:23:50.240 --> 00:23:53.790
platform is thinking about
and using host permissions.

00:23:53.790 --> 00:23:57.980
These aren't capabilities that
will be required of the user.

00:23:57.980 --> 00:24:01.300
These are things that may
enhance your extension.

00:24:04.300 --> 00:24:06.747
All right, remotely
hosted code restrictions--

00:24:06.747 --> 00:24:08.330
a few moments ago,
I talked about some

00:24:08.330 --> 00:24:11.930
of the challenges related
to remotely loading code.

00:24:11.930 --> 00:24:14.750
And in order to address
these issues, in the future,

00:24:14.750 --> 00:24:17.300
extensions will only be
able to execute code that

00:24:17.300 --> 00:24:19.280
is in the extension's bundle.

00:24:19.280 --> 00:24:22.460
And by code, I specifically
mean JavaScript, CSS,

00:24:22.460 --> 00:24:23.660
and WebAssembly.

00:24:23.660 --> 00:24:26.190
Now, CSS may seem like a
bit of an outlier here.

00:24:26.190 --> 00:24:28.250
But unfortunately,
through clever use of CSS,

00:24:28.250 --> 00:24:30.500
it's possible to leak
data about the page

00:24:30.500 --> 00:24:32.240
that the CSS is injected into.

00:24:32.240 --> 00:24:36.200
So unfortunately, we have
to guard against that.

00:24:36.200 --> 00:24:39.260
I should also call out
that remote data is fine.

00:24:39.260 --> 00:24:40.820
You'll still be
able to load JSON.

00:24:40.820 --> 00:24:42.830
You'll still be able to
request media assets.

00:24:42.830 --> 00:24:45.930
You can still make remote
procedure calls or API calls.

00:24:45.930 --> 00:24:47.840
You can still do
that webby stuff.

00:24:47.840 --> 00:24:50.510
The intent, though, is, in
this privileged execution

00:24:50.510 --> 00:24:53.537
environment, we need
to be able to see

00:24:53.537 --> 00:24:54.620
the code that will be run.

00:24:57.750 --> 00:25:01.500
We plan to accomplish
this through a combination

00:25:01.500 --> 00:25:03.880
of platform and policy changes.

00:25:03.880 --> 00:25:07.110
For example, if you attempt
to change the default content

00:25:07.110 --> 00:25:08.970
security policy on an
extension, in order

00:25:08.970 --> 00:25:11.250
to grant unsafe
eval, as in the case

00:25:11.250 --> 00:25:16.830
here, or grant a remote
domain, you simply

00:25:16.830 --> 00:25:21.420
will fail to load the
extension at install time.

00:25:21.420 --> 00:25:27.270
I tend to be a big fan of
"error loudly and clearly,

00:25:27.270 --> 00:25:28.660
as soon as possible."

00:25:28.660 --> 00:25:30.840
And this is definitely that.

00:25:30.840 --> 00:25:32.640
In order to adapt
to this change,

00:25:32.640 --> 00:25:34.800
I'd strongly recommend
developers move

00:25:34.800 --> 00:25:37.225
towards a config-driven
architecture.

00:25:37.225 --> 00:25:38.850
Bundle all the code
that your extension

00:25:38.850 --> 00:25:40.710
may execute at runtime.

00:25:40.710 --> 00:25:43.530
And then use remotely
loaded configuration--

00:25:43.530 --> 00:25:45.810
for example, JSON--
in order to choose

00:25:45.810 --> 00:25:50.160
which files you actually
inject and which code parts you

00:25:50.160 --> 00:25:51.390
execute.

00:25:51.390 --> 00:25:53.190
I'd also encourage
extension developers

00:25:53.190 --> 00:25:55.740
to consider adding feature
switches to their extensions

00:25:55.740 --> 00:25:58.320
and possibly some
messaging support

00:25:58.320 --> 00:26:01.290
in order to minimize
unexpected behaviors

00:26:01.290 --> 00:26:03.720
and to communicate those
unexpected behaviors

00:26:03.720 --> 00:26:06.930
and disabling of certain
features to end users.

00:26:10.680 --> 00:26:14.000
One major area
changing in Manifest V3

00:26:14.000 --> 00:26:17.600
is how we handle modifying
network requests.

00:26:17.600 --> 00:26:20.300
Currently, extensions
use the blocking version

00:26:20.300 --> 00:26:25.280
of the Web Request API in order
to, well, block web requests.

00:26:25.280 --> 00:26:28.730
This API effectively places the
extension between the browser

00:26:28.730 --> 00:26:31.230
and the network.

00:26:31.230 --> 00:26:34.460
Here's a simplified version
of the web request flow.

00:26:34.460 --> 00:26:38.210
First, the extension registers
event listeners with Chrome

00:26:38.210 --> 00:26:40.970
in order to get callbacks
when a net request lifecycle

00:26:40.970 --> 00:26:43.180
event is fired.

00:26:43.180 --> 00:26:46.280
Next, when the
event is triggered,

00:26:46.280 --> 00:26:50.720
Chrome passes a request
object to the extension.

00:26:50.720 --> 00:26:53.300
And finally, the
extension chooses

00:26:53.300 --> 00:26:56.060
whether to allow the
request, to modify it,

00:26:56.060 --> 00:26:59.030
or to cancel it entirely.

00:26:59.030 --> 00:27:03.290
While this API is very capable,
it has a couple of major issues

00:27:03.290 --> 00:27:05.960
that we want to
address in this attempt

00:27:05.960 --> 00:27:08.360
to move to a more
privacy-preserving and secure

00:27:08.360 --> 00:27:09.950
extension platform.

00:27:09.950 --> 00:27:11.810
First, it requires
host permissions

00:27:11.810 --> 00:27:13.340
for the extension to work.

00:27:13.340 --> 00:27:16.820
As we just talked about, we're
trying to go away from them

00:27:16.820 --> 00:27:19.610
or discourage their
persistent use, which

00:27:19.610 --> 00:27:24.110
means that in the current
world, an extension wouldn't

00:27:24.110 --> 00:27:28.060
be able to observe or
modify the request.

00:27:28.060 --> 00:27:30.560
In other words, at install time,
the extension wouldn't work

00:27:30.560 --> 00:27:31.320
out-of-the-box.

00:27:31.320 --> 00:27:33.930
That's a pretty bad
experience for the end user.

00:27:33.930 --> 00:27:36.710
So it's something that
we want to address.

00:27:36.710 --> 00:27:40.580
Second, this exposes too
much data to the extension

00:27:40.580 --> 00:27:41.750
passively.

00:27:41.750 --> 00:27:44.060
The request object that
I mentioned in step 2

00:27:44.060 --> 00:27:46.560
here contains
detailed information,

00:27:46.560 --> 00:27:48.350
such as the URL,
the cookies used,

00:27:48.350 --> 00:27:50.480
the request body, et cetera.

00:27:50.480 --> 00:27:53.895
And this pervasive
passive data access

00:27:53.895 --> 00:27:55.520
is exactly the type
of thing that we're

00:27:55.520 --> 00:27:58.100
trying to adjust in
Manifest version 3.

00:27:58.100 --> 00:28:01.850
And third, and
finally, this API was

00:28:01.850 --> 00:28:06.620
designed for a world with
persistent background pages.

00:28:06.620 --> 00:28:08.480
To put it another way,
it's not a great fit

00:28:08.480 --> 00:28:10.670
for moving to service workers.

00:28:10.670 --> 00:28:12.650
Service workers
have a startup cost.

00:28:12.650 --> 00:28:15.320
And all requests are
blocked until that startup

00:28:15.320 --> 00:28:17.030
cost is paid.

00:28:17.030 --> 00:28:21.080
Without getting too deep
into the internals of Chrome,

00:28:21.080 --> 00:28:25.100
the web requests model
involves a decent amount

00:28:25.100 --> 00:28:27.680
of extra work for Chrome.

00:28:27.680 --> 00:28:32.150
For every lifecycle event that
is fired for every request,

00:28:32.150 --> 00:28:33.680
every extension
that's interested

00:28:33.680 --> 00:28:36.560
in it needs data to be
serialized and passed

00:28:36.560 --> 00:28:38.210
across multiple
different process hops.

00:28:42.050 --> 00:28:44.230
The extension use of
the service worker

00:28:44.230 --> 00:28:46.730
is also a bit different
than on the open web,

00:28:46.730 --> 00:28:49.220
where service workers
cash offline content

00:28:49.220 --> 00:28:52.070
and enable better
offline experiences.

00:28:52.070 --> 00:28:56.180
In our case, though, the service
worker would be a blocking--

00:28:58.730 --> 00:29:01.840
network request would block on
the extension service worker

00:29:01.840 --> 00:29:04.760
until the extension service
worker to start it up.

00:29:04.760 --> 00:29:07.500
And that has a very
real cost to end users.

00:29:07.500 --> 00:29:11.510
So in order to continue to
serve the Web Request use

00:29:11.510 --> 00:29:14.190
case and the wonderful
things that it does,

00:29:14.190 --> 00:29:18.800
we're trying to take a
think on redesigning some

00:29:18.800 --> 00:29:20.860
of the basics of this model.

00:29:20.860 --> 00:29:22.610
To show you what I
mean, let's take a look

00:29:22.610 --> 00:29:28.390
at how a new API that we're
introducing is going to work.

00:29:28.390 --> 00:29:29.450
Oh, I lied.

00:29:29.450 --> 00:29:31.480
I have to say that
in order to continue

00:29:31.480 --> 00:29:32.950
to serve the basic use cases--

00:29:32.950 --> 00:29:33.950
oh, no, I said all that.

00:29:33.950 --> 00:29:37.047
Not that it matters.

00:29:37.047 --> 00:29:39.130
We're introducing a new
API called Declarative Net

00:29:39.130 --> 00:29:41.660
Request that takes a
completely different approach.

00:29:41.660 --> 00:29:43.480
So rather than the
extension sitting

00:29:43.480 --> 00:29:45.400
between the browser
and the network,

00:29:45.400 --> 00:29:48.170
the extension at
install time says,

00:29:48.170 --> 00:29:50.560
hey, Chrome, here's
a list of rules

00:29:50.560 --> 00:29:53.230
that I want you to enforce.

00:29:53.230 --> 00:29:55.760
And then Chrome is responsible
for enforcing them.

00:29:58.470 --> 00:30:01.800
This declarative
model drastically

00:30:01.800 --> 00:30:05.610
limits how much data is exposed
to the extension, while still

00:30:05.610 --> 00:30:10.890
enabling extensions to
modify requests and block

00:30:10.890 --> 00:30:12.580
ads and stuff.

00:30:12.580 --> 00:30:15.960
So let's see some code to
actually compare the two.

00:30:15.960 --> 00:30:19.980
First, in Manifest version 2,
I have a set of permissions

00:30:19.980 --> 00:30:20.670
that I request.

00:30:20.670 --> 00:30:22.320
I have to request
both webRequest and

00:30:22.320 --> 00:30:25.590
webRequestBlocking because
that's a separate thing.

00:30:25.590 --> 00:30:30.710
I also have to request all the
hosts that I want to intercept.

00:30:30.710 --> 00:30:33.770
And then I match
requests that are

00:30:33.770 --> 00:30:38.690
sent to the main_frame on
Twitter, and I cancel them.

00:30:38.690 --> 00:30:40.580
So all of this is
happening running

00:30:40.580 --> 00:30:43.670
in a JavaScript environment.

00:30:43.670 --> 00:30:47.910
Instead in Manifest version
3, my permissions list now

00:30:47.910 --> 00:30:49.230
is only declarativeNetRequest.

00:30:49.230 --> 00:30:52.300
No host permissions required.

00:30:52.300 --> 00:30:55.500
I have a new property called
declarative_net_request,

00:30:55.500 --> 00:30:59.520
where I define a
set of static rules.

00:30:59.520 --> 00:31:03.640
And each of these
rules will match

00:31:03.640 --> 00:31:10.060
the main_frame and the URL
and then block that request.

00:31:10.060 --> 00:31:13.030
I should also call out that in
response of developer feedback,

00:31:13.030 --> 00:31:16.240
we've also added a--

00:31:16.240 --> 00:31:21.220
what's it called-- Runtime API
in order to add dynamic rules.

00:31:21.220 --> 00:31:23.770
But this still allows
Chrome to remain

00:31:23.770 --> 00:31:27.910
in control of what
requests are allowed

00:31:27.910 --> 00:31:31.000
and limit the amount of data
exposed to the extension.

00:31:31.000 --> 00:31:32.690
If you're interested
in learning more,

00:31:32.690 --> 00:31:34.148
please check out
our documentation.

00:31:34.148 --> 00:31:36.200
Again, link at the
end of the talk.

00:31:36.200 --> 00:31:38.567
But we are very
interested in trying

00:31:38.567 --> 00:31:40.150
to work with the
development community

00:31:40.150 --> 00:31:43.310
in order to find a
good solution for this.

00:31:43.310 --> 00:31:45.170
All right, wrap it up.

00:31:45.170 --> 00:31:47.670
We talked about a lot of stuff,
moving from background pages

00:31:47.670 --> 00:31:49.020
to service workers,
host permissions,

00:31:49.020 --> 00:31:50.578
remotely hosted
code, restrictions,

00:31:50.578 --> 00:31:51.620
net request modification.

00:31:51.620 --> 00:31:54.210
And all of that was too fast
to even hear what I just said.

00:31:54.210 --> 00:31:56.700
But before our time
together is over,

00:31:56.700 --> 00:31:59.700
I want to touch on another
important thing, what

00:31:59.700 --> 00:32:01.260
we're keeping the same.

00:32:01.260 --> 00:32:03.750
Extensions are an amazing
feature of Chrome.

00:32:03.750 --> 00:32:06.450
Time and time again,
we've heard that extension

00:32:06.450 --> 00:32:09.690
cited as a key feature of
how users browse the web.

00:32:09.690 --> 00:32:12.600
Extensions give users a way
to customize Chrome and truly

00:32:12.600 --> 00:32:14.870
make it their own.

00:32:14.870 --> 00:32:16.730
As we refine the
platform to give users

00:32:16.730 --> 00:32:20.370
more control over their
browsing experience,

00:32:20.370 --> 00:32:24.450
we're also striving to maintain
the eclectic, feature-rich,

00:32:24.450 --> 00:32:27.920
vibrant ecosystem of
extensions that we have today.

00:32:27.920 --> 00:32:29.690
We want to get to
a world where we

00:32:29.690 --> 00:32:34.220
can satisfy all of these
use cases that empower users

00:32:34.220 --> 00:32:37.220
and make Chrome their web
browser, while also feeling

00:32:37.220 --> 00:32:40.880
safe, and in charge, and secure.

00:32:40.880 --> 00:32:43.855
That's the reason that we're
pursuing Manifest version 3.

00:32:43.855 --> 00:32:45.230
And we're committed
to continuing

00:32:45.230 --> 00:32:46.813
to work with the
development community

00:32:46.813 --> 00:32:49.580
throughout this transition.

00:32:49.580 --> 00:32:53.090
Before I go, though, I'd
like to encourage you all

00:32:53.090 --> 00:32:55.700
to start experimenting with
the new version of the Chrome

00:32:55.700 --> 00:32:56.930
Extensions platform.

00:32:56.930 --> 00:32:59.450
We have a developer preview
in Chrome Canary today.

00:32:59.450 --> 00:33:03.030
Well, actually, we
released it on Halloween.

00:33:03.030 --> 00:33:04.100
But it's out there.

00:33:04.100 --> 00:33:06.470
You can start experimenting
and trying these out.

00:33:06.470 --> 00:33:08.720
Try migrating extensions
and also give us

00:33:08.720 --> 00:33:11.275
feedback on what you
can and can't do.

00:33:11.275 --> 00:33:12.650
And please let us
know if you run

00:33:12.650 --> 00:33:16.250
into any issues on the Chromium
Extensions Google group.

00:33:16.250 --> 00:33:17.430
Again, thank you very much.

00:33:17.430 --> 00:33:18.270
I appreciate it.

00:33:18.270 --> 00:33:18.970
Have a good one.

00:33:18.970 --> 00:33:19.470
[APPLAUSE]

00:33:19.470 --> 00:33:22.820
[MUSIC PLAYING]

